import{_ as t,r as p,o as c,c as o,a as s,b as n,d as i,e as a}from"./app-55752f72.js";const l={},u=a(`<h2 id="_1-rabbitmq工作模型" tabindex="-1"><a class="header-anchor" href="#_1-rabbitmq工作模型" aria-hidden="true">#</a> 1. RabbitMQ工作模型</h2><blockquote><p>消息队列有三个核心要素： 消息生产者、消息队列、消息消费者；</p></blockquote><ol><li>消息从<code>生产者</code>到<code>连接信道</code>到消息服务器<code>Broker</code></li><li>在<code>Broker</code>中到达对应<code>交换机</code>中</li><li>交换机根据一定的策略分发到<code>队列</code>中</li><li>再由消费者接收消息。 <img src="https://img-blog.csdnimg.cn/43e2207a6230497d8c31b4971f7800f7.png" alt="在这里插入图片描述"></li></ol><h3 id="_1-1-各部分角色介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-各部分角色介绍" aria-hidden="true">#</a> 1.1. 各部分角色介绍</h3><ul><li><code>生产者</code>（Producer）：发送消息的应用；（java程序，也可能是别的语言写的程序）</li><li><code>消费者</code>（Consumer）：接收消息的应用；（java程序，也可能是别的语言写的程序）</li><li><code>代理</code>（Broker）：就是消息服务器，RabbitMQ Server就是Message Broker；</li><li><code>连接</code>（Connection）：连接RabbitMQ服务器的TCP长连接；</li><li><code>信道</code>（Channel）：连接中的一个虚拟通道，消息队列发送或者接收消息时，都是通过信道进行的；</li><li><code>虚拟主机</code>（Virtual host）：一个虚拟分组，在代码中就是一个字符串，当多个不同的用户使用同一个RabbitMQ服务时，可以划分出多个Virtual host，每个用户在自己的Virtual host创建exchange/queue等；（分类比较清晰、相互隔离）</li><li><code>交换机</code>（Exchange）：交换机负责从生产者接收消息，并根据交换机类型分发到对应的消息队列中，起到一个路由的作用；</li><li><code>路由键</code>（Routing Key）：交换机根据路由键来决定消息分发到哪个队列，路由键是消息的目的地址；</li><li><code>绑定</code>（Binding）：绑定是队列和交换机的一个关联连接（关联关系）；</li><li><code>队列</code>（Queue）：存储消息的缓存；</li><li><code>消息</code>（Message）：由生产者通过RabbitMQ发送给消费者的信息；（消息可以任何数据，字符串、user对象，json串等等）</li></ul><h2 id="_2-在springboot中使用rabbitmq步骤" tabindex="-1"><a class="header-anchor" href="#_2-在springboot中使用rabbitmq步骤" aria-hidden="true">#</a> 2. 在SpringBoot中使用RabbitMQ步骤</h2><h3 id="_2-1-加入amqp依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-加入amqp依赖" aria-hidden="true">#</a> 2.1. 加入<code>AMQP</code>依赖</h3><blockquote><p>为什么是<code>AMQP</code>？</p><p>AMQP（Advanced Message Queue Protocol 高级消息队列协议）：是一个<strong>网络协议</strong>，它支持符合条件的客户端和消息代理中间件（message middleware broker）进行通讯。</p><p>RabbitMQ是AMQP协议的实现者，所以AMQP中的概念和准则也适用于RabbitMQ。</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-编写rabbitmq配置类" tabindex="-1"><a class="header-anchor" href="#_2-2-编写rabbitmq配置类" aria-hidden="true">#</a> 2.2. 编写RabbitMQ配置类</h3><blockquote><p>在配置类中，声明队列和交换机，同时绑定它们的关系，将它们的实例都交给Spring容器进行管理</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 1. 定义交换机
     * 2. 定义队列
     * 3. 绑定交换机和队列
     */</span>

    <span class="token doc-comment comment">/**
     * 1.定义交换机
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">&quot;exchange.fanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 2.定义队列
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;queue.fanout.a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;queue.fanout.b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 3.绑定交换机和队列
     * 注意，这里方法的形参是会自动注入的，所以写的时候要和创建Bean的时候类型和方法名一致才能注入成功
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingA</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将队列a绑定到交换机</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingB</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将队列b绑定到交换机</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-发送消息" tabindex="-1"><a class="header-anchor" href="#_2-3-发送消息" aria-hidden="true">#</a> 2.3. 发送消息</h3><blockquote><p>在发送消息的地方，注入<code>org.springframework.amqp.rabbit.core.RabbitTemplate</code>，将要发送的消息封装为<code>org.springframework.amqp.core.Message</code>对象，通过<code>rabbitTemplate</code>来实现发送消息的操作。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RabbitTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;exchange.fanout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完毕，发送时间为：{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-接收消息" tabindex="-1"><a class="header-anchor" href="#_2-4-接收消息" aria-hidden="true">#</a> 2.4. 接收消息</h3><blockquote><p>通过<code>@RabbitListener</code>来指定监听的队列，当队列有消息的时候就会调用方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RabbitListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveMsg</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 接收两个队列消息
     * <span class="token keyword">@param</span> <span class="token parameter">message</span>
     */</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;queue.fanout.a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queue.fanout.b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接收到消息：{}&quot;</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-交换机exchange" tabindex="-1"><a class="header-anchor" href="#_3-交换机exchange" aria-hidden="true">#</a> 3. 交换机Exchange</h2><blockquote><p>交换机主要就是以下四类</p><p>通过插件还可以扩展其他种类的交换机</p></blockquote><p>1、Fanout Exchange（扇形） 2、Direct Exchange（直连） 3、Topic Exchange（主题） 4、Headers Exchange（头部）</p><h3 id="_3-1-扇形交换机-fanout-exchange" tabindex="-1"><a class="header-anchor" href="#_3-1-扇形交换机-fanout-exchange" aria-hidden="true">#</a> 3.1. 扇形交换机（Fanout Exchange）</h3><blockquote><p>扇形交换机就是把消息投递到<strong>所有</strong>绑定的队列上，<strong>无需路由key</strong>，相当于是广播、群发</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5014bdd869384a4482ce5b486ec01450.png" alt="在这里插入图片描述"></p><h4 id="_3-1-1-配置代码" tabindex="-1"><a class="header-anchor" href="#_3-1-1-配置代码" aria-hidden="true">#</a> 3.1.1. 配置代码</h4><h5 id="_3-1-1-1-创建扇形交换机" tabindex="-1"><a class="header-anchor" href="#_3-1-1-1-创建扇形交换机" aria-hidden="true">#</a> 3.1.1.1. 创建扇形交换机</h5><blockquote><p>通过创建<code>FanoutExchange</code>来创建扇形交换机</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">&quot;exchange.fanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-1-1-2-为扇形交换机绑定队列" tabindex="-1"><a class="header-anchor" href="#_3-1-1-2-为扇形交换机绑定队列" aria-hidden="true">#</a> 3.1.1.2. 为扇形交换机绑定队列</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingA</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将队列a绑定到交换机</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-直连交换机-direct-exchange" tabindex="-1"><a class="header-anchor" href="#_3-2-直连交换机-direct-exchange" aria-hidden="true">#</a> 3.2. 直连交换机（Direct Exchange）</h3><blockquote><p>直连交换机在绑定队列的时候需要指定一个<code>routingKey</code>路由key，在收到消息后，会进行<strong>路由key的匹配</strong>，只有匹配成功才会投递</p><p>注意：多个队列的路由key都配对上了，就会将消息分别投递到这些队列里。但是，一个队列要是有多个key匹配，只会投递一次</p></blockquote><p><img src="https://s2.loli.net/2023/10/17/ptAX5Eg2uq7YJOB.jpg" alt="img"></p><h4 id="_3-2-1-配置交换机" tabindex="-1"><a class="header-anchor" href="#_3-2-1-配置交换机" aria-hidden="true">#</a> 3.2.1. 配置交换机</h4><h5 id="_3-2-1-1-创建与绑定" tabindex="-1"><a class="header-anchor" href="#_3-2-1-1-创建与绑定" aria-hidden="true">#</a> 3.2.1.1. 创建与绑定</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 1. 定义交换机
     * 2. 定义队列
     * 3. 绑定交换机和队列
     */</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> queueAName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> queueBName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> exchangeName<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 定义交换机
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义队列
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueAName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueBName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 绑定交换机和队列
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingA</span><span class="token punctuation">(</span><span class="token class-name">DirectExchange</span> directExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将队列a绑定到交换机</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 为队列b绑定不同的路由key
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingB1</span><span class="token punctuation">(</span><span class="token class-name">DirectExchange</span> directExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingB2</span><span class="token punctuation">(</span><span class="token class-name">DirectExchange</span> directExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingB3</span><span class="token punctuation">(</span><span class="token class-name">DirectExchange</span> directExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>directExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;warning&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-主题交换机-topic-exchange" tabindex="-1"><a class="header-anchor" href="#_3-3-主题交换机-topic-exchange" aria-hidden="true">#</a> 3.3. 主题交换机（<strong>Topic Exchange</strong>）</h3><blockquote><p>在绑定队列和交换机的时候可以指定<strong>带通配符的路由key</strong></p><p>在发送消息后，会根据消息的路由key进行匹配，匹配成功就会投递到对应队列中</p></blockquote><h4 id="_3-3-1-通配符规则" tabindex="-1"><a class="header-anchor" href="#_3-3-1-通配符规则" aria-hidden="true">#</a> 3.3.1. 通配符规则</h4><blockquote><p>注意：规则中提到的<code>单词</code>，都是路由key中以<code>.</code>分隔的为单词</p></blockquote><ol><li><code>*</code><ul><li><code>*</code>匹配一个单词（必须有一个，而且只有一个）</li><li>比如：<code>haha.*</code>的key就能接收<code>haha.a</code>。<strong>不能接收</strong><code>haha</code>也不能接收<code>haha.a.b</code></li></ul></li><li><code>#</code><ul><li><code>#</code>匹配多个单词，用来表示任意数量（零个或多个）单词</li><li>比如：<code>haha.#</code>的key就能接收<code>haha.a</code>。<strong>可以接收</strong><code>haha</code>和<code>haha.a.b</code></li></ul></li></ol><h4 id="_3-3-2-配置代码" tabindex="-1"><a class="header-anchor" href="#_3-3-2-配置代码" aria-hidden="true">#</a> 3.3.2. 配置代码</h4><blockquote><p>主要是路由key的配置区别</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 1. 定义交换机
     * 2. 定义队列
     * 3. 绑定交换机和队列
     */</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> queueAName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> queueBName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> exchangeName<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 定义主题交换机
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">TopicExchange</span> <span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span><span class="token punctuation">.</span><span class="token function">topicExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义队列
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueAName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueBName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 绑定交换机和队列
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingA</span><span class="token punctuation">(</span><span class="token class-name">TopicExchange</span> topicExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将队列a绑定到交换机</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;*.orange.*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingB1</span><span class="token punctuation">(</span><span class="token class-name">TopicExchange</span> topicExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;*.*.rabbit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingB2</span><span class="token punctuation">(</span><span class="token class-name">TopicExchange</span> topicExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;lazy.#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-头交换机-headers-exchange" tabindex="-1"><a class="header-anchor" href="#_3-4-头交换机-headers-exchange" aria-hidden="true">#</a> 3.4. 头交换机（<strong>Headers Exchange</strong>）</h3><blockquote><p>​ 有时消息的路由操作会涉及到<strong>多个属性</strong>，此时使用消息头就比用路由键更容易表达，头交换机（headers exchange）就是为此而生的。头交换机使用多个消息属性来代替路由键建立路由规则。通过判断消息头的值能否与指定的绑定相匹配来确立路由规则。</p><p>​ 头交换机可以视为直连交换机的另一种表现形式。头交换机能够像直连交换机一样工作，不同之处在于头交换机的路由规则是建立在头属性值之上，而不是路由键。路由键必须是一个字符串，而头属性值则没有这个约束，它们甚至可以是整数或者哈希值（字典）等。</p><p>​ 头交换机用的比较少，了解一下概念即可。</p></blockquote><h4 id="_3-4-1-配置代码" tabindex="-1"><a class="header-anchor" href="#_3-4-1-配置代码" aria-hidden="true">#</a> 3.4.1. 配置代码</h4><h5 id="_3-4-1-1-创建交换机和队列" tabindex="-1"><a class="header-anchor" href="#_3-4-1-1-创建交换机和队列" aria-hidden="true">#</a> 3.4.1.1. 创建交换机和队列</h5><blockquote><p>满足条件，而当&quot;x-match&quot;设置为“all”的时候，就需要消息头的所有值都匹配成功。</p><p>在绑定交换机和队列的时候，可以确定头属性是需要消息<strong>完全匹配all</strong>还是<strong>任一匹配any</strong>。</p><ul><li>如果是完全匹配：消息头就需要所有值完全匹配</li><li>如果是任一匹配：消息头只要能匹配到任意一个值就满足条件</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 绑定交换机和队列
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingA</span><span class="token punctuation">(</span><span class="token class-name">HeadersExchange</span> headersExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> headerValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headerValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headerValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将队列a绑定到交换机</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>headersExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereAll</span><span class="token punctuation">(</span>headerValues<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingB</span><span class="token punctuation">(</span><span class="token class-name">HeadersExchange</span> headersExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> headerValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headerValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headerValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将队列b绑定到交换机</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>headersExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whereAll</span><span class="token punctuation">(</span>headerValues<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-4-1-2-发送消息" tabindex="-1"><a class="header-anchor" href="#_3-4-1-2-发送消息" aria-hidden="true">#</a> 3.4.1.2. 发送消息</h5><blockquote><p>给消息加上<code>消息属性</code>，在消息属性里面指定上<code>消息头</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${my.exchangeName}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> exchangeName<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${my.routingKey}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 消息属性</span>
        <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置消息头</span>
        messageProperties<span class="token punctuation">.</span><span class="token function">setHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 消息带上消息属性</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!!!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andProperties</span><span class="token punctuation">(</span>messageProperties<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完毕，发送时间为：{}，交换机为：{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-ttl" tabindex="-1"><a class="header-anchor" href="#_4-ttl" aria-hidden="true">#</a> 4. TTL</h2><blockquote><p>TTL：<code>Time To Live</code>，消息过期时间</p></blockquote><h3 id="_4-1-给队列设置ttl" tabindex="-1"><a class="header-anchor" href="#_4-1-给队列设置ttl" aria-hidden="true">#</a> 4.1. 给队列设置TTL</h3><blockquote><ul><li><p>相当于队列的所有消息都带了TTL，不过，如果消息本身TTL<strong>小于队列TTL</strong>的话，<strong>以小的为主</strong></p></li><li><p>配置的时候单位是<strong>毫秒</strong></p></li><li><p>可以通过两种方式来添加队列配置，一种是<code>new</code>，一种是<code>建造者模式</code>。个人更喜欢建造者模式（简单），队列配置会在后续章节介绍。</p></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 定义队列，设置为队列属性添加消息过期时间
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方式1：new Queue</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置队列消息过期时间</span>
    arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// return new Queue(queueName, true, false, false, arguments);</span>

    <span class="token comment">// 方式2：建造者模式</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span>
        <span class="token comment">// 通过建造者模式设置过期时间</span>
        <span class="token comment">// .ttl(15000)</span>
        <span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-给单条消息设置ttl" tabindex="-1"><a class="header-anchor" href="#_4-2-给单条消息设置ttl" aria-hidden="true">#</a> 4.2. 给单条消息设置TTL</h3><blockquote><p>通过消息属性<code>MessageProperties</code>来添加消息的配置，具体消息属性配置会在后面章节介绍。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置过期时间，毫秒数的字符串，这里是30s</span>
    messageProperties<span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token string">&quot;30000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
        <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!!!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andProperties</span><span class="token punctuation">(</span>messageProperties<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完毕，发送时间为：{}，交换机为：{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-🔴死信队列" tabindex="-1"><a class="header-anchor" href="#_5-🔴死信队列" aria-hidden="true">#</a> 5. 🔴死信队列</h2><h3 id="_5-1-是什么" tabindex="-1"><a class="header-anchor" href="#_5-1-是什么" aria-hidden="true">#</a> 5.1. 是什么</h3><p>死信队列其实是<strong>死信交换机</strong>和<strong>死信队列</strong>组成的。</p><p><strong>死信交换机</strong>和<strong>死信队列</strong>其实也<code>就是普通的交换机和队列</code>，只是程序员让它们接收的消息不太一样，主要就是用来处理<strong>死信</strong>。</p><p>出现以下特殊情况的消息才会算作<code>死信</code>，死信交换机主要就是为了接收这些死信，放入死信队列中，程序监听死信队列，如果接收到消息了说明程序出现了一些问题，这时候就要通知开发人员查看了。</p><h3 id="_5-2-让消息变为死信的特殊情况" tabindex="-1"><a class="header-anchor" href="#_5-2-让消息变为死信的特殊情况" aria-hidden="true">#</a> 5.2. 让消息变为死信的特殊情况</h3><p>出现以下特殊情况，会认为消息是死信（没人要的消息）</p><ol><li>消息过期（TTL） <ul><li>包括 <strong>消息自身TTL</strong> 或者 <strong>队列TTL</strong></li></ul></li><li>正常交换机设置了<strong>最大长度</strong>（包括消息byte限制和消息数量限制） <ul><li>超过之后如果设置了死信交换机，会将消息放到死信交换机</li><li>超过之后如果没有设置死信交换机，消息就被扔了</li></ul></li><li>消费者手动确认消息的模式下，消息被消费者拒绝且没有重新入队</li></ol><h3 id="_5-3-给队列配置死信交换机" tabindex="-1"><a class="header-anchor" href="#_5-3-给队列配置死信交换机" aria-hidden="true">#</a> 5.3. 给队列配置死信交换机</h3><p>只有当给队列配置了死信交换机，同时声明了死信交换机和死信队列，并绑定它们的关系，才能让消息出现特殊情况时投递到死信交换机</p><ul><li>设置死信交换机时要指定死信交换机名字</li><li>同时如果死信交换机是直连的，就需要指定路由到死信队列的路由key</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置ttl</span>
    arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关键：设置死信交换机</span>
    arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> exchangeDeadName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 关键：设置死信交换机路由key。因为当前死信交换机是直连的，所以要制定死信交换机和死信队列的routingKey</span>
    arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> deadRoutingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
        <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueNormalName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-ttl死信" tabindex="-1"><a class="header-anchor" href="#_5-4-ttl死信" aria-hidden="true">#</a> 5.4. TTL死信</h3><p>同前一节TTL配置</p><h3 id="_5-5-最大长度导致死信" tabindex="-1"><a class="header-anchor" href="#_5-5-最大长度导致死信" aria-hidden="true">#</a> 5.5. 最大长度导致死信</h3><p>给队列设置最大长度，当超出后就会将头部（默认）消息扔到死信交换机</p><h3 id="_5-6-消费者手动确认模式拒绝消息" tabindex="-1"><a class="header-anchor" href="#_5-6-消费者手动确认模式拒绝消息" aria-hidden="true">#</a> 5.6. 消费者手动确认模式拒绝消息</h3><h4 id="_5-6-1-配置文件中开启消费者手动确认模式" tabindex="-1"><a class="header-anchor" href="#_5-6-1-配置文件中开启消费者手动确认模式" aria-hidden="true">#</a> 5.6.1. 配置文件中开启消费者手动确认模式</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
<span class="token key atrule">host</span><span class="token punctuation">:</span> RabbitMQip
<span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
<span class="token key atrule">username</span><span class="token punctuation">:</span> 用户名
<span class="token key atrule">password</span><span class="token punctuation">:</span> 密码
<span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> 虚拟主机名字
<span class="token key atrule">listener</span><span class="token punctuation">:</span>
  <span class="token key atrule">simple</span><span class="token punctuation">:</span>
    <span class="token comment"># 消费者手动确认</span>
    <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-6-2-接收消息-拒绝且不重入队" tabindex="-1"><a class="header-anchor" href="#_5-6-2-接收消息-拒绝且不重入队" aria-hidden="true">#</a> 5.6.2. 接收消息，拒绝且不重入队</h4><p>消费者监听普通队列，接收消息后模拟异常，发生异常后就得<strong>拒绝接收消息</strong>了（如果告诉队列确认接收了，队列会删掉消息），拒绝后<strong>不重投消息</strong>，消息就会进入死信队列了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 监听正常的那个队列的名字，不是监听那个死信队列
 * channel 消息信道（是连接下的一个消息信道，一个连接下有多个消息信息，发消息/接消息都是通过信道完成的）
 */</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;普通队列名字&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token comment">// 获得消息属性</span>
    <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拿到消息唯一id</span>
    <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> messageProperties<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;时间：{}，获得消息：{}&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模拟执行业务逻辑的时候遇到异常了</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果无异常，通过信道通知队列，确认收到</span>
        <span class="token comment">// multiple若为true代表之前的消息全都确认，为false只确认当前消息</span>
        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;接收失败，原因：{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// requeue – true if the rejected message(s) should be requeued rather than discarded/dead-lettered</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 消费者手动不确认，不重新投递（不重新入队）</span>
            <span class="token comment">// channel.basicNack(deliveryTag, false, false);</span>
            <span class="token comment">// 重点：拒绝且不重新入队（会进入死信队列）(和上面的区别是，basicNack第二个参数可以批量处理）</span>
            channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-🔴延迟队列" tabindex="-1"><a class="header-anchor" href="#_6-🔴延迟队列" aria-hidden="true">#</a> 6. 🔴延迟队列</h2><h3 id="_6-1-是什么" tabindex="-1"><a class="header-anchor" href="#_6-1-是什么" aria-hidden="true">#</a> 6.1. 是什么</h3><p>RabbitMQ中的延迟队列可以用于在一定时间后才处理消息，通常用于处理一些<code>需要延迟执行的任务</code>，例如定时任务、延迟消息发送等。</p><p>具体来说，当生产者发送一条消息到延迟队列时，可以设置消息的过期时间（TTL），然后将消息发送到延迟队列（死信队列）中。当消息过期后，RabbitMQ会将消息转发到指定的目标队列中，从而实现延迟执行的效果。</p><h3 id="_6-2-ttl-dlx组合实现延迟队列" tabindex="-1"><a class="header-anchor" href="#_6-2-ttl-dlx组合实现延迟队列" aria-hidden="true">#</a> 6.2. TTL+DLX组合实现延迟队列</h3><p><img src="https://s2.loli.net/2023/10/17/ECThZMdt4Fe9pIX.jpg" alt="img"></p><p>一般来说，延迟队列需要使用TTL（Time To Live）和DLX（Dead Letter Exchange）来实现。</p><ul><li>TTL用于设置消息的过期时间，在消息到达队列后，经过指定TTL还没被消费者取出，就会过期，此时将消息转发到死信交换机DLX中。</li><li>DLX用于接收被丢弃或者过期的消息，并将其转发到指定的目标队列中。</li><li>消费者从对应队列取出消息，就实现了延迟队列的功能</li></ul><p>因此，使用TTL和DLX可以实现延迟队列的功能，并且可以保证消息的可靠传输。</p><h3 id="_6-3-延迟队列问题-ttl不一致问题" tabindex="-1"><a class="header-anchor" href="#_6-3-延迟队列问题-ttl不一致问题" aria-hidden="true">#</a> 6.3. 延迟队列问题：TTL不一致问题</h3><p>后一条消息先过期但是被前一条还没过期的消息挡住：如果有两条不一样TTL的消息进入队列，后一条比前一条<strong>先过期</strong>，就会出现本来后一条要过期的，但是得等前一条先出队后一条才能出来。</p><h4 id="_6-3-1-解决方式-分散队列" tabindex="-1"><a class="header-anchor" href="#_6-3-1-解决方式-分散队列" aria-hidden="true">#</a> 6.3.1. 解决方式：分散队列</h4><p>通过把不同TTL的消息投递到不同的队列中，让队列中的消息不会被阻挡</p><p><img src="https://s2.loli.net/2023/10/17/pWrJsqUoK3Z45Bf.jpg" alt="img"></p><h3 id="_6-4-插件实现延迟队列" tabindex="-1"><a class="header-anchor" href="#_6-4-插件实现延迟队列" aria-hidden="true">#</a> 6.4. 插件实现延迟队列</h3><p><img src="https://s2.loli.net/2023/10/17/IW8dlRGaF4ctP5h.jpg" alt="img"></p><p>延迟队列配置相对麻烦（和死信队列配置类似，需要定义额外队列用来接收过期的消息），借助<code>rabbitmq_delayed_message_exchange</code>插件，只需要创建自定义的延迟交换机，给这个交换机添加<code>x-delayed-type参数</code>，用于指定它的类型。</p><p>当消息到达这个交换机时，且消息的消息属性中指定了<code>x-dealy</code>，就会在到期后被投递到指定目标队列中，实现延迟队列的效果（同时也解决了消息TTL不一致的问题）</p><h4 id="_6-4-1-下载安装插件" tabindex="-1"><a class="header-anchor" href="#_6-4-1-下载安装插件" aria-hidden="true">#</a> 6.4.1. 下载安装插件</h4><ol><li>找到对应版本下载：http://www.rabbitmq.com/community-plugins.html</li><li>将插件拷贝到RabbitMQ服务器的<code>plugins</code>目录内</li><li>解压插件</li><li>启用插件：<code>./rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></li><li>查看是否安装：<code>./rabbitmq-plugins list</code></li></ol><h4 id="_6-4-2-插件原理" tabindex="-1"><a class="header-anchor" href="#_6-4-2-插件原理" aria-hidden="true">#</a> 6.4.2. 插件原理</h4><p>消息发送后不会直接投递到队列，</p><p>而是存储到 Mnesia（嵌入式数据库，小型数据库，不适用于大量延迟消息的实现），检查 <code>x-delay</code> 时间（消息头部）；</p><p>延迟插件在 RabbitMQ 3.5.7 及以上的版本才支持，依赖 Erlang/OPT 18.0 及以上运行环境；</p><h4 id="_6-4-3-配置代码" tabindex="-1"><a class="header-anchor" href="#_6-4-3-配置代码" aria-hidden="true">#</a> 6.4.3. 配置代码</h4><h5 id="_6-4-3-1-创建自定义交换机并绑定普通队列" tabindex="-1"><a class="header-anchor" href="#_6-4-3-1-创建自定义交换机并绑定普通队列" aria-hidden="true">#</a> 6.4.3.1. 创建自定义交换机并绑定普通队列</h5><blockquote><p>普通队列其实是当做延迟队列了</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 1. 定义交换机
     * 2. 定义队列
     * 3. 绑定交换机和队列
     */</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> exchangeName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> queueDelayName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 自定义交换机
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomExchange</span> <span class="token function">customExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 放一个参数，指明这个交换机是直连的</span>
        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-delayed-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;x-delayed-message&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义普通队列
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 建造者模式</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueDelayName<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 绑定交换机和普通队列
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding</span><span class="token punctuation">(</span><span class="token class-name">CustomExchange</span> customExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 队列和自定义交换机绑定，要指定路由key</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>customExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>routingKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-4-3-2-发送消息" tabindex="-1"><a class="header-anchor" href="#_6-4-3-2-发送消息" aria-hidden="true">#</a> 6.4.3.2. 发送消息</h5><blockquote><p>这里通过两个代码块模拟两条过期时间不一致的消息，验证了插件交换机会解决过期时间不一致问题。</p><p>同时需要设置消息属性的消息头的<code>x-delay</code>参数，来设置延迟时间（毫秒）</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// // 15秒过期</span>
        <span class="token comment">// messageProperties.setExpiration(&quot;15000&quot;);</span>
        <span class="token comment">// 通过消息头来设置过期时间</span>
        messageProperties<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;x-delay&quot;</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
            <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!!!--15000&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">andProperties</span><span class="token punctuation">(</span>messageProperties<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;第一条消息发送完毕，发送时间为：{}，交换机为：{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// // 5秒过期</span>
        <span class="token comment">// messageProperties.setExpiration(&quot;5000&quot;);</span>
        <span class="token comment">// 通过消息头来设置过期时间</span>
        messageProperties<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;x-delay&quot;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
            <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!!!--5000&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">andProperties</span><span class="token punctuation">(</span>messageProperties<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;第二条消息发送完毕，发送时间为：{}，交换机为：{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-4-关于ttl和x-delay" tabindex="-1"><a class="header-anchor" href="#_6-4-4-关于ttl和x-delay" aria-hidden="true">#</a> 6.4.4. 关于TTL和x-delay</h4><p>TTL和x-delay不是对立关系，<strong>可以共存</strong>，或只有x-delay（有x-delay说明用了插件了，肯定要配置这个）</p><ol><li>设置了x-delay参数后，消息会被延迟一定时间后再被投递到队列中。</li><li>设置TTL（Time-To-Live）参数，则表示消息在队列中的存活时间，超过这个时间后，消息会被自动删除。</li></ol><p>x-delay和TTL是两个不同的概念，可以分别使用，也可以结合使用。</p><ul><li>如果<strong>只需要延迟消息投递</strong>，可以只设置x-delay参数，不需要设置TTL。</li><li>如果<strong>需要延迟消息投递并且限制消息在队列中的存活时间</strong>，可以同时设置x-delay和TTL参数。</li></ul><p>需要注意的是，x-delay参数只在延迟队列中生效，不会影响正常队列中的消息投递。而TTL参数则适用于所有类型的队列，包括延迟队列和正常队列。</p><h2 id="_7-消息投递可靠性" tabindex="-1"><a class="header-anchor" href="#_7-消息投递可靠性" aria-hidden="true">#</a> 7. 消息投递可靠性</h2><p><img src="https://s2.loli.net/2023/10/17/PbxXEr3LWDNwaqg.jpg" alt="img"></p><p>消息投递过程主要可以分为如图所示的四个阶段，消息可靠性就是确保每个环节的成功，不过肯定会牺牲一点性能，用性能换取可靠性。</p><p>四个阶段分别是：</p><ol><li>生产者到交换机</li><li>交换机投递到队列</li><li>消息在队列和交换机中的持久化</li><li>队列到消费者</li></ol><h3 id="_7-1-第一阶段-生产者到交换机" tabindex="-1"><a class="header-anchor" href="#_7-1-第一阶段-生产者到交换机" aria-hidden="true">#</a> 7.1. 第一阶段：生产者到交换机</h3><blockquote><p>目标：确保消息到达RabbitMQ的交换机上</p></blockquote><p>可能因为各种原因导致消息无法正确到达交换机，比如网络问题、配置交换机名字写错了等等，这时候就应该让<strong>生产者</strong>知道消息是否成功到达交换机。</p><h4 id="_7-1-1-confirm模式" tabindex="-1"><a class="header-anchor" href="#_7-1-1-confirm模式" aria-hidden="true">#</a> 7.1.1. Confirm模式</h4><p><code>Confirm模式</code>是一个比较常见的处理一阶段问题的模式。开启这个模式后，当消息发出，RabbitMQ服务器就会返回一个信号（执行一个回调），通过这个信号的参数可以判断消息是否到达交换机。</p><blockquote><p>==不论消息是否到达交换机，都会调用这个回调==</p></blockquote><h5 id="_7-1-1-1-开启confirm模式" tabindex="-1"><a class="header-anchor" href="#_7-1-1-1-开启confirm模式" aria-hidden="true">#</a> 7.1.1.1. 开启Confirm模式</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> ip
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> 用户名
    <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> 虚拟主机 
    <span class="token comment"># 开启生产者确认模式</span>
    <span class="token key atrule">publisher-confirm-type</span><span class="token punctuation">:</span> correlated
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-1-1-2-代码" tabindex="-1"><a class="header-anchor" href="#_7-1-1-2-代码" aria-hidden="true">#</a> 7.1.1.2. 代码</h5><p>回调方法在<code>RabbitTemplate.ConfirmCallback</code>接口中定义了，可以通过四种方式来实现接口并重写里面的方法，给<code>rabbitTemplate</code>配置上回调方法，并让它在实例化之后就执行（@PostConstruct），因为实例化的时候就代表发消息了。</p><ol><li>编写外部配置类实现接口，并实现方法（这里的外部是相对于发送消息类而言的）</li><li>让发送消息类自身实现接口，在类中实现方法</li><li>只在<code>rabbitTemplate</code>需要设置<code>confirm回调</code>时通过<strong>匿名内部类</strong>方式实现</li><li>在<code>rabbitTemplate</code>需要设置<code>confirm回调</code>时通过<strong>lambda表达式</strong>方式实现（最简洁）</li></ol><h6 id="_7-1-1-2-1-外部类编写" tabindex="-1"><a class="header-anchor" href="#_7-1-1-2-1-外部类编写" aria-hidden="true">#</a> 7.1.1.2.1. 外部类编写</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfirmCallback</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息到达&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息没到达交换机，原因为：{}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外部类使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${my.exchangeName}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> exchangeName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">MyConfirmCallback</span> confirmCallback<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * @PostConstruct 会在实例化之后调用方法
     */</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span>confirmCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
                <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!!!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        correlationData<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;order-12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第四个参数发送关联数据</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完毕，发送时间为：{}，交换机为：{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_7-1-1-2-2-发送消息直接实现接口" tabindex="-1"><a class="header-anchor" href="#_7-1-1-2-2-发送消息直接实现接口" aria-hidden="true">#</a> 7.1.1.2.2. 发送消息直接实现接口</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgService</span>  <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${my.exchangeName}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> exchangeName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
                <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!!!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        correlationData<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;order-12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第四个参数发送关联数据</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完毕，发送时间为：{}，交换机为：{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> id <span class="token operator">=</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;id为{}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息到达&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息没到达交换机，原因为：{}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_7-1-1-2-3-匿名内部类" tabindex="-1"><a class="header-anchor" href="#_7-1-1-2-3-匿名内部类" aria-hidden="true">#</a> 7.1.1.2.3. 匿名内部类</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostConstruct</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 匿名内部类方法
     */</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> id <span class="token operator">=</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;id为{}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息到达&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息没到达交换机，原因为：{}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_7-1-1-2-4-lambda表达式" tabindex="-1"><a class="header-anchor" href="#_7-1-1-2-4-lambda表达式" aria-hidden="true">#</a> 7.1.1.2.4. lambda表达式</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostConstruct</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * lambda表达式
     */</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span>
        <span class="token comment">// (CorrelationData correlationData, boolean ack, String cause) -&gt; {</span>
        <span class="token comment">// 也可以不定义类型</span>
        <span class="token punctuation">(</span>correlationData<span class="token punctuation">,</span> ack<span class="token punctuation">,</span> cause<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// lambda表达式</span>
            <span class="token class-name">String</span> id <span class="token operator">=</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;id为{}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息到达&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息没到达交换机，原因为：{}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-第二阶段-交换机到队列" tabindex="-1"><a class="header-anchor" href="#_7-2-第二阶段-交换机到队列" aria-hidden="true">#</a> 7.2. 第二阶段：交换机到队列</h3><h4 id="_7-2-1-return模式" tabindex="-1"><a class="header-anchor" href="#_7-2-1-return模式" aria-hidden="true">#</a> 7.2.1. Return模式</h4><p>使用步骤：</p><ol><li>开启<code>Return模式</code></li><li>使用<code>rabbitTemplate.setReturnsCallback</code>设置回调函数</li><li>如果消息从交换机投递到队列的过程失败，才会调用这个回调 <ul><li><code>Confirm</code>的回调是<strong>一定会</strong>调用的</li><li><code>Return</code>的回调<strong>只有失败</strong>才会调用</li></ul></li></ol><h4 id="_7-2-2-代码" tabindex="-1"><a class="header-anchor" href="#_7-2-2-代码" aria-hidden="true">#</a> 7.2.2. 代码</h4><blockquote><p>同<code>Confirm模式</code>的编写套路，Return也有4中编写方式：</p><ol><li>发送消息类的外部类实现接口</li><li>发送消息类直接实现接口</li><li>在<code>rabbitTemplate</code>设置回调时<strong>匿名内部类</strong>实现</li><li>在<code>rabbitTemplate</code>设置回调时通过<strong>lambda表达式</strong>实现</li></ol><p>本节只给出第四种lambda表达式示例代码</p></blockquote><h5 id="_7-2-2-1-lambda表达式" tabindex="-1"><a class="header-anchor" href="#_7-2-2-1-lambda表达式" aria-hidden="true">#</a> 7.2.2.1. lambda表达式</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostConstruct</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置回调</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnsCallback</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>returnedMessage<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息从交换机路由到队列失败，原因为：{}&quot;</span><span class="token punctuation">,</span> returnedMessage<span class="token punctuation">.</span><span class="token function">getReplyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-第三阶段-持久化" tabindex="-1"><a class="header-anchor" href="#_7-3-第三阶段-持久化" aria-hidden="true">#</a> 7.3. 第三阶段：持久化</h3><p>可能因为系统宕机、重启、关闭等等情况导致没有持久化存储在队列的消息丢失。</p><p>所以要通过一些持久化设置让数据不会因为这些情况丢失。</p><h4 id="_7-3-1-持久化主要分为四种" tabindex="-1"><a class="header-anchor" href="#_7-3-1-持久化主要分为四种" aria-hidden="true">#</a> 7.3.1. 持久化主要分为四种</h4><ol><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li><li>搭建集群、镜像队列，高可用</li></ol><h5 id="_7-3-1-1-交换机持久化" tabindex="-1"><a class="header-anchor" href="#_7-3-1-1-交换机持久化" aria-hidden="true">#</a> 7.3.1.1. 交换机持久化</h5><p>在定义交换机时，<code>默认持久化</code>，也可以手动改成不持久化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 定义交换机
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span>
        <span class="token comment">// 交换机名字</span>
        <span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">)</span>
        <span class="token comment">/*// 持久化，默认true
                .durable(false)*/</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==源码：==</p><blockquote><p>在创建交换机建造者时，默认持久化</p></blockquote><p><img src="https://s2.loli.net/2023/10/17/BX7mNgClI2Tstkj.png" alt="image-20230611104909877"></p><h5 id="_7-3-1-2-队列持久化" tabindex="-1"><a class="header-anchor" href="#_7-3-1-2-队列持久化" aria-hidden="true">#</a> 7.3.1.2. 队列持久化</h5><p>在定义队列的时候，<code>默认持久化</code></p><h6 id="_7-3-1-2-1-通过new方式创建队列" tabindex="-1"><a class="header-anchor" href="#_7-3-1-2-1-通过new方式创建队列" aria-hidden="true">#</a> 7.3.1.2.1. 通过new方式创建队列</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 定义队列
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;queue.fanout.a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==构造方法源码：==默认持久化</p><p><img src="https://s2.loli.net/2023/10/17/mwaYlBS5DW1pXxN.png" alt="image-20230611104530777"></p><h6 id="_7-3-1-2-2-通过建造者模式创建队列" tabindex="-1"><a class="header-anchor" href="#_7-3-1-2-2-通过建造者模式创建队列" aria-hidden="true">#</a> 7.3.1.2.2. 通过建造者模式创建队列</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 定义队列
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueAName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==源码：==</p><p><code>durable方法</code>源码：</p><p><img src="https://s2.loli.net/2023/10/17/8aqr7u2ntlvW9sp.png" alt="image-20230611104641886"></p><p>到<code>setDurable()</code>源码：默认持久化</p><p><img src="https://s2.loli.net/2023/10/17/wOkcpZL6bTxuj9e.png" alt="image-20230611104718936"></p><h5 id="_7-3-1-3-消息持久化" tabindex="-1"><a class="header-anchor" href="#_7-3-1-3-消息持久化" aria-hidden="true">#</a> 7.3.1.3. 消息持久化</h5><blockquote><p>消息通过<code>消息属性MessageProperties</code>中指定<code>MessageDeliveryMode</code>的枚举类型来确定是否持久化，==默认持久化==</p></blockquote><h6 id="_7-3-1-3-1-通过构造者创建消息" tabindex="-1"><a class="header-anchor" href="#_7-3-1-3-1-通过构造者创建消息" aria-hidden="true">#</a> 7.3.1.3.1. 通过构造者创建消息</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${my.exchangeName}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> exchangeName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!!!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完毕，发送时间为：{}，交换机为：{}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_7-3-1-3-2-messagebuilder-build-源码" tabindex="-1"><a class="header-anchor" href="#_7-3-1-3-2-messagebuilder-build-源码" aria-hidden="true">#</a> 7.3.1.3.2. <code>MessageBuilder.build()</code>源码：</h6><blockquote><p>只截取部分源码</p><p>如果没有在创建队列的时候带上消息属性，就会调用<code>this.buildProperties()</code>，从父类中拿到消息属性</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MessageBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">MessageBuilderSupport</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Message</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_7-3-1-3-3-父类消息属性" tabindex="-1"><a class="header-anchor" href="#_7-3-1-3-3-父类消息属性" aria-hidden="true">#</a> 7.3.1.3.3. 父类消息属性</h6><blockquote><p>只截取部分源码</p><p>如果没有传递自定义消息属性，就会用组合进来的消息属性</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MessageBuilderSupport</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MessageProperties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">MessageProperties</span> <span class="token function">buildProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_7-3-1-3-4-实例化消息属性" tabindex="-1"><a class="header-anchor" href="#_7-3-1-3-4-实例化消息属性" aria-hidden="true">#</a> 7.3.1.3.4. 实例化消息属性</h6><blockquote><p>在实例化消息属性的时候，会默认设置上持久化的模式（枚举）</p></blockquote><p><img src="https://s2.loli.net/2023/10/17/sIP4uVtU9SBigvh.png" alt="image-20230611110949621"></p><h6 id="_7-3-1-3-5-messagedeliverymode" tabindex="-1"><a class="header-anchor" href="#_7-3-1-3-5-messagedeliverymode" aria-hidden="true">#</a> 7.3.1.3.5. MessageDeliveryMode</h6><p><img src="https://s2.loli.net/2023/10/17/xmk1ITeQ3jDpEOW.png" alt="image-20230611111018741"></p><h3 id="_7-4-第四阶段-队列到消费者" tabindex="-1"><a class="header-anchor" href="#_7-4-第四阶段-队列到消费者" aria-hidden="true">#</a> 7.4. 第四阶段：队列到消费者</h3><h4 id="_7-4-1-消费者手动确认模式" tabindex="-1"><a class="header-anchor" href="#_7-4-1-消费者手动确认模式" aria-hidden="true">#</a> 7.4.1. 消费者手动确认模式</h4><blockquote><p>正常情况下，消费者一旦接收了消息，消息会<strong>立刻</strong>从队列中删除，如果此时消费者出现某些异常（比如要把消息存数据库，但是业务报错了没存进去），就会导致消息丢失。</p><p>通过消费者手动确认模式可以让<strong>消费者来控制队列是否删除消息</strong>。</p></blockquote><p>使用步骤：</p><ol><li>开启消费者手动确认模式</li><li>消费者消费完成后再通知队列删除，否则拒绝消息</li></ol><h5 id="_7-4-1-1-代码" tabindex="-1"><a class="header-anchor" href="#_7-4-1-1-代码" aria-hidden="true">#</a> 7.4.1.1. 代码</h5><h6 id="_7-4-1-1-1-开启手动确认" tabindex="-1"><a class="header-anchor" href="#_7-4-1-1-1-开启手动确认" aria-hidden="true">#</a> 7.4.1.1.1. 开启手动确认</h6><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> ip
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> 用户名
    <span class="token key atrule">password</span><span class="token punctuation">:</span> 密码
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> 虚拟主机
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token comment"># 开启消费者手动确认</span>
        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_7-4-1-1-2-接收消息时候手动确认" tabindex="-1"><a class="header-anchor" href="#_7-4-1-1-2-接收消息时候手动确认" aria-hidden="true">#</a> 7.4.1.1.2. 接收消息时候手动确认</h6><blockquote><ul><li><code>channel.basicAck</code>来确认消息</li><li><code>channel.basicNack</code>来拒绝消息</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgReceive</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 接收正常队列的消息，但是不确认，也不重投
     *
     * <span class="token keyword">@param</span> <span class="token parameter">message</span>
     */</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;监听队列名&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token comment">// 获得消息属性</span>
        <span class="token class-name">MessageProperties</span> messageProperties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 拿到消息唯一id</span>
        <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> messageProperties<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;时间：{}，获得消息：{}&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 无异常，通过信道通知队列，确认收到</span>
            <span class="token comment">// multiple（第二参数）若为true代表之前的消息全都确认，为false只确认当前消息</span>
            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;接收失败，原因：{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// requeue – true if the rejected message(s) should be requeued rather than discarded/dead-lettered</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 消费者手动不确认，不重新投递（不重新入队）</span>
                channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-交换机属性" tabindex="-1"><a class="header-anchor" href="#_8-交换机属性" aria-hidden="true">#</a> 8. 交换机属性</h2><blockquote><p>在创建交换机的时候，可以指定的一些属性</p><p>注意：创建交换机或者队列完成后再重新创建，如果修改交换机或队列参数则会报错！</p></blockquote><ol><li><code>Name</code>：交换机名称；就是一个字符串</li><li><code>Type</code>：交换机类型，direct, topic, fanout, headers四种</li><li><code>Durability</code>：持久化，声明交换机是否持久化，代表交换机在服务器重启后是否还存在；</li><li><code>Auto delete</code> ：是否自动删除，曾经有队列绑定到该交换机，后来解绑了，那就会自动删除该交换机；</li><li><code>Internal</code>：内部使用的，如果是yes，客户端无法直接发消息到此交换机，它只能用于交换机与交换机的绑定。</li><li><code>Arguments</code><ul><li>只有一个取值<code>alternate-exchange</code>，表示备用交换机；</li></ul></li></ol><h3 id="_8-1-设置属性" tabindex="-1"><a class="header-anchor" href="#_8-1-设置属性" aria-hidden="true">#</a> 8.1. 设置属性</h3><p>通过建造者模式创建会更加方便，可以直接通过方法来给交换机加上各种属性。</p><p>具体就不展开举例了，可以参考源码<code>ExchangeBuilder</code>中的各种方法来根据需要设置</p><h3 id="_8-2-备用交换机设置" tabindex="-1"><a class="header-anchor" href="#_8-2-备用交换机设置" aria-hidden="true">#</a> 8.2. 备用交换机设置</h3><h4 id="_8-2-1-概念" tabindex="-1"><a class="header-anchor" href="#_8-2-1-概念" aria-hidden="true">#</a> 8.2.1. 概念</h4><p>当消息经过交换器准备路由给队列的时候，发现没有对应的队列可以投递信息，在RabbitMQ中会<strong>默认丢弃消息</strong>，如果想要监测哪些消息被投递到没有对应的队列，可以用备用交换机来实现，可以接收备用交换机的消息，然后记录日志或发送报警信息。</p><blockquote><p>备用交换机一般定义为<code>扇形交换机</code>（Fanout Exchange），因为消息会到达备用交换机就是因为无法正确投递到队列，备用交换机就需要把这些信息全部输出到指定位置让开发者处理</p></blockquote><h4 id="_8-2-2-代码" tabindex="-1"><a class="header-anchor" href="#_8-2-2-代码" aria-hidden="true">#</a> 8.2.2. 代码</h4><h5 id="_8-2-2-1-定义备用交换机和备用队列-绑定他们的关系" tabindex="-1"><a class="header-anchor" href="#_8-2-2-1-定义备用交换机和备用队列-绑定他们的关系" aria-hidden="true">#</a> 8.2.2.1. 定义备用交换机和备用队列，绑定他们的关系</h5><blockquote><p>备用交换机和备用队列其实也是<strong>普通交换机和队列</strong>，只是会将备用交换机绑定给普通交换机，让它成为备用的而已</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 定义备用交换机
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span>
        <span class="token comment">// 交换机名字</span>
        <span class="token punctuation">.</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span>exchangeAlternateName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 定义备用队列
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queueAlternate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>queueAlternateName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 绑定备用交换机和队列
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">bindingAlternate</span><span class="token punctuation">(</span><span class="token class-name">FanoutExchange</span> fanoutExchange<span class="token punctuation">,</span> <span class="token class-name">Queue</span> queueAlternate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queueAlternate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8-2-2-2-给普通交换机绑定备用交换机" tabindex="-1"><a class="header-anchor" href="#_8-2-2-2-给普通交换机绑定备用交换机" aria-hidden="true">#</a> 8.2.2.2. 给普通交换机绑定备用交换机</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 定义正常交换机
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span>
        <span class="token comment">// 交换机名字</span>
        <span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span>exchangeNormalName<span class="token punctuation">)</span>
        <span class="token comment">// 设置备用交换机</span>
        <span class="token punctuation">.</span><span class="token function">alternate</span><span class="token punctuation">(</span>exchangeAlternateName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8-2-2-3-当投递到队列失败时-消息就会到备用交换机里了" tabindex="-1"><a class="header-anchor" href="#_8-2-2-3-当投递到队列失败时-消息就会到备用交换机里了" aria-hidden="true">#</a> 8.2.2.3. 当投递到队列失败时，消息就会到备用交换机里了</h5><h4 id="_8-2-3-dlx和备用交换机区别" tabindex="-1"><a class="header-anchor" href="#_8-2-3-dlx和备用交换机区别" aria-hidden="true">#</a> 8.2.3. DLX和备用交换机区别</h4><p>RabbitMQ中的DLX（Dead Letter Exchange）和备用交换机（Alternate Exchange）是两种不同的机制。</p><p><code>DLX</code>是一种用于<strong>处理无法被消费者正确处理的消息</strong>的机制。当消息在队列中被拒绝或者超时未被消费者处理时，DLX会将这些消息重新路由到另一个交换机或者队列中。DLX可以帮助应用程序处理那些无法处理的消息，并且可以提高消息处理的可靠性。</p><p><code>备用交换机</code>是一种用于<strong>处理无法被路由到目标队列的消息</strong>的机制。当消息无法被路由到目标队列时，交换机会将这些消息重新路由到另一个备用交换机或者队列中。备用交换机可以帮助应用程序处理那些无法被路由的消息，并且可以提高消息处理的可靠性。</p><p>因此，DLX和备用交换机的作用虽然有一定的重叠，但是它们处理的问题不同，具有不同的应用场景。</p><h2 id="_9-队列属性" tabindex="-1"><a class="header-anchor" href="#_9-队列属性" aria-hidden="true">#</a> 9. 队列属性</h2><blockquote><p>在创建队列的时候，可以指定的一些属性。</p><p>注意：创建交换机或者队列完成后再重新创建，如果修改交换机或队列参数则会报错！</p></blockquote><p>Type：队列类型</p><p>Name：队列名称，就是一个字符串，随便一个字符串就可以；</p><p>Durability：声明队列是否持久化，代表队列在服务器重启后是否还存在；</p><p>Auto delete： 是否自动删除，如果为true，当没有消费者连接到这个队列的时候，队列会自动删除；</p>`,232),d={href:"https://so.csdn.net/so/search?q=%E9%98%9F%E5%88%97&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>Arguments：队列的其他属性，例如指定DLX（死信交换机等）；</p><ol><li><p>1、x-expires：Number</p><ul><li>当Queue（队列）在指定的时间未被访问，则队列将被自动删除；</li></ul></li><li><p>x-message-ttl：Number</p><ul><li>发布的消息在队列中存在多长时间后被取消（单位毫秒）；</li></ul></li><li><p>3、x-overflow：String</p><ul><li>设置队列溢出行为，当达到队列的最大长度时，消息会发生什么，有效值为Drop Head或Reject Publish；</li></ul></li><li><p>4、x-max-length：Number</p><ul><li>队列所能容下消息的最大长度，当超出长度后，新消息将会覆盖最前面的消息，类似于Redis的LRU算法；</li></ul></li><li><p>5、 x-single-active-consumer：默认为false</p><ul><li>激活单一的消费者，也就是该队列只能有一个消息者消费消息；</li></ul></li><li><p>6、x-max-length-bytes：Number</p><ul><li>限定队列的最大占用空间，当超出后也使用类似于Redis的LRU算法；</li></ul></li><li><p>7、x-dead-letter-exchange：String</p><ul><li>指定队列关联的死信交换机，有时候我们希望当队列的消息达到上限后溢出的消息不会被删除掉，而是走到另一个队列中保存起来；</li></ul></li><li><p>8.x-dead-letter-routing-key：String</p><ul><li>指定死信交换机的路由键，一般和6一起定义；</li></ul></li><li><p>9.x-max-priority：Number</p><ul><li><p>如果将一个队列加上优先级参数，那么该队列为优先级队列；</p></li><li><p>（1）、给队列加上优先级参数使其成为优先级队列</p></li><li><p>x-max-priority=10【0-255取值范围】</p></li><li><p>（2）、给消息加上优先级属性</p></li><li><p>通过优先级特性，将一个队列实现插队消费；</p></li><li><p>MessageProperties messageProperties=new MessageProperties();messageProperties.setPriority(8);</p></li><li></li></ul></li><li><p>10、x-queue-mode：String（理解下即可）</p><ul><li>队列类型x-queue-mode=lazy懒队列，在磁盘上尽可能多地保留消息以减少RAM使用，如果未设置，则队列将保留内存缓存以尽可能快地传递消息；</li></ul></li><li><p>11、x-queue-master-locator：String（用的较少，不讲）</p><ul><li><p>在集群模式下设置队列分配到的主节点位置信息；</p></li><li><p>每个queue都有一个master节点，所有对于queue的操作都是事先在master上完成，之后再slave上进行相同的操作；</p></li><li><p>每个不同的queue可以坐落在不同的集群节点上，这些queue如果配置了镜像队列，那么会有1个master和多个slave。</p></li><li><p>基本上所有的操作都落在master上，那么如果这些queues的master都落在个别的服务节点上，而其他的节点又很空闲，这样就无法做到负载均衡，那么势必会影响性能；</p></li><li><p>关于master queue host 的分配有几种策略，可以在queue声明的时候使用x-queue-master-locator参数，或者在policy上设置queue-master-locator，或者直接在rabbitmq的配置文件中定义queue_master_locator，有三种可供选择的策略：</p></li><li><p>（1）min-masters：选择master queue数最少的那个服务节点host；</p></li><li><p>（2）client-local：选择与client相连接的那个服务节点host；</p></li><li><p>（3）random：随机分配；</p></li></ul></li></ol><h2 id="_10-幂等性问题" tabindex="-1"><a class="header-anchor" href="#_10-幂等性问题" aria-hidden="true">#</a> 10. 幂等性问题</h2><h3 id="_10-1-什么是幂等性" tabindex="-1"><a class="header-anchor" href="#_10-1-什么是幂等性" aria-hidden="true">#</a> 10.1. 什么是幂等性</h3><p>消息幂等性就是<code>消息不被重复消费</code></p><p>同一个消息只能处理一次，再收到一次就不能再执行了，否则可能导致重复处理的问题。</p><h3 id="_10-2-可能引起重复操作的情况" tabindex="-1"><a class="header-anchor" href="#_10-2-可能引起重复操作的情况" aria-hidden="true">#</a> 10.2. 可能引起重复操作的情况</h3><p>在HTTP请求中：</p><ul><li>GET、DELETE、PUT多次重复不会有问题</li><li><code>POST</code>的提交操作可能会导致重复添加数据问题</li></ul><p>在SQL中：</p><ul><li>select、delete、get多次重复不会有问题</li><li><code>insert</code>的提交操作可能会导致重复添加数据问题</li></ul><h3 id="_10-3-如何达到消息幂等性" tabindex="-1"><a class="header-anchor" href="#_10-3-如何达到消息幂等性" aria-hidden="true">#</a> 10.3. 如何达到消息幂等性</h3><blockquote><p>通过配合<code>Redis</code>实现不重复消息</p></blockquote><ol><li>在生产者发送消息时，消息带上了<code>唯一ID</code></li><li>消费者接收到消息，通过Redis的<code>setnx</code>命令（Java代码中的<code>setIfAbsent</code>）向Redis中缓存消息 <ul><li>如果缓存成功，说明消息是第一次接收到，可以执行后续业务逻辑</li><li>如果缓存失败，说明消息已经重复接收了，直接跳过即可</li></ul></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//把消息的唯一ID写入redis</span>
<span class="token comment">//如果redis中该key不存在，那么就设置，存在就不设置</span>
<span class="token keyword">boolean</span> flag <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;idempotent:&quot;</span> <span class="token operator">+</span> orders<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">//key不存在返回true</span>
    <span class="token comment">//相当于是第一次消费该消息</span>
    <span class="token comment">//TODO 处理业务</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正常处理业务.....&quot;</span> <span class="token operator">+</span> orders<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function r(v,m){const e=p("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[n("Exclusive：exclusive属性的"),s("a",d,[n("队列"),i(e)]),n("只对首次声明它的连接可见，并且在连接断开时自动删除；基本上不设置它，设置成false")]),k])}const g=t(l,[["render",r],["__file","MyNote_RabbitMQ.html.vue"]]);export{g as default};
