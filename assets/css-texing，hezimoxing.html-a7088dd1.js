import{_ as t,r as o,o as l,c,a as s,b as a,d as e,w as i,e as r}from"./app-55752f72.js";const p={},d=s("h1",{id:"css-目录",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#css-目录","aria-hidden":"true"},"#"),a(" css 目录")],-1),h={id:"_1-css基础、字体、选择器、文本、背景图、显示方式、引入",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#_1-css基础、字体、选择器、文本、背景图、显示方式、引入","aria-hidden":"true"},"#",-1),g={id:"_2-特性-盒子模型",tabindex:"-1"},m=s("a",{class:"header-anchor",href:"#_2-特性-盒子模型","aria-hidden":"true"},"#",-1),b={id:"_3-其他样式、浮动、布局",tabindex:"-1"},_=s("a",{class:"header-anchor",href:"#_3-其他样式、浮动、布局","aria-hidden":"true"},"#",-1),v={id:"_4-书写顺序",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#_4-书写顺序","aria-hidden":"true"},"#",-1),x=r(`<h1 id="css第03天" tabindex="-1"><a class="header-anchor" href="#css第03天" aria-hidden="true">#</a> css第03天</h1><h2 id="一、css三大特性" tabindex="-1"><a class="header-anchor" href="#一、css三大特性" aria-hidden="true">#</a> 一、css三大特性</h2><h3 id="_1、层叠性" tabindex="-1"><a class="header-anchor" href="#_1、层叠性" aria-hidden="true">#</a> 1、层叠性</h3><p>​ 相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题</p><p>​ 层叠性原则:</p><ul><li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571490015544.png" alt="1571490015544"></p><h3 id="_2、继承性" tabindex="-1"><a class="header-anchor" href="#_2、继承性" aria-hidden="true">#</a> 2、继承性</h3><p>​ CSS中的继承: 子标签会继承父标签的某些样式，如文本颜色和字号。恰当地使用继承可以简化代码，降低 CSS 样式的复杂性。</p><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571490049279.png" alt="1571490049279"></p><p>子元素可以继承父元素的样式：</p><p>​ （text-，font-，line-这些元素开头的可以继承，以及color属性）</p><p>继承性口诀：龙生龙，凤生凤，老鼠生的孩子会打洞</p><p>行高的继承性：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">body</span> <span class="token punctuation">{</span>
   <span class="token property">font</span><span class="token punctuation">:</span>12px/1.5 Microsoft YaHei；
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>行高可以跟单位也可以不跟单位</li><li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li><li>此时子元素的行高是：当前子元素的文字大小 * 1.5</li><li>body 行高 1.5 这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li></ul><h3 id="_3、优先级" tabindex="-1"><a class="header-anchor" href="#_3、优先级" aria-hidden="true">#</a> 3、优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生。</p><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据选择器权重执行</li></ul><p>选择器优先级计算表格：</p><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571490129794.png" alt="1571490129794"></p><p>优先级注意点:</p><ol><li><p>权重是有<strong>4组数字组成</strong>,但是<strong>不会有进位</strong>。</p></li><li><p>可以理解为类选择器永远大于元素选择器, id选择器永远大于类选择器,以此类推..</p></li><li><p>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</p></li><li><p>可以简单记忆法: 通配符和继承权重为0, 标签选择器为1,类(伪类)选择器为 10, id选择器 100, 行内样式表为 1000, !important 无穷大.</p></li><li><p><strong>继承的权重是0</strong>， 如果该元素没有直接选中，不管父元素权重多高**（哪怕是 !important）**，子元素得到的权重都是 0。</p></li></ol><p>权重叠加：如果是复合选择器，则会有权重叠加，需要计算权重。</p><ul><li>div ul li ------&gt; 0,0,0,3</li><li>.nav ul li ------&gt; 0,0,1,2</li><li>a:hover -----—&gt; 0,0,1,1</li><li>.nav a ------&gt; 0,0,1,1</li></ul><h2 id="二、盒子模型" tabindex="-1"><a class="header-anchor" href="#二、盒子模型" aria-hidden="true">#</a> 二、盒子模型</h2><h3 id="_1、网页布局的本质" tabindex="-1"><a class="header-anchor" href="#_1、网页布局的本质" aria-hidden="true">#</a> 1、网页布局的本质</h3><p>网页布局的核心本质： 就是利用 CSS 摆盒子。</p><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571492334739.png" alt="1571492334739"></p><p>网页布局过程：</p><ol><li>先准备好相关的网页元素，网页元素基本都是盒子 Box 。</li><li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li><li>往盒子里面装内容</li></ol><h3 id="_2、盒子模型-box-model-组成" tabindex="-1"><a class="header-anchor" href="#_2、盒子模型-box-model-组成" aria-hidden="true">#</a> 2、盒子模型（Box Model）组成</h3><p>​ 盒子模型：把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p><p>​ CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<strong>边框</strong>、<strong>外边距</strong>、<strong>内边距</strong>、和 <strong>实际内容</strong></p><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571492536942.png" alt="1571492536942"></p><h3 id="_3、边框-border" tabindex="-1"><a class="header-anchor" href="#_3、边框-border" aria-hidden="true">#</a> 3、边框（border）</h3><h4 id="_3-1、边框的使用" tabindex="-1"><a class="header-anchor" href="#_3-1、边框的使用" aria-hidden="true">#</a> 3.1、边框的使用</h4><p>1、border可以设置元素的边框。边框有三部分组成：边框宽度(粗细) 边框样式 边框颜色；</p><p>2、语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token property">border</span> <span class="token punctuation">:</span> border-width || border-style || border-color<span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571492659260.png" alt="1571492659260"></p><p>边框样式 border-style 可以设置如下值：</p><ul><li>none：没有边框即忽略所有边框的宽度（默认值）</li><li>solid：边框为单实线(最为常用的)</li><li>dashed：边框为虚线</li><li>dotted：边框为点线</li></ul><h5 id="_3、👓边框的合写分写" tabindex="-1"><a class="header-anchor" href="#_3、👓边框的合写分写" aria-hidden="true">#</a> 3、👓边框的合写分写</h5><p>边框简写：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>边框分开写法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token property">border-top</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>  <span class="token comment">/* 只设定上边框， 其余同理 */</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2、表格的细线边框" tabindex="-1"><a class="header-anchor" href="#_3-2、表格的细线边框" aria-hidden="true">#</a> 3.2、表格的细线边框</h4><p>1、border-collapse 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p><p>2、语法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token property">border-collapse</span><span class="token punctuation">:</span>collapse<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>collapse 单词是合并的意思</p><p>border-collapse: collapse; 表示相邻边框合并在一起</p><h4 id="_3-3、边框会影响盒子实际大小" tabindex="-1"><a class="header-anchor" href="#_3-3、边框会影响盒子实际大小" aria-hidden="true">#</a> 3.3、边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小。因此我们有两种方案解决：</p><ul><li>测量盒子大小的时候,不量边框。</li><li>如果测量的时候包含了边框,则需要 width/height 减去边框宽度</li></ul><h3 id="_4、内边距-padding" tabindex="-1"><a class="header-anchor" href="#_4、内边距-padding" aria-hidden="true">#</a> 4、内边距（padding）</h3><h4 id="_4-1、内边距的使用方式" tabindex="-1"><a class="header-anchor" href="#_4-1、内边距的使用方式" aria-hidden="true">#</a> 4.1、内边距的使用方式</h4><p>1、padding 属性用于设置内边距，即边框与内容之间的距离。</p><p>2、语法：</p><h5 id="👓合写属性" tabindex="-1"><a class="header-anchor" href="#👓合写属性" aria-hidden="true">#</a> 👓合写属性：</h5><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571493298248.png" alt="1571493298248"></p><p>分写属性：</p><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571493260536.png" alt="1571493260536"></p><h4 id="_4-2、内边距会影响盒子实际大小" tabindex="-1"><a class="header-anchor" href="#_4-2、内边距会影响盒子实际大小" aria-hidden="true">#</a> 4.2、内边距会影响盒子实际大小</h4><p>1、当我们给盒子指定 padding 值之后，发生了 2 件事情：</p><ol><li>内容和边框有了距离，添加了内边距。</li><li>padding影响了盒子实际大小。</li></ol><p>2、内边距对盒子大小的影响：</p><ul><li>如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。</li><li>如何盒子本身没有指定width/height属性, 则此时padding不会撑开盒子大小。</li></ul><p>3、解决方案：</p><p>​ 如果保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p><h3 id="_5、外边距-margin" tabindex="-1"><a class="header-anchor" href="#_5、外边距-margin" aria-hidden="true">#</a> 5、外边距（margin）</h3><h4 id="_5-1、外边距的使用方式" tabindex="-1"><a class="header-anchor" href="#_5-1、外边距的使用方式" aria-hidden="true">#</a> 5.1、外边距的使用方式</h4><p>margin 属性用于设置外边距，即控制盒子和盒子之间的距离。</p><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571493741272.png" alt="1571493741272"></p><h4 id="_5-2、外边距典型应用" tabindex="-1"><a class="header-anchor" href="#_5-2、外边距典型应用" aria-hidden="true">#</a> 5.2、外边距典型应用</h4><p>外边距可以<strong>让块级盒子水平居中</strong>的两个条件：</p><ul><li>盒子必须指定了宽度（width）。</li><li>盒子左右的外边距都设置为 auto 。</li></ul><p>常见的写法，以下三种都可以：</p><h5 id="👓合写方法同padding" tabindex="-1"><a class="header-anchor" href="#👓合写方法同padding" aria-hidden="true">#</a> 👓合写方法同padding</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>   <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可。</p><h4 id="_5-3、外边距合并" tabindex="-1"><a class="header-anchor" href="#_5-3、外边距合并" aria-hidden="true">#</a> 5.3、外边距合并</h4><p>使用 margin 定义块元素的垂直外边距时，可能会出现外边距的合并。</p><p>主要有两种情况:</p><p>1、相邻块元素垂直外边距的<strong>合并</strong></p><p>​ 当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571494239103.png" alt="1571494239103"></p><p>解决方案： 尽量只给一个盒子添加 margin 值。</p><p>2、嵌套块元素垂直外边距的<strong>塌陷</strong></p><p>​ 对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571494373778.png" alt="1571494373778"></p><p>解决方案：</p><ul><li>可以为父元素定义上边框。</li><li>可以为父元素定义上内边距。</li><li>可以为父元素添加 overflow:hidden。</li></ul><h4 id="_5-4、清除内外边距" tabindex="-1"><a class="header-anchor" href="#_5-4、清除内外边距" aria-hidden="true">#</a> 5.4、清除内外边距</h4><p>​ 网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code> <span class="token selector">*</span> <span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>   <span class="token comment">/* 清除内边距 */</span>
    <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token comment">/* 清除外边距 */</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</p><h2 id="三、ps-基本操作" tabindex="-1"><a class="header-anchor" href="#三、ps-基本操作" aria-hidden="true">#</a> 三、PS 基本操作</h2><p>​ 因为网页美工大部分效果图都是利用 PS（Photoshop）来做的，所以以后我们大部分切图工作都是在 PS 里面完成。</p><p>​ 部分操作：</p><ul><li>文件→打开 ：可以打开我们要测量的图片</li><li>Ctrl+R：可以打开标尺，或者 视图→标尺</li><li>右击标尺，把里面的单位改为像素</li><li>Ctrl+ 加号(+)可以放大视图， Ctrl+ 减号(-)可以缩小视图</li><li>按住空格键，鼠标可以变成小手，拖动 PS 视图</li><li>用选区拖动 可以测量大小</li><li>Ctrl+ D 可以取消选区，或者在旁边空白处点击一下也可以取消选区</li></ul><p><img src="https://note-img54.oss-cn-hongkong.aliyuncs.com/note/h5c3-我的笔记/css-特性，盒子模型.assets/1571494543539.png" alt="1571494543539"></p>`,104);function E(f,A){const n=o("RouterLink");return l(),c("div",null,[s("blockquote",null,[d,s("blockquote",null,[s("h2",h,[u,a(" 1. "),e(n,{to:"/blogs/%E5%89%8D%E7%AB%AF/H5C3/h5c3-%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/css-pink.html"},{default:i(()=>[a("css基础、字体、选择器、文本、背景图、显示方式、引入")]),_:1})]),s("h2",g,[m,a(" 2. "),e(n,{to:"/blogs/%E5%89%8D%E7%AB%AF/H5C3/h5c3-%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/css-%E7%89%B9%E6%80%A7%EF%BC%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.html"},{default:i(()=>[a("特性，盒子模型")]),_:1})]),s("h2",b,[_,a(" 3."),e(n,{to:"/blogs/%E5%89%8D%E7%AB%AF/H5C3/h5c3-%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/css03-%E5%85%B6%E4%BB%96%E6%A0%B7%E5%BC%8F.html"},{default:i(()=>[a("其他样式、浮动、布局")]),_:1})]),s("h2",v,[k,a(" 4."),e(n,{to:"/blogs/%E5%89%8D%E7%AB%AF/H5C3/h5c3-%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/css04-%E5%88%87%E7%89%87%E3%80%81%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F.html"},{default:i(()=>[a("书写顺序")]),_:1})])])]),x])}const B=t(p,[["render",E],["__file","css-texing，hezimoxing.html.vue"]]);export{B as default};
