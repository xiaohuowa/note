import{_ as n,o as s,c as a,e}from"./app-55752f72.js";const t={},p=e(`<h2 id="request爬虫三部曲" tabindex="-1"><a class="header-anchor" href="#request爬虫三部曲" aria-hidden="true">#</a> request爬虫三部曲</h2><ol><li><code>import requests</code></li><li>确定<code>url</code></li><li>确定<code>header</code><ul><li>需不需要模拟UA</li><li>需不需要cookie</li><li>等等。。。</li></ul></li><li>确定是否需要参数 <ul><li>GET是<code>params</code></li><li>POST等是<code>data</code></li></ul></li><li>发请求 <ul><li><code>requests.get/post...(xxx, xxx, xxx)</code>会返回一个响应结果</li></ul></li><li>获取响应结果中的数据 <ol><li>JSON数据获取 <ul><li><code>response.json()</code></li></ul></li><li>文本获取 <ul><li><code>response.text</code></li></ul></li><li>二进制获取 <ul><li><code>response.content</code></li></ul></li></ol></li></ol><h2 id="正则解析" tabindex="-1"><a class="header-anchor" href="#正则解析" aria-hidden="true">#</a> 正则解析</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>thumb<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/article/121721100<span class="token punctuation">&quot;</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//pic.qiushibaike.com/system/pictures/12172/121721100/medium/DNXDX9TZ8SDU6OK2.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>指引我有前进的方向<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上想要匹配出图片src，可以用以下正则</p><p>第一个参数是正则，第二个参数是供正则去匹配的字符串（也就是这里的页面源码）</p><p>第三个参数<code>re.S</code>对应的是<code>re.M</code></p><ul><li><code>re.S</code>代表单行匹配</li><li><code>re.M</code>代表多行匹配</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token comment">#使用通用爬虫对url对应的一整张页面进行爬取</span>
page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text

<span class="token comment">#使用聚焦爬虫将页面中所有的糗图进行解析/提取</span>
ex <span class="token operator">=</span> <span class="token string">&#39;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#39;</span>
img_src_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span>page_text<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bs4解析" tabindex="-1"><a class="header-anchor" href="#bs4解析" aria-hidden="true">#</a> bs4解析</h2><h3 id="数据解析过程" tabindex="-1"><a class="header-anchor" href="#数据解析过程" aria-hidden="true">#</a> 数据解析过程</h3><ol><li>标签定位</li><li>提取标签、标签属性中的数据值</li></ol><h3 id="解析原理" tabindex="-1"><a class="header-anchor" href="#解析原理" aria-hidden="true">#</a> 解析原理</h3><ol><li>实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</li><li>通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</li></ol><h3 id="环境安装" tabindex="-1"><a class="header-anchor" href="#环境安装" aria-hidden="true">#</a> 环境安装</h3><ol><li><code>pip install bs4</code></li><li><code>pip install lxml</code>（xpath也要用到这个）</li></ol><h3 id="如何实例化beautifulsoup对象" tabindex="-1"><a class="header-anchor" href="#如何实例化beautifulsoup对象" aria-hidden="true">#</a> 如何实例化BeautifulSoup对象:</h3><ol><li><p><code>from bs4 import BeautifulSoup</code></p></li><li><p>对象的实例化（实例化的时候就传入页面源码数据）:</p><ul><li><p>将<code>本地</code>的html文档中的数据加载到该对象中</p><ul><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span> <span class="token string">&#39;./test.html&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&#39; lxml&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>将<code>互联网</code>上获取的页面源码加载到该对象中</p><ul><li><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text
soup <span class="token operator">=</span> BeatifulSoup<span class="token punctuation">(</span>page text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ol><h3 id="定位数据标签的方法和属性" tabindex="-1"><a class="header-anchor" href="#定位数据标签的方法和属性" aria-hidden="true">#</a> 定位数据标签的方法和属性</h3><h4 id="soup-tagname" tabindex="-1"><a class="header-anchor" href="#soup-tagname" aria-hidden="true">#</a> soup.tagName</h4><p>返回的是文档中第一次出现的tagName对应的标签</p><h4 id="soup-find" tabindex="-1"><a class="header-anchor" href="#soup-find" aria-hidden="true">#</a> soup.find():</h4><ol><li><ul><li><code>find(&#39;tagName&#39;)</code>:等同于soup.div</li></ul></li><li><ul><li>属性定位（注意：定位类名的时候要用<code>class_</code>）： <ul><li><code>soup.find(&#39;div&#39; ,class_/id/attr=&#39; song &#39;)</code></li></ul></li></ul></li><li>\`\`soup.find_all(&#39;tagName &#39;)\`：返回符合要求的所有标签（列表)</li></ol><h4 id="soup-select-某种选择器-id-class-标签-选择器" tabindex="-1"><a class="header-anchor" href="#soup-select-某种选择器-id-class-标签-选择器" aria-hidden="true">#</a> soup.select(&#39;某种选择器（id,class，标签...选择器)&#39;)</h4><blockquote><p>返回的是一个<code>列表</code></p></blockquote><p>层级选择器:</p><ul><li><code>soup.select(&#39;.tang &gt; ul &gt; li &gt;a&#39;)</code>∶<code>&gt;</code>表示的是一个层级</li><li><code>soup.select(&#39;.tang &gt; ul a&#39;)</code>：空格表示的多个层级</li></ul><h3 id="获取标签之间的文本内容" tabindex="-1"><a class="header-anchor" href="#获取标签之间的文本内容" aria-hidden="true">#</a> 获取标签之间的文本内容</h3><p>通过<code>两个属性一个方法</code>实现获取</p><ul><li><code>soup.targetName.text/get_text</code><ul><li>可以获取某一个标签中<code>所有的</code>文本内容</li></ul></li><li><code>soup.targetName.string</code><ul><li>只可以获取该标签下面<strong>直系的</strong>文本内容</li></ul></li></ul><h3 id="获取标签的属性值" tabindex="-1"><a class="header-anchor" href="#获取标签的属性值" aria-hidden="true">#</a> 获取标签的属性值</h3><p><code>soup.a[&#39;href&#39;]</code></p><h2 id="xpath" tabindex="-1"><a class="header-anchor" href="#xpath" aria-hidden="true">#</a> xpath</h2><p>xpath解析：最常用且最便捷高效的一种解析方式，具有通用性。</p><ul><li>xpath解析原理： <ol><li>实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。</li><li>调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</li></ol></li><li>环境的安装： <ul><li><code>pip install lxml</code></li></ul></li><li>如何实例化一个etree对象：<code>from lxml import etree</code><ol><li>将本地的html文档中的源码数据加载到etree对象中： etree.parse(filePath)</li><li>可以将从互联网上获取的源码数据加载到该对象中 etree.HTML(&#39;page_text&#39;)</li><li>xpath(&#39;xpath表达式&#39;)</li></ol></li></ul><h3 id="xpath表达式" tabindex="-1"><a class="header-anchor" href="#xpath表达式" aria-hidden="true">#</a> xpath表达式:</h3><ol><li><code>/</code>:表示的是从根节点开始定位。表示的是一个层级。</li><li><code>//</code>:表示的是多个层级。可以表示从任意位置开始定位。</li><li><code>属性定位</code>：//div[@class=&#39;song&#39;] tag[@attrName=&quot;attrValue&quot;]</li><li><code>索引定位</code>：//div[@class=&quot;song&quot;]/p[3] 索引是从1开始的。</li><li>取<code>文本</code>： <ul><li>/text() 获取的是标签中直系的文本内容</li><li>//text() 标签中非直系的文本内容（所有的文本内容）</li></ul></li><li>取<code>属性</code>： /@attrName ==&gt;img/src</li></ol><p><img src="https://s2.loli.net/2023/10/17/Wd7tcN9PSaLb3eM.png" alt="xpath基本语法"></p><h3 id="局部解析案例" tabindex="-1"><a class="header-anchor" href="#局部解析案例" aria-hidden="true">#</a> 局部解析案例</h3><blockquote><p>局部解析的时候，xpath中可以用<code>./</code>开头，代表从当前位置开始</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#需求：爬取58二手房中的房源信息</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36&#39;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">#爬取到页面源码数据</span>
    url <span class="token operator">=</span> <span class="token string">&#39;https://bj.58.com/ershoufang/&#39;</span>
    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text

    <span class="token comment">#数据解析（整个页面）</span>
    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>
    <span class="token comment">#存储的就是li标签对象</span>
    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//ul[@class=&quot;house-list-wrap&quot;]/li&#39;</span><span class="token punctuation">)</span>
    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;58.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>
        <span class="token comment">#局部解析（每一条房屋数据分开局部解析）</span>
        title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;./div[2]/h2/a/text()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title<span class="token operator">+</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解决中文乱码问题" tabindex="-1"><a class="header-anchor" href="#解决中文乱码问题" aria-hidden="true">#</a> 解决中文乱码问题</h2><h3 id="一、直接给响应数据设置编码格式" tabindex="-1"><a class="header-anchor" href="#一、直接给响应数据设置编码格式" aria-hidden="true">#</a> 一、直接给响应数据设置编码格式</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
<span class="token comment">#手动设定响应数据的编码格式</span>
<span class="token comment"># response.encoding = &#39;utf-8&#39;</span>
page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、直接设置不行可以针对乱码位置进行单独处理" tabindex="-1"><a class="header-anchor" href="#二、直接设置不行可以针对乱码位置进行单独处理" aria-hidden="true">#</a> 二、直接设置不行可以针对乱码位置进行单独处理</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img_src <span class="token operator">=</span> <span class="token string">&#39;http://pic.netbian.com&#39;</span><span class="token operator">+</span>li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;./a/img/@src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
img_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;./a/img/@alt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&#39;.jpg&#39;</span>
<span class="token comment">#通用处理中文乱码的解决方案</span>
img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;iso-8859-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理cookie" tabindex="-1"><a class="header-anchor" href="#处理cookie" aria-hidden="true">#</a> 处理Cookie</h2><h3 id="手动-不推荐" tabindex="-1"><a class="header-anchor" href="#手动-不推荐" aria-hidden="true">#</a> 手动（不推荐）</h3><p>手动给请求头加上cookie，不灵活</p><h3 id="自动-推荐" tabindex="-1"><a class="header-anchor" href="#自动-推荐" aria-hidden="true">#</a> 自动（推荐）</h3><blockquote><p>http/https协议特性：无状态。所以需要通过cookie等方式记录登录状态</p></blockquote><h4 id="cookie值的来源是哪里" tabindex="-1"><a class="header-anchor" href="#cookie值的来源是哪里" aria-hidden="true">#</a> cookie值的来源是哪里？</h4><ul><li>模拟登录post请求后，由服务器端创建。</li></ul><h4 id="session会话对象" tabindex="-1"><a class="header-anchor" href="#session会话对象" aria-hidden="true">#</a> session会话对象：</h4><h5 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用：</h5><ol><li>可以进行请求的发送。</li><li>如果请求过程中产生了cookie，则该cookie会被<code>自动存储/携带</code>在该session对象中。</li></ol><h5 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤：</h5><ol><li>创建一个session对象：<code>session = requests.Session()</code></li><li>使用session对象进行模拟登录post请求的发送（cookie就会被自动存储在session中） <ul><li>发送方法就是将<code>requests.get(xxx,xxx)</code>改为<code>session.get(xxx,xxx)</code></li></ul></li><li>session对象对个人主页对应的get请求进行发送（自动携带了cookie）</li></ol><h2 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h2><blockquote><p>代理：破解<code>封IP</code>这种反爬机制。</p></blockquote><h3 id="什么是代理" tabindex="-1"><a class="header-anchor" href="#什么是代理" aria-hidden="true">#</a> 什么是代理：</h3><pre><code>- 代理服务器。
</code></pre><h3 id="代理的作用" tabindex="-1"><a class="header-anchor" href="#代理的作用" aria-hidden="true">#</a> 代理的作用：</h3><ol><li>突破自身IP访问的限制。</li><li>隐藏自身真实IP</li></ol><h3 id="代理相关的网站" tabindex="-1"><a class="header-anchor" href="#代理相关的网站" aria-hidden="true">#</a> 代理相关的网站：</h3><ul><li>快代理</li><li>西祠代理</li><li>www.goubanjia.com</li></ul><h3 id="代理ip的类型" tabindex="-1"><a class="header-anchor" href="#代理ip的类型" aria-hidden="true">#</a> 代理ip的类型：</h3><ul><li><code>http</code>：应用到http协议对应的url中</li><li><code>https</code>：应用到https协议对应的url中</li></ul><h3 id="代理ip的匿名度" tabindex="-1"><a class="header-anchor" href="#代理ip的匿名度" aria-hidden="true">#</a> 代理ip的匿名度：</h3><ul><li><code>透明</code>：服务器知道该次请求使用了代理，也知道请求对应的真实ip</li><li><code>匿名</code>：知道使用了代理，不知道真实ip</li><li><code>高匿</code>：不知道使用了代理，更不知道真实的ip</li></ul><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h2><h3 id="多线程-多进程-不建议" tabindex="-1"><a class="header-anchor" href="#多线程-多进程-不建议" aria-hidden="true">#</a> 多线程，多进程（不建议）：</h3><ul><li>好处：可以为相关阻塞的操作单独开启线程或者进程，阻塞操作就可以异步执行。</li><li>弊端：无法无限制的开启多线程或者多进程。</li></ul><h3 id="线程池、进程池-适当的使用" tabindex="-1"><a class="header-anchor" href="#线程池、进程池-适当的使用" aria-hidden="true">#</a> 线程池、进程池（适当的使用）：</h3><p>好处：我们可以降低系统对进程或者线程创建和销毁的一个频率，从而很好的降低系统的开销。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool

<span class="token comment"># 使用线程池对视频数据进行请求（较为耗时的阻塞操作）</span>
pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token comment"># 通过线程池获取到视频的数据</span>
pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>download_video_data方法<span class="token punctuation">,</span> detail_detail_list列表<span class="token punctuation">)</span>

<span class="token comment"># 关闭线程</span>
pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 让主线程等待子线程完成后再结束</span>
pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过线程池爬取梨视频" tabindex="-1"><a class="header-anchor" href="#通过线程池爬取梨视频" aria-hidden="true">#</a> 通过线程池爬取梨视频</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> os
<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree
<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool


<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&#39;./videos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">&#39;./videos&#39;</span><span class="token punctuation">)</span>
url <span class="token operator">=</span> <span class="token string">&#39;https://www.pearvideo.com/category_59&#39;</span>
<span class="token comment"># url = &#39;https://www.pearvideo.com/panorama&#39;</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&#39;</span>
<span class="token punctuation">}</span>
page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text
page_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>
<span class="token comment"># 拿到热门视频的4个li</span>
lis_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;/html/body/div[2]/div[1]/div/ul/li&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 用来存储视频的标题和url</span>
detail_detail_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> li <span class="token keyword">in</span> lis_list<span class="token punctuation">:</span>
    video_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;.//div[@class=&quot;vervideo-title&quot;]/text()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    detail_url <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;.//div[@class=&quot;vervideo-bd&quot;]/a/@href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment"># https://www.pearvideo.com/videoStatus.jsp?contId=1778254&amp;mrd=0.6860732280069499</span>
    video_id <span class="token operator">=</span> detail_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    url <span class="token operator">=</span> <span class="token string">&#39;https://www.pearvideo.com/videoStatus.jsp&#39;</span>
    params <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;contId&#39;</span><span class="token punctuation">:</span> video_id<span class="token punctuation">,</span>
        <span class="token string">&#39;mrd&#39;</span><span class="token punctuation">:</span> <span class="token number">0.6860732280069499</span>
    <span class="token punctuation">}</span>
    ajax_headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36&#39;</span><span class="token punctuation">,</span>
         <span class="token string">&quot;Referer&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://pearvideos.com/video_&quot;</span> <span class="token operator">+</span> video_id
    <span class="token punctuation">}</span>

    ajax_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>ajax_headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 拿到视频的链接</span>
    video_url <span class="token operator">=</span> ajax_data<span class="token punctuation">[</span><span class="token string">&#39;videoInfo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;videos&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;srcUrl&#39;</span><span class="token punctuation">]</span>
    <span class="token comment"># 但解析出来的视频地址是一个加密后的伪地址，需要将中间的一串13位数字改成cont-cont_id，方可得到真地址</span>
    <span class="token comment"># 伪地址：https://video.pearvideo.com/mp4/third/20230212/1676548173884-11852754-153642-hd.mp4</span>
    <span class="token comment"># 真地址：https://video.pearvideo.com/mp4/third/20230212/cont-1778254-11852754-153642-hd.mp4</span>

    first <span class="token operator">=</span> video_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> video_url<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    dummy_uri <span class="token operator">=</span> video_url<span class="token punctuation">[</span>video_url<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    true_url <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token string">&#39;cont-&#39;</span> <span class="token operator">+</span> video_id <span class="token operator">+</span> dummy_uri<span class="token punctuation">[</span>dummy_uri<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>


    dic <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;video_name&#39;</span><span class="token punctuation">:</span> video_name <span class="token operator">+</span> <span class="token string">&#39;.mp4&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;video_url&#39;</span><span class="token punctuation">:</span> true_url
    <span class="token punctuation">}</span>
    detail_detail_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">download_video_data</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>
    video_name <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token string">&#39;video_name&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>video_name <span class="token operator">+</span> <span class="token string">&#39;开始保存...&#39;</span><span class="token punctuation">)</span>
    video_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>dic<span class="token punctuation">[</span><span class="token string">&#39;video_url&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;videos/&#39;</span> <span class="token operator">+</span> video_name<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video_data<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>video_name <span class="token operator">+</span> <span class="token string">&#39;保存完成！&#39;</span><span class="token punctuation">)</span>


<span class="token comment"># 使用线程池对视频数据进行请求（较为耗时的阻塞操作）</span>
pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token comment"># 通过线程池获取到视频的数据</span>
pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>download_video_data<span class="token punctuation">,</span> detail_detail_list<span class="token punctuation">)</span>

pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),o=[p];function i(l,c){return s(),a("div",null,o)}const r=n(t,[["render",i],["__file","MyNote_scrapy.html.vue"]]);export{r as default};
