import{_ as o,r as i,o as d,c as l,d as a,w as s,b as e,e as t}from"./app-55752f72.js";const p={},c=t(`<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h1><h1 id="登录" tabindex="-1"><a class="header-anchor" href="#登录" aria-hidden="true">#</a> 登录</h1><blockquote><p>mysq1 -u用户名 -p密码 -h要连接的mysq1服务器的ip地址（默认127.0.0.1） -P端口号（默认3306）</p></blockquote><h1 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl" aria-hidden="true">#</a> DDL</h1><p><img src="https://s2.loli.net/2023/10/18/cgrBaTKVbEHYkUG.png" alt="image-20220413155632417"></p><p>​ 使用if not exists 来创建，若库存在也不会报错。</p><p><img src="https://s2.loli.net/2023/10/18/vwqLDXeASY81HTQ.png" alt="image-20220413155334184"></p><p>使用 if exists 来删除库，若库不存在也不会报错。</p><p><img src="https://s2.loli.net/2023/10/18/SNenRJPuYwkZO9a.png" alt="image-20220413155451214"></p><p><img src="https://s2.loli.net/2023/10/18/VFi4k15yopBmlsT.png" alt="image-20220413155839724"></p><h2 id="查询表" tabindex="-1"><a class="header-anchor" href="#查询表" aria-hidden="true">#</a> 查询表</h2><p><img src="https://s2.loli.net/2023/10/18/Nyp7EG5nkYS8xMm.png" alt="image-20220413155920795"></p><h2 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h2><p><img src="https://s2.loli.net/2023/10/18/r8PuxlWifS6GLC5.png" alt="image-20220413160025827"></p><h3 id="基于现有表复制新表" tabindex="-1"><a class="header-anchor" href="#基于现有表复制新表" aria-hidden="true">#</a> 基于现有表复制新表</h3><blockquote><ol><li>使用 AS subquery 选项，<strong>将创建表和插入数据结合起来</strong></li><li>指定的列和子查询中的列要一一对应（可以不指定列，就直接使用查询语句返回出来的表的列名）</li><li>默认会将查询语句查询到的<strong>数据和结构全部复制</strong>到新表，如果只想要结构的话，可以通过查询语句的过滤条件来控制，比如<code>WHERE 1 = 2</code>就会过滤掉数据</li></ol></blockquote><p><img src="https://s2.loli.net/2023/10/18/MiSuvyxQ69h8EZT.png" alt="image-20230128151315125"></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 新表表名
<span class="token keyword">AS</span>
<span class="token comment"># 下面这部分就相当于是正常的查询语句</span>
<span class="token keyword">SELECT</span> 旧表各个列
<span class="token keyword">FROM</span> 旧表
<span class="token keyword">WHERE</span> 过滤条件<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sql中数据类型" tabindex="-1"><a class="header-anchor" href="#sql中数据类型" aria-hidden="true">#</a> sql中数据类型</h2><p><img src="https://s2.loli.net/2023/10/18/x3w9iJpf4MdujEC.png" alt="image-20220413160559155"></p><h2 id="删除与清空表" tabindex="-1"><a class="header-anchor" href="#删除与清空表" aria-hidden="true">#</a> 删除与清空表</h2><p><img src="https://s2.loli.net/2023/10/18/LzJ4brEapI51OAY.png" alt="image-20220413160851229"></p><h3 id="清空表" tabindex="-1"><a class="header-anchor" href="#清空表" aria-hidden="true">#</a> 清空表</h3><blockquote><p><code>TRUNCATE</code> 清空操作是<strong>不可以回滚</strong>的</p><p><code>DELETE FROM</code>也可以清空表，是可以回滚的</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="修改表" tabindex="-1"><a class="header-anchor" href="#修改表" aria-hidden="true">#</a> 修改表</h2><p><img src="https://s2.loli.net/2023/10/18/24i9YuUd6ownEBv.png" alt="image-20220413160906791"></p><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h3><h4 id="modify" tabindex="-1"><a class="header-anchor" href="#modify" aria-hidden="true">#</a> modify</h4><p>修改字段（长度、数据类型、默认值）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名
<span class="token keyword">modify</span> 列名 数据类型 默认值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以将列移动位置</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名
<span class="token keyword">modify</span> 列名 数据类型 默认值 <span class="token punctuation">[</span><span class="token keyword">AFTER</span> 某个其他列 <span class="token operator">|</span> <span class="token keyword">FIRST</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="change" tabindex="-1"><a class="header-anchor" href="#change" aria-hidden="true">#</a> change</h4><p>包含了<code>modify</code>的功能，同时还能改变列名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名
CHANGE 列名 新列名 数据类型 默认值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="改表名" tabindex="-1"><a class="header-anchor" href="#改表名" aria-hidden="true">#</a> 改表名</h4><h5 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一" aria-hidden="true">#</a> 方式一</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> 表名
<span class="token keyword">TO</span> 新表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二" aria-hidden="true">#</a> 方式二</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名
<span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="dml" tabindex="-1"><a class="header-anchor" href="#dml" aria-hidden="true">#</a> DML</h1><h2 id="添加数据" tabindex="-1"><a class="header-anchor" href="#添加数据" aria-hidden="true">#</a> 添加数据</h2><h3 id="单条或多条添加" tabindex="-1"><a class="header-anchor" href="#单条或多条添加" aria-hidden="true">#</a> 单条或多条添加</h3><p><img src="https://s2.loli.net/2023/10/18/H7XVue2kABNTglW.png" alt="image-20220413161349192"></p><blockquote><p>==注意：==一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句，但是<strong>多行的INSERT语句</strong>在处理过程中 <strong>效率更高</strong> 。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句快。</p><p><strong>所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。</strong></p></blockquote><h3 id="添加查询的返回结果集" tabindex="-1"><a class="header-anchor" href="#添加查询的返回结果集" aria-hidden="true">#</a> 添加查询的返回结果集</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> emp1<span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>salary<span class="token punctuation">,</span>hire_date<span class="token punctuation">)</span>
<span class="token comment">#查询语句</span>
<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>hire_date  <span class="token comment"># 查询的字段一定要与添加到的表的字段一一对应</span>
<span class="token keyword">FROM</span> employees
<span class="token keyword">WHERE</span> department_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ol><li><code>emp1表</code>中要添加数据的字段的长度<strong>不能低于</strong>employees表中查询的字段的长度。</li><li>如果emp1表中要添加数据的字段的长度<strong>低于</strong>employees表中查询的字段的长度的话，就有添加不成功的风险。</li></ol><h2 id="修改数据" tabindex="-1"><a class="header-anchor" href="#修改数据" aria-hidden="true">#</a> 修改数据</h2><p><img src="https://s2.loli.net/2023/10/18/Sps4lABKHe6aJ1F.png" alt="image-20220413161927038"></p><h2 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据" aria-hidden="true">#</a> 删除数据</h2><h3 id="常规写法" tabindex="-1"><a class="header-anchor" href="#常规写法" aria-hidden="true">#</a> 常规写法</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表
<span class="token keyword">WHERE</span> 过滤条件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多表同时删除某一个记录" tabindex="-1"><a class="header-anchor" href="#多表同时删除某一个记录" aria-hidden="true">#</a> 多表同时删除某一个记录</h3><blockquote><p>以下代码的意思是：</p><p>从表一和表二中同时删除id为xxx的记录</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> 表<span class="token number">1</span>别名<span class="token punctuation">,</span> 表<span class="token number">2</span>别名
<span class="token keyword">FROM</span> 表<span class="token number">1</span> 表<span class="token number">1</span>别名 <span class="token keyword">JOIN</span> 表<span class="token number">2</span> 表<span class="token number">2</span>别名
<span class="token keyword">ON</span> 表<span class="token number">1</span>别名<span class="token punctuation">.</span>共同字段 <span class="token operator">=</span> 表<span class="token number">2</span>别名<span class="token punctuation">.</span>共同字段
<span class="token keyword">WHERE</span> 过滤条件（比如id<span class="token operator">=</span>xxx）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上方法也可以改写成两条删除语句</p><h1 id="dql" tabindex="-1"><a class="header-anchor" href="#dql" aria-hidden="true">#</a> DQL</h1><h2 id="查询语法" tabindex="-1"><a class="header-anchor" href="#查询语法" aria-hidden="true">#</a> 查询语法</h2><p><img src="https://s2.loli.net/2023/10/18/B1g8dS7AoVreUuE.png" alt="image-20220413162325155"></p><h3 id="_1-1-distinct-去重" tabindex="-1"><a class="header-anchor" href="#_1-1-distinct-去重" aria-hidden="true">#</a> 1.1 DISTINCT 去重</h3><p><img src="https://s2.loli.net/2023/10/18/ZIBzeCTAsGNfuo8.png" alt="image-20220413162556197"></p><h2 id="基础查询" tabindex="-1"><a class="header-anchor" href="#基础查询" aria-hidden="true">#</a> 基础查询</h2><p><img src="https://s2.loli.net/2023/10/18/lDYBTzGtXqKicW2.png" alt="image-20220413162742336"></p><h2 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询" aria-hidden="true">#</a> 条件查询</h2><p><img src="https://s2.loli.net/2023/10/18/yPgi3dYepOl5HkG.png" alt="image-20220413162848592"></p><p><img src="https://s2.loli.net/2023/10/18/TumXhysCGeLqAjk.png" alt="image-20220413163120631"></p><h3 id="_3-1-排序查询" tabindex="-1"><a class="header-anchor" href="#_3-1-排序查询" aria-hidden="true">#</a> 3.1 排序查询</h3><p><img src="https://s2.loli.net/2023/10/18/KA4khRPczat2wXE.png" alt="image-20220413163322098"></p><p><img src="https://s2.loli.net/2023/10/18/1ae3EJZ4iGY6LSg.png" alt="image-20220413163449778"></p><h3 id="_3-2-聚合函数" tabindex="-1"><a class="header-anchor" href="#_3-2-聚合函数" aria-hidden="true">#</a> 3.2 聚合函数</h3><p><img src="https://s2.loli.net/2023/10/18/3iIWnAYLNJcBMrs.png" alt="image-20220413163623933"></p><h3 id="_3-3-分组查询" tabindex="-1"><a class="header-anchor" href="#_3-3-分组查询" aria-hidden="true">#</a> 3.3 分组查询</h3><h4 id="格式顺序" tabindex="-1"><a class="header-anchor" href="#格式顺序" aria-hidden="true">#</a> 格式顺序</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
<span class="token keyword">from</span>
<span class="token keyword">where</span>
<span class="token keyword">group</span> <span class="token keyword">by</span>
<span class="token keyword">order</span> <span class="token keyword">by</span>
<span class="token keyword">limit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li><code>select</code>中出现的非组函数（聚合函数）的字段<strong>必须声明</strong>在<code>group by</code>中。</li><li><code>group by</code>中声明的的字段<strong>可以不出现</strong>在<code>select</code>中</li></ul></blockquote><p><img src="https://s2.loli.net/2023/10/18/7nVThkm4AdxBj1Z.png" alt="image-20220413164225031"></p><h4 id="having" tabindex="-1"><a class="header-anchor" href="#having" aria-hidden="true">#</a> having</h4><p>注意：</p><ol><li>如果过滤条件中使用了聚合函数，则必须使用<code>HAVING</code>来替换<code>WHERE</code>。否则报错 <ol><li>如果过滤条件中<strong>没有聚合函数</strong>，理论上写在<code>HAVING</code>还是<code>WHERE</code>都行，不过更建议写在<code>WHERE</code></li><li>如果过滤条件中<strong>有聚合函数</strong>，过滤条件一定要在<code>HAVING</code>中</li></ol></li><li>用<code>HAVING</code>前提是用了<code>GROUP BY</code></li><li><code>HAVING</code>必须在<code>GROUP BY</code>后面</li></ol><h4 id="group-by-中使用-with-rollup" tabindex="-1"><a class="header-anchor" href="#group-by-中使用-with-rollup" aria-hidden="true">#</a> GROUP BY 中使用 WITH ROLLUP</h4><p>使用 <code>WITH ROLLUP</code> 关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量</p><blockquote><p>==注意：==当使用ROLLUP时，<strong>不能同时使用ORDER BY</strong>子句进行结果排序，即<code>ROLLUP</code>和<code>ORDER BY</code>是<strong>互相排斥</strong>的。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> employees
<span class="token keyword">WHERE</span> department_id <span class="token operator">&gt;</span> <span class="token number">80</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-分页查询" tabindex="-1"><a class="header-anchor" href="#_3-4-分页查询" aria-hidden="true">#</a> 3.4 分页查询</h3><p><img src="https://s2.loli.net/2023/10/18/BsFvtWbAkQGgoqO.png" alt="image-20220413164906290"></p><p><img src="https://s2.loli.net/2023/10/18/8lmvFOI6oRVMXaw.png" alt="image-20220413165123978"></p><h2 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询</h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><p>多表查询从不同的角度来看，可以分成三类</p><ol><li>等值连接 ---- 非等值连接</li><li>自连接 ---- 非自连接</li><li>内连接 ---- 外连接</li></ol><h3 id="等值-非等值连接" tabindex="-1"><a class="header-anchor" href="#等值-非等值连接" aria-hidden="true">#</a> 等值 -- 非等值连接</h3><h4 id="等值连接" tabindex="-1"><a class="header-anchor" href="#等值连接" aria-hidden="true">#</a> 等值连接</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>age
<span class="token keyword">FROM</span> s <span class="token punctuation">,</span> c
<span class="token keyword">WHERE</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="非等值连接" tabindex="-1"><a class="header-anchor" href="#非等值连接" aria-hidden="true">#</a> 非等值连接</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token keyword">level</span>
<span class="token keyword">FROM</span> s<span class="token punctuation">,</span> c
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>salary <span class="token operator">BETWEEN</span> c<span class="token punctuation">.</span>lowest_sal <span class="token operator">AND</span> c<span class="token punctuation">.</span>highest_sal<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自连接-非自连接" tabindex="-1"><a class="header-anchor" href="#自连接-非自连接" aria-hidden="true">#</a> 自连接 ---- 非自连接</h3><h4 id="自连接" tabindex="-1"><a class="header-anchor" href="#自连接" aria-hidden="true">#</a> 自连接</h4><p>当 table1 和 table2 本质上是<strong>同一张表</strong>，只是用取别名的方式<strong>虚拟成两张表</strong>以代表不同的意义。然后两</p><p>个表再进行内连接，外连接等查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span>worker<span class="token punctuation">.</span>last_name <span class="token punctuation">,</span><span class="token string">&#39; works for &#39;</span><span class="token punctuation">,</span> manager<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> employees worker<span class="token punctuation">,</span> employees manager
<span class="token keyword">WHERE</span> worker<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> manager<span class="token punctuation">.</span>employee_id <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内连接-外连接" tabindex="-1"><a class="header-anchor" href="#内连接-外连接" aria-hidden="true">#</a> 内连接 ---- 外连接</h3><h4 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接" aria-hidden="true">#</a> 内连接</h4><p>合并具有同一列的两个以上的表的行, 结果集中<strong>不包含</strong>一个表与另一个表<strong>不匹配的行</strong></p><h5 id="join-on-关键字" tabindex="-1"><a class="header-anchor" href="#join-on-关键字" aria-hidden="true">#</a> JOIN ... ON ... 关键字</h5><blockquote><ol><li>关键字 <code>JOIN</code>、<code>INNER JOIN</code>、<code>CROSS JOIN</code> 的含义是一样的，都表示内连接</li><li>可以使用 ON 子句指定额外的连接条件。</li><li>这个连接条件是与其它条件分开的。</li><li>ON子句使语句具有更高的易读性。</li></ol></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表
<span class="token keyword">FROM</span> A表 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> B表
<span class="token keyword">ON</span> 关联条件
<span class="token keyword">WHERE</span> 等其他子句<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外连接" tabindex="-1"><a class="header-anchor" href="#外连接" aria-hidden="true">#</a> 外连接</h4><p>两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回左（或右）表中不满足条件的</strong></p><p><strong>行 ，这种连接称为左（或右） 外连接</strong>。没有匹配的行时, 结果表中相应的列为空(NULL)。</p><ul><li>如果是左外连接，则连接条件中左边的表也称为 主表 ，右边的表称为 从表 。</li><li>如果是右外连接，则连接条件中右边的表也称为 主表 ，左边的表称为 从表 。</li></ul><h5 id="左外连接" tabindex="-1"><a class="header-anchor" href="#左外连接" aria-hidden="true">#</a> 左外连接</h5><blockquote><p><code>LEFT OUTER JOIN</code>，其中<code>OUTER</code>可以省略</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#实现查询结果是A</span>
<span class="token keyword">SELECT</span> 字段列表
<span class="token keyword">FROM</span> A表 <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> B表
<span class="token keyword">ON</span> 关联条件
<span class="token keyword">WHERE</span> 等其他子句<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="右外连接" tabindex="-1"><a class="header-anchor" href="#右外连接" aria-hidden="true">#</a> <strong>右外连接</strong></h5><blockquote><p><code>RIGHT OUTER JOIN</code>，其中<code>OUTER</code>可以省略</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">FROM</span> A表 <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> B表
<span class="token keyword">ON</span> 关联条件
<span class="token keyword">WHERE</span> 等其他子句<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="全-满外连接" tabindex="-1"><a class="header-anchor" href="#全-满外连接" aria-hidden="true">#</a> 全/满外连接</h5><blockquote><p><code>FULL OUTER JOIN</code>，其中<code>OUTER</code>可以省略</p><p>==注意：==<em>SQL99</em> 是支持满外连接的。使用<code>FULL JOIN</code> 或<code> FULL OUTER JOIN</code>来实现。<strong>MySQL不支持</strong>FULL JOIN写法，但是可以用<code> LEFT JOIN UNION RIGHT join</code>代替。</p></blockquote><h2 id="union-和-union-all" tabindex="-1"><a class="header-anchor" href="#union-和-union-all" aria-hidden="true">#</a> UNION 和 UNION ALL</h2><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h3><p><strong>合并查询结果</strong> 利用UNION关键字，可以给出多条SELECT语句，并将它们的结果<strong>组合成单个结果集</strong>。合并</p><p>时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION</p><p>ALL关键字分隔。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table1
<span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span>
<span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> table2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="union" tabindex="-1"><a class="header-anchor" href="#union" aria-hidden="true">#</a> UNION</h3><blockquote><p><code>UNION</code> 操作符返回两个查询的结果集的并集，<strong>去除重复记录</strong>。</p><p>因为比<code>UNION ALL</code>多了一步去重，所以开发中<strong>能用<code>UNION ALL</code> 就不用<code>UNION</code></strong></p></blockquote><p><img src="https://s2.loli.net/2023/10/18/dlYp2NV69vLXzxO.png" alt="image-20230120141130531"></p><h3 id="union-all" tabindex="-1"><a class="header-anchor" href="#union-all" aria-hidden="true">#</a> UNION All</h3><blockquote><p><code>UNION ALL</code>操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，<strong>不去重</strong></p><p>==注意：==执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则<strong>尽量使用UNION ALL语句</strong>，以提高数据查询的效率。</p></blockquote><p><img src="https://s2.loli.net/2023/10/18/aywGRIPYogjON7B.png" alt="image-20230120141408419"></p><h2 id="七种-join-的实现" tabindex="-1"><a class="header-anchor" href="#七种-join-的实现" aria-hidden="true">#</a> 七种 join 的实现</h2><p><img src="https://s2.loli.net/2023/10/18/Xqcya3Arb85jpO9.png" alt="image-20230120141744045"></p><h3 id="_1-左上" tabindex="-1"><a class="header-anchor" href="#_1-左上" aria-hidden="true">#</a> 1_左上</h3><p>左外连接即可</p><h3 id="_2-右上" tabindex="-1"><a class="header-anchor" href="#_2-右上" aria-hidden="true">#</a> 2_右上</h3><p>右外连接即可</p><h3 id="_3-左中" tabindex="-1"><a class="header-anchor" href="#_3-左中" aria-hidden="true">#</a> 3_左中</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#实现A - A∩B</span>
<span class="token keyword">select</span> 字段列表
<span class="token keyword">from</span> A表 <span class="token keyword">left</span> <span class="token keyword">join</span> B表
<span class="token keyword">on</span> 关联条件
<span class="token keyword">where</span> 从表关联字段（主表中从表外键为<span class="token boolean">null</span>的情况） <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">and</span> 等其他子句<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-右中" tabindex="-1"><a class="header-anchor" href="#_4-右中" aria-hidden="true">#</a> 4_右中</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#实现B - A∩B</span>
<span class="token keyword">select</span> 字段列表
<span class="token keyword">from</span> A表 <span class="token keyword">right</span> <span class="token keyword">join</span> B表
<span class="token keyword">on</span> 关联条件
<span class="token keyword">where</span> 从表关联字段（主表中从表外键为<span class="token boolean">null</span>的情况） <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">and</span> 等其他子句<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-左下" tabindex="-1"><a class="header-anchor" href="#_5-左下" aria-hidden="true">#</a> 5_左下</h3><p>可以用 左上 拼 右中</p><p>或者 左中 拼 右上</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#实现查询结果是A∪B</span>
<span class="token comment">#用左外的A，union 右外的B</span>
<span class="token keyword">select</span> 字段列表
<span class="token keyword">from</span> A表 <span class="token keyword">left</span> <span class="token keyword">join</span> B表
<span class="token keyword">on</span> 关联条件
<span class="token keyword">where</span> 等其他子句
<span class="token keyword">union</span>
<span class="token keyword">select</span> 字段列表
<span class="token keyword">from</span> A表 <span class="token keyword">right</span> <span class="token keyword">join</span> B表
<span class="token keyword">on</span> 关联条件
<span class="token keyword">where</span> 等其他子句<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-右下" tabindex="-1"><a class="header-anchor" href="#_6-右下" aria-hidden="true">#</a> 6_右下</h3><p>可以用 左中 拼 右中</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#实现A∪B - A∩B 或 (A - A∩B) ∪ （B - A∩B）</span>
<span class="token comment">#使用左外的 (A - A∩B) union 右外的（B - A∩B）</span>
<span class="token keyword">select</span> 字段列表
<span class="token keyword">from</span> A表 <span class="token keyword">left</span> <span class="token keyword">join</span> B表
<span class="token keyword">on</span> 关联条件
<span class="token keyword">where</span> 从表关联字段 <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">and</span> 等其他子句
<span class="token keyword">union</span>
<span class="token keyword">select</span> 字段列表
<span class="token keyword">from</span> A表 <span class="token keyword">right</span> <span class="token keyword">join</span> B表
<span class="token keyword">on</span> 关联条件
<span class="token keyword">where</span> 从表关联字段 <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">and</span> 等其他子句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-中" tabindex="-1"><a class="header-anchor" href="#_7-中" aria-hidden="true">#</a> 7_中</h3><p>内连接即可</p><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_dept<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>deptName<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>address<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_emp<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
<span class="token identifier"><span class="token punctuation">\`</span>deptId<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
empno <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_dept_id<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>deptId<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token comment">#CONSTRAINT \`fk_dept_id\` FOREIGN KEY (\`deptId\`) REFERENCES \`t_dept\` (\`id\`)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>


<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;华山&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;华山&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;丐帮&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;洛阳&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;峨眉&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;峨眉山&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;武当&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;武当山&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;明教&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;光明顶&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_dept<span class="token punctuation">(</span>deptName<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;少林&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;少林寺&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;风清扬&#39;</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;岳不群&#39;</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;令狐冲&#39;</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;洪七公&#39;</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;乔峰&#39;</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;灭绝师太&#39;</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100006</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;周芷若&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100007</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三丰&#39;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">100008</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张无忌&#39;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100009</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_emp<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>age<span class="token punctuation">,</span>deptId<span class="token punctuation">,</span>empno<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;韦小宝&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">100010</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>【题目】
<span class="token comment">#1.所有有门派的人员信息</span>
（ A、B两表共有）
<span class="token comment">#2.列出所有用户，并显示其机构信息</span>
（A的全集）
<span class="token comment">#3.列出所有门派</span>
（B的全集）
<span class="token comment">#4.所有不入门派的人员</span>
（A的独有）
<span class="token comment">#5.所有没人入的门派</span>
（B的独有）
<span class="token comment">#6.列出所有人员和机构的对照关系</span>
<span class="token punctuation">(</span>AB全有<span class="token punctuation">)</span>
<span class="token comment">#MySQL Full Join的实现 因为MySQL不支持FULL JOIN,下面是替代方法</span>
<span class="token comment">#left join + union(可去除重复数据)+ right join</span>
<span class="token comment">#7.列出所有没入派的人员和没人入的门派</span>
（A的独有<span class="token operator">+</span>B的独有）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="答案" tabindex="-1"><a class="header-anchor" href="#答案" aria-hidden="true">#</a> 答案</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1. 查询所有有门派的人员信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_emp e <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> t_dept d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id

<span class="token comment">#2.列出所有用户，并显示其机构信息</span>
<span class="token comment">-- （A的全集）</span>
<span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>deptName
<span class="token keyword">FROM</span> t_emp e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_dept d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id


<span class="token comment">#3.列出所有门派</span>
<span class="token comment">-- （B的全集）</span>
<span class="token keyword">SELECT</span> d<span class="token punctuation">.</span>deptName
<span class="token keyword">FROM</span> t_dept d


<span class="token comment">#4.所有不入门派的人员</span>
<span class="token comment">-- （A的独有）</span>
<span class="token comment">-- 我的写法</span>
<span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>deptName
<span class="token keyword">FROM</span> t_emp e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_dept d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>deptId <span class="token operator">is</span> <span class="token boolean">NULL</span>

<span class="token comment">-- 老师写法</span>
<span class="token keyword">select</span> a<span class="token punctuation">.</span>name<span class="token punctuation">,</span> b<span class="token punctuation">.</span>deptName
<span class="token keyword">from</span> t_emp a <span class="token keyword">left</span> <span class="token keyword">join</span> t_dept b
<span class="token keyword">on</span> a<span class="token punctuation">.</span>deptId <span class="token operator">=</span> b<span class="token punctuation">.</span>id
<span class="token keyword">where</span> b<span class="token punctuation">.</span>id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>


<span class="token comment">#5.所有没人入的门派</span>
<span class="token comment">-- （B的独有）</span>
<span class="token comment">-- 我的写法</span>
<span class="token keyword">SELECT</span> d<span class="token punctuation">.</span>deptName
<span class="token keyword">FROM</span> t_emp e <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_dept d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>deptId <span class="token operator">is</span> <span class="token boolean">NULL</span>

<span class="token comment">-- 老师写法</span>
<span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> t_dept b <span class="token keyword">left</span> <span class="token keyword">join</span> t_emp a
<span class="token keyword">on</span> a<span class="token punctuation">.</span>deptId <span class="token operator">=</span> b<span class="token punctuation">.</span>id
<span class="token keyword">where</span> a<span class="token punctuation">.</span>deptId <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">#6.列出所有人员和机构的对照关系</span>
<span class="token comment">-- (AB全有)</span>
<span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>deptName
<span class="token keyword">FROM</span> t_emp e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_dept d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>deptName
<span class="token keyword">FROM</span> t_emp e <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_dept d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>deptId <span class="token operator">is</span> <span class="token boolean">NULL</span>



<span class="token comment">#MySQL Full Join的实现 因为MySQL不支持FULL JOIN,下面是替代方法</span>
<span class="token comment">#left join + union(可去除重复数据)+ right join</span>
<span class="token comment">#7.列出所有没入派的人员和没人入的门派</span>
<span class="token comment">-- （A的独有+B的独有）</span>
<span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>deptName
<span class="token keyword">FROM</span> t_emp e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_dept d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>deptId <span class="token operator">is</span> <span class="token boolean">NULL</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>deptName
<span class="token keyword">FROM</span> t_emp e <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> t_dept d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span>deptId <span class="token operator">=</span> d<span class="token punctuation">.</span>id
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>deptId <span class="token operator">is</span> <span class="token boolean">NULL</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sql99语法新特性" tabindex="-1"><a class="header-anchor" href="#sql99语法新特性" aria-hidden="true">#</a> SQL99语法新特性</h2><h3 id="_6-1-自然连接" tabindex="-1"><a class="header-anchor" href="#_6-1-自然连接" aria-hidden="true">#</a> <strong>6.1</strong> <strong>自然连接</strong></h3><p>SQL99 在 SQL92 的基础上提供了一些特殊语法，比如<code> NATURAL JOIN</code> 用来表示自然连接。我们可以把</p><p>自然连接理解为 SQL92 中的等值连接。它会帮你自动查询两张连接表中 <strong>所有相同的字段</strong> ，然后进行 <strong>等值连接</strong> 。</p><p>在SQL92标准中：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees e <span class="token keyword">JOIN</span> departments d
<span class="token keyword">ON</span> e<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>department_id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>department_id<span class="token punctuation">\`</span></span>
<span class="token operator">AND</span> e<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>manager_id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>manager_id<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 SQL99 中你可以写成：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees e <span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> departments d<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-using连接" tabindex="-1"><a class="header-anchor" href="#_6-2-using连接" aria-hidden="true">#</a> 6.2 USING连接</h3><p>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的 <strong>同名字段</strong> 进行等值连接。但是只能配合JOIN一起使用。比如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees e <span class="token keyword">JOIN</span> departments d
<span class="token keyword">USING</span> <span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING的括号 () 中填入要指定的同名字段。同时使用 <code>JOIN...USING</code> 可以简化 JOIN ON 的等值连接。它与下面的 SQL 查询结果是相同的：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees e <span class="token punctuation">,</span>departments d
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-多表查询小结" tabindex="-1"><a class="header-anchor" href="#_8-多表查询小结" aria-hidden="true">#</a> 8.多表查询小结</h2><p>表连接的约束条件可以有三种方式：WHERE, ON, USING</p><ol><li><code>WHERE</code>：适用于所有关联查询</li><li><code>ON </code>：只能和JOIN一起使用，只能写关联条件。虽然关联条件可以并到WHERE中和其他条件一起写，但分开写可读性更好。</li><li><code>USING</code>：只能和JOIN一起使用，而且要求<strong>两个</strong>关联字段在关联表中名称一致，而且只能表示关联字段值相等</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">#关联条件</span>
<span class="token comment">#把关联条件写在where后面</span>
<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees<span class="token punctuation">,</span>departments
<span class="token keyword">WHERE</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
<span class="token comment">#把关联条件写在on后面，只能和JOIN一起使用</span>
<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> departments
<span class="token keyword">ON</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> departments
<span class="token keyword">ON</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees <span class="token keyword">JOIN</span> departments
<span class="token keyword">ON</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
<span class="token comment">#把关联字段写在using()中，只能和JOIN一起使用</span>
<span class="token comment">#而且两个表中的关联字段必须名称相同，而且只能表示=</span>
<span class="token comment">#查询员工姓名与基本工资</span>
<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>job_title
<span class="token keyword">FROM</span> employees <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> jobs <span class="token keyword">USING</span><span class="token punctuation">(</span>job_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">#n张表关联，需要n-1个关联条件</span>
<span class="token comment">#查询员工姓名，基本工资，部门名称</span>
<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>job_title<span class="token punctuation">,</span>department_name <span class="token keyword">FROM</span> employees<span class="token punctuation">,</span>departments<span class="token punctuation">,</span>jobs
<span class="token keyword">WHERE</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id
<span class="token operator">AND</span> employees<span class="token punctuation">.</span>job_id <span class="token operator">=</span> jobs<span class="token punctuation">.</span>job_id<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>job_title<span class="token punctuation">,</span>department_name
<span class="token keyword">FROM</span> employees <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> departments <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> jobs
<span class="token keyword">ON</span> employees<span class="token punctuation">.</span>department_id <span class="token operator">=</span> departments<span class="token punctuation">.</span>department_id
<span class="token operator">AND</span> employees<span class="token punctuation">.</span>job_id <span class="token operator">=</span> jobs<span class="token punctuation">.</span>job_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意：</h3><p>要 <strong>控制连接表的数量</strong> 。多表连接就相当于嵌套 for 循环一样，非常消耗资源，会让 SQL 查询性能下</p><p>降得很严重，因此不要连接不必要的表。在许多 DBMS 中，也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时， 保证被关联的字段需要有索引。</p><p>说明：即使双表 join 也要注意表索引、SQL 性能。</p></blockquote><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>见pdf课件</p><blockquote><p>MySQL中聚合函数不能嵌套</p></blockquote><h2 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h2><blockquote><p>可以在select的<code>case when</code>用、可以在from里用、可以在where用、可以在having里用等等</p><p>总结：除了<code>GROUP BY</code>和<code>LIMIT</code>外，其他地方都可以声明子查询</p></blockquote><h3 id="分类-1" tabindex="-1"><a class="header-anchor" href="#分类-1" aria-hidden="true">#</a> 分类</h3><h4 id="角度一-从内查询-子查询-返回的结果的条目数" tabindex="-1"><a class="header-anchor" href="#角度一-从内查询-子查询-返回的结果的条目数" aria-hidden="true">#</a> 角度一：从内查询（子查询）返回的结果的条目数</h4><ol><li>单行子查询 <ul><li>返回结果只有单个</li></ul></li><li>多行子查询 <ul><li>返回结果有多行</li></ul></li></ol><h4 id="角度二-按内查询是否被执行多次" tabindex="-1"><a class="header-anchor" href="#角度二-按内查询是否被执行多次" aria-hidden="true">#</a> 角度二：按内查询是否被执行多次</h4><ol><li>相关子查询 <ul><li>主查询的不同查询条件<strong>可能导致</strong>子查询的改变 <ul><li>比如：查 工资大于<strong>当前员工所在部门</strong>平均工资的员工信息</li></ul></li></ul></li><li>不相关子查询 <ul><li>主查询的不同查询条件<strong>不会导</strong>致子查询的改变 <ul><li>比如：查 工资大于<strong>本公司</strong>平均工资的员工信息</li></ul></li></ul></li></ol><h3 id="单行子查询" tabindex="-1"><a class="header-anchor" href="#单行子查询" aria-hidden="true">#</a> 单行子查询</h3><h4 id="单行比较操作符" tabindex="-1"><a class="header-anchor" href="#单行比较操作符" aria-hidden="true">#</a> 单行比较操作符</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>=
&lt;
&lt; =
&gt;
&gt; =
&lt;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多行子查询" tabindex="-1"><a class="header-anchor" href="#多行子查询" aria-hidden="true">#</a> 多行子查询</h3><h4 id="多行比较操作符" tabindex="-1"><a class="header-anchor" href="#多行比较操作符" aria-hidden="true">#</a> 多行比较操作符</h4><ol><li><code>in</code><ul><li>等于列表中的<strong>任意一个</strong></li></ul></li><li><code>any</code><ul><li>需要和单行比较操作符一起使用，和子查询返回的<strong>某一个</strong>值比较</li></ul></li><li><code>all</code><ul><li>需要和单行比较操作符一起使用，和子查询返回的<strong>所有</strong>值比较</li></ul></li><li><code>some</code><ul><li>实际上<strong>是ANY的别名</strong>，作用相同，一般常使用ANY</li></ul></li></ol><blockquote><p>什么叫 <em>和单行比较操作符一起使用</em> ：</p><p>即可以有<code>&lt; ANY</code>、<code>&gt;= ALL</code>等等的写法</p></blockquote><h4 id="小案例" tabindex="-1"><a class="header-anchor" href="#小案例" aria-hidden="true">#</a> 小案例</h4><p><strong>查询平均工资最低的部门id</strong></p><blockquote><p>因为MySQL中聚合函数不能嵌套，所以不能有<code>MIN(AVG(salary))</code>的写法</p><p>不过可以先<code>AVG(salary)</code>获得一张新表，做为子查询结果放在主查询的<code>FROM</code>位置</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#方式1：</span>
<span class="token keyword">SELECT</span> department_id
<span class="token keyword">FROM</span> employees
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id
<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>avg_sal<span class="token punctuation">)</span>
    <span class="token keyword">FROM</span> <span class="token punctuation">(</span>
        <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal
        <span class="token keyword">FROM</span> employees
        <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id
    <span class="token punctuation">)</span> dept_avg_sal
<span class="token punctuation">)</span>


<span class="token comment">#方式2：</span>
<span class="token keyword">SELECT</span> department_id
<span class="token keyword">FROM</span> employees
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id
<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> avg_sal
    <span class="token keyword">FROM</span> employees
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空值问题" tabindex="-1"><a class="header-anchor" href="#空值问题" aria-hidden="true">#</a> 空值问题</h4><p>下面案例本意是查询除了管理者id以外的其他人，即查询非管理者的姓名，不过因为子查询会查到一个<code>null</code>，导致整个查询语句没有结果</p><p>解决办法是在子查询中过滤空值（如注释位置所示），即可查到结果</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> last_name
<span class="token keyword">FROM</span> employees
<span class="token keyword">WHERE</span> employee_id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> manager_id
    <span class="token keyword">FROM</span> employees
    <span class="token comment"># where manager_id is not null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="相关子查询" tabindex="-1"><a class="header-anchor" href="#相关子查询" aria-hidden="true">#</a> 相关子查询</h3><blockquote><p>相关子查询中同样包含了单行和多行的子查询</p></blockquote><h4 id="什么是相关子查询" tabindex="-1"><a class="header-anchor" href="#什么是相关子查询" aria-hidden="true">#</a> 什么是相关子查询</h4><p>如果<strong>子查询</strong>的执行<strong>依赖于外部查询</strong>，通常情况下都是因为<strong>子查询中的表用到了外部的表</strong>，并进行了条件关联，因此<strong>每执行一次外部查询，子查询都要重新计算一次</strong>，这样的子查询就称之为 <code>关联子查询</code> 。</p><p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h4><p>查找员工工资大于其本部门的平均工资的员工信息</p><h5 id="写法一-在条件中使用相关子查询" tabindex="-1"><a class="header-anchor" href="#写法一-在条件中使用相关子查询" aria-hidden="true">#</a> 写法一：在条件中使用相关子查询</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> department_id
<span class="token keyword">from</span> emplyees <span class="token keyword">outer</span>
<span class="token keyword">where</span> salary <span class="token operator">&gt;</span> <span class="token punctuation">(</span>
				<span class="token keyword">select</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>
    			<span class="token keyword">from</span> employees
    			<span class="token keyword">where</span> department_id <span class="token operator">=</span> <span class="token keyword">outer</span><span class="token punctuation">.</span>department_id
				<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="写法二-在from中使用子查询" tabindex="-1"><a class="header-anchor" href="#写法二-在from中使用子查询" aria-hidden="true">#</a> 写法二：在<code>FROM</code>中使用子查询</h5><blockquote><p><strong>from型的子查询</strong>：子查询是作为from的一部分，子查询要用<code>()</code>引起来，并且==<u><strong>一定要</strong></u>给这个子查询取<code>别名</code>==， 把它当成一张“临时的虚拟的表”来使用。</p><p>写法一效率不如写法二：因为写法二是from已经创建好条件虚拟表，而第一种每次都要去动态的创建虚拟表</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>e1<span class="token punctuation">.</span>department_id
<span class="token keyword">FROM</span> employees e1<span class="token punctuation">,</span><span class="token punctuation">(</span>
    				<span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> dept_avg_sal 
    				<span class="token keyword">FROM</span> employees 
    				<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id
					<span class="token punctuation">)</span> e2	
<span class="token keyword">WHERE</span> e1<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>department_id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> e2<span class="token punctuation">.</span>department_id
<span class="token operator">AND</span> e2<span class="token punctuation">.</span>dept_avg_sal <span class="token operator">&lt;</span> e1<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>salary<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exists-与-not-exists-关键字" tabindex="-1"><a class="header-anchor" href="#exists-与-not-exists-关键字" aria-hidden="true">#</a> <strong>EXISTS</strong> <strong>与</strong> NOT EXISTS 关键字</h3><ol><li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</li><li><strong>如果在子查询中不存在满足条件的行：</strong><ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li><strong>如果在子查询中存在满足条件的行：</strong><ul><li>不在子查询中继续查找</li><li>条件返回 TRUE</li></ul></li><li><code>NOT EXISTS</code>关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</li></ol><h4 id="小案例-1" tabindex="-1"><a class="header-anchor" href="#小案例-1" aria-hidden="true">#</a> 小案例</h4><p>查询公司管理者的employee_id，last_name，job_id，department_id信息</p><h5 id="通过子查询方式" tabindex="-1"><a class="header-anchor" href="#通过子查询方式" aria-hidden="true">#</a> 通过子查询方式：</h5><blockquote><p>需要去重</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>department_id
<span class="token keyword">FROM</span> employees
<span class="token keyword">WHERE</span> employee_id <span class="token operator">IN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> manager_id
    <span class="token keyword">FROM</span> employees
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="通过exist关键字" tabindex="-1"><a class="header-anchor" href="#通过exist关键字" aria-hidden="true">#</a> 通过exist关键字：</h5><blockquote><p>主查询查出每个员工，放进子查询中，通过子查询的<code>manager_id</code>如果和主查询的工号相同，证明主查询的当前员工就是管理员，因为主查询每次迭代的<code>employee_id</code>是不会重复的，也就是说最后的结果是不需要去重的</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> department_id
<span class="token keyword">FROM</span> employees e1
<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span>
              <span class="token keyword">FROM</span> employees e2
              <span class="token keyword">WHERE</span> e2<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> e1<span class="token punctuation">.</span>employee_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自连接和子查询对比" tabindex="-1"><a class="header-anchor" href="#自连接和子查询对比" aria-hidden="true">#</a> 自连接和子查询对比</h3><blockquote><p>==自连接更好==</p></blockquote><p>题目中可以使用子查询，也可以使用自连接。<strong>一般情况建议使用自连接</strong>，因为在许多 DBMS 的处理过程中，对于自连接的处理速度要比子查询快得多。</p><p>可以这样理解：子查询实际上是通过未知表进行查询后的条件判断，而自连接是通过已知的自身数据表进行条件判断，因此在大部分 DBMS 中都对自连接处理进行了优化（自动将子查询转为自连接（如果可以的话））。</p><h1 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h1><ul><li>索引的类型 <ol><li>主键索引 <ul><li>主键自动地为主索引（Primary Key）</li></ul></li><li>唯一索引 <ul><li>不允许重复，UNIQUE</li></ul></li><li>普通索引 <ul><li>既想是索引，有得能重复，INDEX</li></ul></li><li>联合索引</li><li>全文索引 <ul><li>比如可以从一段文本里定位出某个字符，（FULLTEXT）【适用于MyISAM】</li><li>开发中一般不会用mysql自带的全文索引，而是用全文搜索Solr和ElasticSearch（ES）</li></ul></li></ol></li></ul><h2 id="一、实操中怎么增删改查索引" tabindex="-1"><a class="header-anchor" href="#一、实操中怎么增删改查索引" aria-hidden="true">#</a> 一、实操中怎么增删改查索引</h2><h3 id="查询索引" tabindex="-1"><a class="header-anchor" href="#查询索引" aria-hidden="true">#</a> 查询索引</h3><h4 id="第一种方式" tabindex="-1"><a class="header-anchor" href="#第一种方式" aria-hidden="true">#</a> 第一种方式</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>-- 查看table中的索引
show index from book;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查询结果：</p><p><img src="https://s2.loli.net/2023/10/18/elPrt9B35RuDsxG.png" alt="image-20221110201224063"></p><h4 id="第二种方式" tabindex="-1"><a class="header-anchor" href="#第二种方式" aria-hidden="true">#</a> 第二种方式</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show indexs from 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询结果：</p><p><img src="https://s2.loli.net/2023/10/18/xbCtnVMZqKsv3T5.png" alt="image-20221110212630166"></p><h4 id="第三种方式" tabindex="-1"><a class="header-anchor" href="#第三种方式" aria-hidden="true">#</a> 第三种方式</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show keys from t1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询结果：</p><p><img src="https://s2.loli.net/2023/10/18/IJ9SxFjfl2RQ6mC.png" alt="image-20221110212731924"></p><h4 id="第四种方式" tabindex="-1"><a class="header-anchor" href="#第四种方式" aria-hidden="true">#</a> 第四种方式</h4><p>主要用于看数据表结果，显示索引信息没有前几种那么全</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>desc 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="添加索引" tabindex="-1"><a class="header-anchor" href="#添加索引" aria-hidden="true">#</a> 添加索引</h3><h4 id="添加普通索引" tabindex="-1"><a class="header-anchor" href="#添加普通索引" aria-hidden="true">#</a> 添加普通索引</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>-- 添加普通索引，第一种方法
-- 语法为：
--     create index 索引名字 on 表名(字段名);
create index username_index on book(username);

-- 添加普通索引，第二种方法
-- 语法为：
--     alter table 表名 add index 索引名字 (字段名);
alter table book add index bookname_index (bookname);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加主键索引" tabindex="-1"><a class="header-anchor" href="#添加主键索引" aria-hidden="true">#</a> 添加主键索引</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>-- 第一种方式，在建表的时候直接指定
create table t1(
	id int primary key,
	name varchar(32)
);

-- 第二种方式，建完表指定
-- 语法为：
--     alter table 表名 add primary key (字段名);
alter table t1 add primary key (id);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引" aria-hidden="true">#</a> 删除索引</h3><h4 id="删除普通索引" tabindex="-1"><a class="header-anchor" href="#删除普通索引" aria-hidden="true">#</a> 删除普通索引</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>drop index 索引名字 on 表名;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="删除主键索引" tabindex="-1"><a class="header-anchor" href="#删除主键索引" aria-hidden="true">#</a> 删除主键索引</h4><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>alter table 表名 drop primary key;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、索引的适用性" tabindex="-1"><a class="header-anchor" href="#二、索引的适用性" aria-hidden="true">#</a> 二、索引的适用性</h2><h3 id="哪些列上适合使用索引" tabindex="-1"><a class="header-anchor" href="#哪些列上适合使用索引" aria-hidden="true">#</a> 哪些列上适合使用索引</h3><ol><li>频繁查询的字段适合使用索引</li></ol><h3 id="哪些列不适合使用索引" tabindex="-1"><a class="header-anchor" href="#哪些列不适合使用索引" aria-hidden="true">#</a> 哪些列不适合使用索引</h3><ol><li>唯一性太差的字段不适合单独创建索引，即使是频繁作为查询条件的 <ul><li>比如说性别，即使用了索引也只能筛掉大概50%</li></ul></li><li>更新非常频繁的字段不适合创建索引 <ul><li>比如说登录次数的记录，修改的时间等等。。</li></ul></li><li>不会出现在<code>where</code>子句中的字段不该创建索引</li></ol><h2 id="三、🔴innodb-索引" tabindex="-1"><a class="header-anchor" href="#三、🔴innodb-索引" aria-hidden="true">#</a> 三、🔴InnoDB 索引</h2><blockquote><p>索引是是帮助MySQ高效获取数据的<strong>数据结构</strong></p></blockquote><h3 id="一、优缺点" tabindex="-1"><a class="header-anchor" href="#一、优缺点" aria-hidden="true">#</a> 一、优缺点</h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ol><li>类似大学图书馆建书目索引，提高数据检索的效率，<strong>降低 数据库的<code>IO成本</code></strong> ，这也是创建索引最主要的原因。</li><li>通过<strong>创建唯一索引</strong>，可以保证数据库表中每一行 <strong>数据的唯一性</strong> 。</li><li>在实现数据的参考完整性方面，可以 <strong>加速表和表之间的连接</strong> 。换句话说，对于有依赖关系的子表和父表联合查询时，可以提高查询速度。</li><li>在使用分组和排序子句进行数据查询时，可以显著 <strong>减少查询中分组和排序的时间</strong> ，降低了CPU的消耗。</li></ol><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ol><li>创建索引和维护索引要 <strong>耗费时间</strong> ，并且随着数据量的增加，所耗费的时间也会增加。 （</li><li>索引需要 <strong>占磁盘空间</strong>（MySQL8索引和数据都存在<code>.idb</code>文件中） ，除了数据表占数据空间之外，每一个索引还要占一定的物理空间， 存储在磁盘上 ，如果有大量的索引，索引文件就可能比数据文件更快达到最大文件尺寸。</li><li>虽然索引大大提高了查询速度，同时却会 <strong>降低更新表的速度</strong> 。当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</li></ol><blockquote><p>因此，选择使用索引时，需要综合考虑索引的优点和缺点。</p></blockquote><h3 id="二、❗-innodb-的-b-树-聚簇索引" tabindex="-1"><a class="header-anchor" href="#二、❗-innodb-的-b-树-聚簇索引" aria-hidden="true">#</a> 二、❗ InnoDB 的 B+ 树（聚簇索引）</h3><h4 id="目录项记录和用户记录的异同" tabindex="-1"><a class="header-anchor" href="#目录项记录和用户记录的异同" aria-hidden="true">#</a> 目录项记录和用户记录的异同</h4><h5 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点" aria-hidden="true">#</a> 不同点</h5><ol><li>目录项记录 的 <code>record_type</code> 值是1，而 普通用户记录 的<code> record_type</code> 值是0。</li><li>目录项记录只有 主键值和页的编号 两个列，而普通的用户记录的列是用户自己定义的，可能包含 很多列 ，另外还有InnoDB自己添加的隐藏列。</li><li>了解：记录头信息里还有一个叫 <code>min_rec_mask</code> 的属性，只有在存储 目录项记录 的页中的主键值最小的 目录项记录 的 <code>min_rec_mask</code> 值为 1 ，其他别的记录的 <code>min_rec_mask</code> 值都是 0 。</li></ol><h5 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点" aria-hidden="true">#</a> 相同点</h5><p>两者用的是一样的数据页，都会为主键值生成 <code>Page Directory （页目录）</code>，从而在按照主键值进行查找时可以使用 <code>二分法</code> 来加快查询速度。</p><p><img src="https://s2.loli.net/2023/10/18/exoGJ9wBQK8huNc.png" alt="image-20230203000813904"></p><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点：</h4><ol><li>使用记录<strong>主键值</strong>的大小进行记录和页的<strong>排序</strong>，这包括三个方面的含义： <ul><li><strong>页内</strong> 的记录是<strong>按照主键的大小</strong>顺序排成一个 <strong><code>单向链表</code></strong> 。</li><li>各个存放 <strong>用户记录的页</strong> 也是根据页中用户记录的主键大小顺序排成一个<code>双向链表</code>。</li><li>存放 <strong>目录项记录的页</strong> 分为不同的层次，在同一层次中的页也是根据页中目录项记录的<strong>主键大小</strong>顺序排成一个 <code>双向链表</code> 。</li></ul></li><li>B+树的<u><strong><code>叶子节点</code> 存储的是<code>完整的</code>用户记录</strong>。</u></li></ol><p>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</p><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> <strong>优点：</strong></h4><ul><li><strong>数据访问更快</strong> ，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</li><li>聚簇索引对于<strong>主键的</strong> <code>排序查找 和 范围查找</code> 速度<strong>非常快</strong></li><li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多个数据块中提取数据，所以 <strong>节省了大量的io操作</strong> 。</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> <strong>缺点：</strong></h4><ol><li><strong>插入速度严重依赖于插入顺序</strong> ，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个<strong>自增的ID列为主键</strong></li><li><strong>更新主键的代价很高</strong> ，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义<strong>主键为<code>不可更新</code></strong></li><li><strong>二级索引访问需要两次索引查找</strong> ，第一次找到主键值，第二次根据主键值找到行数据</li></ol><h4 id="构建过程" tabindex="-1"><a class="header-anchor" href="#构建过程" aria-hidden="true">#</a> 构建过程</h4><p>一个页的大小是<code>16k</code></p><ol><li><p>当为一个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）时，会先创建一个<code>根结点</code>页面。最开始表中没有数据的时候，<code>根结点</code><strong>既没有用户记录也没有目录项记录</strong></p></li><li><p>插入数据的时候会将用户记录存储到这个<code>根结点</code>中</p><ul><li>在聚簇索引的时候，没有主键的话 InnoDB 会挑选一个非空的唯一索引代替，如果也没有，InnoDB 会隐式定义一个主键来构建聚簇索引。</li></ul></li><li><p>当根结点<code>可用空间用完</code>时，InnoDB 会**<code>复制</code>根结点中所有记录到新页上**，然后对新页进行页分裂操作，得到另一个新页，此时新插入的数据会根据对应索引分配策略分配到其中一个页中，根结点升级为存储目录项记录的页</p></li></ol><blockquote><p>B+树索引的根结点从诞生开始就不好移动了，但凡InnoDB要用到这个索引的时候，都会从固定的地方取出根结点页号，从而访问这个索引</p></blockquote><h3 id="三、innodb-二级索引-非聚簇索引" tabindex="-1"><a class="header-anchor" href="#三、innodb-二级索引-非聚簇索引" aria-hidden="true">#</a> 三、InnoDB 二级索引（非聚簇索引）</h3><p>聚簇索引是在搜索条件是<code>主键值</code>的时候才能发挥作用，如果想用其他列作为搜索条件，可以用其他列为排序规则，再多建二叉树</p><p>（注意：下图不完整！目录项记录页没有加入主键，可能出现目录项记录不唯一的情况）</p><p><img src="https://s2.loli.net/2023/10/18/X1Bh3eqI9fFUNLJ.png" alt="image-20230203000758182"></p><h4 id="二级索引b-树与聚簇索引的不同" tabindex="-1"><a class="header-anchor" href="#二级索引b-树与聚簇索引的不同" aria-hidden="true">#</a> 二级索引B+树与聚簇索引的不同</h4><ol><li><p><strong>使用索引指向的列的大小进行记录和页的排序</strong></p><ul><li><p>页内的记录是按照索引指向的列的大小顺序排成的<code>单向链表</code></p></li><li><p>各个存放用户的记录的页也是根据页中索引指向的列的大小顺序排成<code>双向链表</code></p></li><li><p>存放目录项的同一层的页也是根据页中目录记录的索引指向的列的大小顺序排成<code>双向链表</code></p></li></ul></li><li><p>二级索引B+树叶子结点存储的<strong>不是完整的用户记录</strong>，而只有<code>索引指向的列 + 主键</code>，即存的是<code>数据的位置</code></p></li><li><p>目录项记录的是<code>索引指向的列 + 主键 + 页号</code></p></li></ol><h4 id="回表" tabindex="-1"><a class="header-anchor" href="#回表" aria-hidden="true">#</a> 回表</h4><p>因为二级索引B+数的叶子结点<strong>只能确定要找记录的主键值</strong>，所以如果想通过二级索引找到完整用户记录的话，就得<strong>通过主键值到聚簇索引中再查一遍</strong>，这个过程称为<code>回表</code>。</p><h3 id="四、总结聚簇索引和非聚簇索引的区别" tabindex="-1"><a class="header-anchor" href="#四、总结聚簇索引和非聚簇索引的区别" aria-hidden="true">#</a> 四、总结聚簇索引和非聚簇索引的区别</h3><ol><li>聚簇索引的<code>叶子结点</code>存储的是用户记录；非聚簇索引的叶子结点存的是<code>数据位置</code></li><li>一个表<code>只能有一个聚簇索引</code>，因为<strong>只能用一种排序存储的方式</strong>；可以有多个非聚簇索引。</li><li>使用聚簇索引的时候，数据查询效率高，但是遇到插入、删除、更新操作的时候，效率比非聚簇索引低</li></ol><h3 id="五、联合索引" tabindex="-1"><a class="header-anchor" href="#五、联合索引" aria-hidden="true">#</a> 五、联合索引</h3><p><img src="https://s2.loli.net/2023/10/18/fSeYQgxqVoc9Z31.png" alt="image-20230203001257455"></p><h4 id="联合索引排序规则" tabindex="-1"><a class="header-anchor" href="#联合索引排序规则" aria-hidden="true">#</a> 联合索引排序规则</h4><p>可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照 <code>c2和c3列</code> 的大小进行排序，这个包含两层含义：</p><ol><li>先把各个记录和页按照c2列进行排序。</li><li>在记录的c2列相同的情况下，采用c3列进行排序</li></ol><h4 id="联合索引和分开创建二级索引区别" tabindex="-1"><a class="header-anchor" href="#联合索引和分开创建二级索引区别" aria-hidden="true">#</a> 联合索引和分开创建二级索引区别</h4><p>注意一点，以c2和c3列的大小为排序规则建立的B+树称为 <code>联合索引</code> ，本质上也是一个二级索引。它的意思与分别为c2和c3列分别建立索引的表述是不同的，不同点如下：</p><ul><li>建立 <code>联合索引</code> 只会建立如上图一样的1棵B+树。</li><li>为c2和c3列分别建立索引会分别以c2和c3列的大小为排序规则建立2棵B+树。</li></ul><h4 id="联合索引构成" tabindex="-1"><a class="header-anchor" href="#联合索引构成" aria-hidden="true">#</a> 联合索引构成</h4><ol><li>联合索引每条目录项记录都由<code>c2、c3、页号</code>三部分组成，各条记录先按c2排，c2相同由c3排</li><li>叶子结点处由<code>c2、c3、主键</code>组成</li></ol><h3 id="六、innodb-的-b-树索引的关键点" tabindex="-1"><a class="header-anchor" href="#六、innodb-的-b-树索引的关键点" aria-hidden="true">#</a> 六、InnoDB 的 B+ 树索引的关键点</h3><h4 id="_1-根页面位置万年不动" tabindex="-1"><a class="header-anchor" href="#_1-根页面位置万年不动" aria-hidden="true">#</a> <strong>1.</strong> <strong>根页面位置万年不动</strong></h4><p>[见构建过程](# 构建过程)</p><h4 id="_2-内节点中目录项记录的唯一性" tabindex="-1"><a class="header-anchor" href="#_2-内节点中目录项记录的唯一性" aria-hidden="true">#</a> <strong>2.</strong> <strong>内节点中目录项记录的唯一性</strong></h4><p>二级索引的目录项记录要加上主键，否则可能出现不唯一的情况</p><p>比如：给<code>c2</code>添加了索引，但是c2 可以重复，这就可能导致只记录了<code>c2 + 页号</code>的记录重复（页号不算数）</p><p>此时就应该加上主键，这样可以保证B+树每一层结点各条目录项记录除了页号以外是唯一的</p><h4 id="_3-一个页面最少存储2条记录" tabindex="-1"><a class="header-anchor" href="#_3-一个页面最少存储2条记录" aria-hidden="true">#</a> <strong>3.</strong> <strong>一个页面最少存储2条记录</strong></h4><p>一个B+树只需要很少的层级就可以轻松存储数亿条记录，查询速度相当不错！这是因为B+树本质上就是多层级目录，每经过一个目录时都会过滤掉许多无效的子目录，直到最后访问到存储真实数据的目录。</p><p>如果一个大的目录中只存放一个子目录是个啥效果呢？那就是目录层级非常非常非常多，而且最后的那个存放真实数据的目录中只能存放一条记录，找了那么多层只找到一条，这不合理！</p><p>所以<code>InnoDB的一个数据页至少可以存放两条记录</code></p><h4 id="_4-不建议用过长字段作为主键" tabindex="-1"><a class="header-anchor" href="#_4-不建议用过长字段作为主键" aria-hidden="true">#</a> 4.不建议用过长字段作为主键</h4><p>因为所有二级索引都引用了主键索引，过长的主键索引会让二级索引变得过大，导致每一页的存储记录数下降，可能导致B+树层数增加</p><h4 id="_5-建议用自增字段作为主键" tabindex="-1"><a class="header-anchor" href="#_5-建议用自增字段作为主键" aria-hidden="true">#</a> 5.建议用自增字段作为主键</h4><p>用非单调递增或递减的字段作为主键在InnoDB中不太好。因为这样在插入新记录的时候为了维护B+树的特性而出现频繁的分裂调整，影响效率</p><p>使用自增字段作为主键是很好的选择。</p><h2 id="四、myisam-索引" tabindex="-1"><a class="header-anchor" href="#四、myisam-索引" aria-hidden="true">#</a> 四、MyISAM 索引</h2><blockquote><p><strong>MyISAM 不存在聚簇索引，只有非聚簇索引</strong></p><p>因为数据（<code>.MYD</code>）和索引（<code>.MYI</code>）是分开存储的，所以<strong>一定要</strong>进行<code>回表</code>操作</p><p>MyISAM 索引叶子结点保存的是<code>数据的地址</code>，而InnoDB二级索引叶子结点保存的是<code>记录的主键</code>。所以同样是回表操作，<strong>MyISAM的效率更高</strong></p></blockquote><p>如下图所示，即使主键上的索引也是非聚簇索引</p><p><img src="https://s2.loli.net/2023/10/18/gZyIRAElnmvDjSt.png" alt="image-20230203152926463"></p><h3 id="myisam-和-innodb-对比" tabindex="-1"><a class="header-anchor" href="#myisam-和-innodb-对比" aria-hidden="true">#</a> MyISAM 和 InnoDB 对比</h3><p><strong>MyISAM的索引方式都是<code>“非聚簇”</code>的，与InnoDB包含1个聚簇索引是不同的</strong></p><ol><li>聚簇索引和非聚簇索引 <ul><li>在<strong>InnoDB</strong>存储引擎中，我们只需要根据主键值对<code>聚簇索引</code> 进行<strong>一次查找</strong>就能找到对应的记录</li><li>MyISAM 中却需要进行一次 <code>回表</code> 操作，意味着MyISAM中建立的索引相当于<strong>全部都是 二级索引</strong> 。</li></ul></li><li>文件区别 <ul><li>InnoDB的<strong>数据文件本身就是索引文件</strong></li><li>而MyISAM索引文件和数据文件是 <strong>分离的</strong> ，索引文件仅保存数据记录的<code>地址</code>。</li></ul></li><li>叶子结点存储内容区别 <ul><li>InnoDB的非聚簇索引data域存储相应记录 <code>主键的值</code></li><li>而MyISAM索引记录的是 <code>地址</code> 。换句话说，InnoDB的所有非聚簇索引都引用主键作为data域。</li></ul></li><li>回表速度 <ul><li>MyISAM的回表操作是十分 <code>快速</code> 的，因为是拿着<strong>地址偏移量</strong>直接到文件中取数据的</li><li>InnoDB是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</li></ul></li><li>主键要求 <ul><li>InnoDB要求表 <strong>必须有主键</strong>。如果没有显式指定，则MySQL系统会自动选择一个可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整型。</li><li>MyISAM可以没有主键</li></ul></li></ol><h2 id="五、索引的代价" tabindex="-1"><a class="header-anchor" href="#五、索引的代价" aria-hidden="true">#</a> 五、索引的代价</h2><p>索引是个好东西，可不能乱建，它在<strong>空间和时间上都会有消耗</strong>：</p><h3 id="空间上的代价" tabindex="-1"><a class="header-anchor" href="#空间上的代价" aria-hidden="true">#</a> <strong>空间上的代价</strong></h3><p>每建立一个索引都要为它建立一棵B+树，每一棵B+树的每一个节点都是一个数据页，一个页默认会占用 <code>16KB</code> 的存储空间，一棵很大的B+树由许多数据页组成，那就是很大的一片存储空间。</p><h3 id="时间上的代价" tabindex="-1"><a class="header-anchor" href="#时间上的代价" aria-hidden="true">#</a> <strong>时间上的代价</strong></h3><blockquote><p>增删改还需要维护B+树的排序，影响效率</p></blockquote><p>每次对表中的数据进行 <code>增、删、改</code> 操作时，都需要去修改各个B+树索引。</p><p>B+树每层节点都是按照索引列的值 从小到大的顺序排序 而组成了<code> 双向链表</code> 。不论是叶子节点中的记录，还是内节点中的记录（也就是不论是用户记录还是目录项记录）都是<strong>按照索引列的值从小到大的顺序</strong>而形成了一个<code>单向链表</code>。</p><p>而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些 <code>记录移位 、 页面分裂 、 页面回收</code> 等操作来维护好节点和记录的排序。如果我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，会<strong>给性能拖后腿</strong>。</p><h2 id="六、mysql-数据结构-b-树-选择原因" tabindex="-1"><a class="header-anchor" href="#六、mysql-数据结构-b-树-选择原因" aria-hidden="true">#</a> 六、MySQL 数据结构（B+树）选择原因</h2><h3 id="_6-1-hash" tabindex="-1"><a class="header-anchor" href="#_6-1-hash" aria-hidden="true">#</a> 6.1_Hash</h3><h4 id="为什么不用哈希结构作为索引结构呢" tabindex="-1"><a class="header-anchor" href="#为什么不用哈希结构作为索引结构呢" aria-hidden="true">#</a> 为什么不用哈希结构作为索引结构呢？</h4><ol><li><p>原因1</p><ul><li><p>Hash结构在等值判断（<code>=，&lt;&gt;, in</code>）的操作中，效率很高（达到<code>O(1)</code>），但是在<code>范围查询</code>的情况下，哈希类型的索引时间复杂度就退到了<code>O(n)</code>，相当于是遍历一遍</p></li><li><p>树的有序存储情况下，能够达到O(log2n)的效率</p></li></ul></li><li><p>原因2</p><ul><li>因为哈希索引存储数据是<strong>没有顺序</strong>的，所以遇到<code>ORDER BY</code>操作，使用哈希索引还需要进行重新排序</li></ul></li><li><p>原因3</p><ul><li>遇到<code>联合索引</code>，哈希是将联合索引<strong>合并到一起</strong>来计算哈希值的，这样就没办法对其中单个或多个索引键进行查询</li></ul></li><li><p>原因4</p><ul><li>等值查询的时候哈希索引效率高，但是在<strong>索引列重复值很多</strong>的情况下，<strong>效率会降低</strong>。因为更容易发生Hash冲突，而遇到Hash冲突时，需要遍历桶中的行指针来进行比较，找到查询的关键字，非常耗时</li></ul></li></ol><h4 id="hash索引使用存储引擎" tabindex="-1"><a class="header-anchor" href="#hash索引使用存储引擎" aria-hidden="true">#</a> Hash索引使用存储引擎</h4><table><thead><tr><th></th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr></tbody></table><h4 id="hash索引适用性" tabindex="-1"><a class="header-anchor" href="#hash索引适用性" aria-hidden="true">#</a> Hash索引适用性</h4><p>Hash索引存在着很多限制，相比之下在数据库中B+树索引的使用面会更广，不过也有一些场景采用Hash 索引效率更高，比如在键值型（(Key-Value）数据库中，<strong>Redis 存储的核心就是Hash表</strong>。</p><p>MysQL中的<strong>Memory存储引擎支持Hash存储</strong>，如果我们需要用到查询的临时表时，就可以选择Memory存储引擎，把某个字段设置为Hash 索引，比如字符串类型的字段，进行Hash计算之后长度可以缩短到几个字节。当字段的重复度低，而且**经常需要进行<code>等值查询</code>**的时候，采用Hash索引是个不错的选择。</p><p>另外，InnoDB本身不支持 Hash索引，但是提供<code>自适应 Hash索引(Adaptive Hash Index)</code>。什么情况下才会使用自适应Hash索引呢？</p><p>如果某个数据经常被访问，当满足一定条件的时候，就会将这个数据页的地址存放到Hash表中。这样下次查询的时候，就可以直接找到这个页面的所在位置。这样让B+树也具备了Hash索引的优点。</p><p><img src="https://s2.loli.net/2023/10/18/RFGOAao3SrzEnjV.png" alt="image-20230203161224559"></p><p>采用自适应 Hash 索引目的是方便根据 SQL 的查询条件加速定位到叶子节点，特别是当 B+ 树比较深的时候，通过自适应 Hash 索引可以明显提高数据的检索效率。</p><p>可以通过 <code>innodb_adaptive_hash_index</code> 变量来查看是否开启了自适应 Hash，比如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%adaptive_hash_index&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-2-二叉搜索树" tabindex="-1"><a class="header-anchor" href="#_6-2-二叉搜索树" aria-hidden="true">#</a> 6.2_二叉搜索树</h3><blockquote><p>特点：</p><ol><li>一个结点只能有两个子节点（度不能超过2）（二叉）</li><li>左子结点 &lt; 父结点，右子节点 &gt;= 父结点</li></ol></blockquote><h4 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h4><p>正常情况下（树基本匀称），时间复杂度为<code>O(log2n)</code></p><p>有可能出现畸形，可能导致时间复杂度变为<code>O(n)</code></p><p><img src="https://s2.loli.net/2023/10/18/HOV9mskh4gWlTtU.png" alt="image-20230203162020834"></p><h4 id="改进-畸形-方案" tabindex="-1"><a class="header-anchor" href="#改进-畸形-方案" aria-hidden="true">#</a> 改进“畸形”方案</h4><blockquote><p>为了提高查询效率，就需要 <code>减少磁盘IO数</code> 。为了减少磁盘IO的次数，就需要尽量 <code>降低树的高度</code> ，需要把原来**“瘦高”<strong>的树结构变的</strong>“矮胖”<strong>，树的每层的</strong>分叉越多越好**。</p></blockquote><h3 id="_6-3-平衡二叉搜索树-avl树" tabindex="-1"><a class="header-anchor" href="#_6-3-平衡二叉搜索树-avl树" aria-hidden="true">#</a> 6.3_平衡二叉搜索树（AVL树）</h3><p>为了解决二叉搜索树退化成链表的问题，人们提出了<code>平衡二叉搜索树（Balanced Binary Tree）</code>，又称为AVL树</p><h4 id="avl树性质" tabindex="-1"><a class="header-anchor" href="#avl树性质" aria-hidden="true">#</a> AVL树性质</h4><blockquote><p>是一棵空树 或 它的左右两个子树的<strong>高度差的绝对值不超过1</strong>，并且左右两个子树都是一棵平衡二叉树</p></blockquote><h4 id="时间复杂度-1" tabindex="-1"><a class="header-anchor" href="#时间复杂度-1" aria-hidden="true">#</a> 时间复杂度</h4><p>平衡二叉搜索树的时间复杂度为<code>O(log2n)</code></p><h4 id="查询时间" tabindex="-1"><a class="header-anchor" href="#查询时间" aria-hidden="true">#</a> 查询时间</h4><blockquote><p>将树从<code>瘦高</code>变为<code>矮胖</code></p></blockquote><p>查询数据的时间主要依赖磁盘IO次数，每访问一次结点就要进行一次IO操作，而节省IO操作的方法就是将二叉树改为多叉树，降低树的高度。</p><p>有N个结点的平衡二叉搜索树的高度为<code>logN</code>，而改为多叉树可以有效降低树的高度</p><h3 id="_6-4-b树" tabindex="-1"><a class="header-anchor" href="#_6-4-b树" aria-hidden="true">#</a> 6.4_B树</h3><p><img src="https://s2.loli.net/2023/10/18/swGa8MQtgdCmic6.png" alt="image-20230203172618638"></p><p>B树作为<code>多路平衡查找树</code>，它的每个结点最多可以包括<code>M</code>个子节点，<code>M称为B树的阶</code>。每个磁盘块中包括了<code>关键字</code>和<code>子节点</code>的指针。如果一个磁盘中包括了<code>x</code>个关键字，那么<strong>指针数</strong>就是<code>x+1</code>.</p><p>对于一个<code>100阶</code>的B树来说，如果有三层的话就能存储约<code>100万</code>的索引数据。$100<em>100</em>100$</p><p>对于大量索引数据来说，采用B树是非常适合的，因为高度远小于二叉树高度</p><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><ol><li>B树在插入和删除节点的时候如果导致树不平衡，就通过<code>自动调整</code>节点的位置来保持树的<strong>自平衡</strong>。</li><li>关键字集合分布在整棵树中，即<strong>叶子节点和非叶子节点都存放数据</strong>。搜索有可能在非叶子节点结束</li><li>其搜索性能等价于在关键字全集内做一次<strong>二分查找</strong>。</li></ol><h3 id="_6-5-b-树" tabindex="-1"><a class="header-anchor" href="#_6-5-b-树" aria-hidden="true">#</a> 6.5_B+树</h3><p>B+树的中间结点不直接存数据，这样做有以下几个好处：</p><ol><li>B+树查询效率稳定 <ul><li>因为B+树每次<strong>只有访问到叶子节点才能找到对应的数据</strong>，而在B树中，非叶子节点也会存储数据，这样就会造成查询效率不稳定的情况，有时候访问到了非叶子节点就可以找到关键字，而有时需要访问到叶子节点才能找到关键字。</li></ul></li><li>B+树查询效率高 <ul><li>因为通常B+树比B树<code>更矮胖</code>(阶数更大，深度更低)，查询所需要的磁盘I/0也会更少。因为同样的磁盘页大小，B+树可以存储更多的节点关键字。</li><li>在查询范围上，B+树效率也比B树高，因为B+树所有关键字都在叶子结点中，叶子结点又是递增的，通过链表连接。而B树妖通过中序遍历才能完成范围查找，效率低很多。</li></ul></li></ol><h4 id="b-树和-b-树的差异" tabindex="-1"><a class="header-anchor" href="#b-树和-b-树的差异" aria-hidden="true">#</a> <strong>B+</strong> <strong>树和</strong> <strong>B</strong> <strong>树的差异：</strong></h4><ol><li>B+ 树有 k 个孩子的节点就有 k 个关键字。也就是<code>孩子数量 = 关键字数</code>，而 B 树中，<code>孩子数量 = 关键字数+1</code>。</li><li>B+ 树非叶子节点的关键字也会<strong>同时存在在子节点中</strong>，并且是在子节点中所有关键字的最大（或最小）。</li><li>B+ 树<strong>非叶子节点仅用于索引</strong>，不保存数据记录，跟记录有关的信息都放在叶子节点中。而 B 树中， 非叶子节点既保存索引，也保存数据记录 。</li><li>B+ 树所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大小从小到大顺序链接。</li></ol><p>没有完全的谁好谁坏</p><blockquote><p>B 树和 B+ 树都可以作为索引的数据结构，在 MySQL 中采用的是 B+ 树。</p><p>但B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。</p></blockquote><h4 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h4><h5 id="思考题-为了减少io-索引树会一次性加载吗" tabindex="-1"><a class="header-anchor" href="#思考题-为了减少io-索引树会一次性加载吗" aria-hidden="true">#</a> 思考题：为了减少IO，索引树会一次性加载吗？</h5><p>不会。因为索引会存在磁盘上，如果数据量大，索引也会很大。不可能一次将索引都加载进内存，之后在需要的时候逐一加载每一个磁盘页，因为磁盘页对应着索引树的结点</p><h5 id="思考题-b-树的存储能力如何-为何说一般查找行记录-最多只需1-3次磁盘io" tabindex="-1"><a class="header-anchor" href="#思考题-b-树的存储能力如何-为何说一般查找行记录-最多只需1-3次磁盘io" aria-hidden="true">#</a> 思考题：B+树的存储能力如何？为何说一般查找行记录，最多只需1~3次磁盘IO</h5><p>InnoDB存储引擎中页的大小为<code>16KB</code></p><p>一般表的主键为INT（4字节）或者BIGINT（8字节），指针类型也一般为4或8字节</p><p>也就是说，一个页（B+树中的一个结点）中大概可以存储<code>16KB / (8B+8B) = 1K</code>个键值</p><p>假定数据也也存储1k条行记录数据，那三层的B+树就可以维护<code>1000*1000*1000=10亿</code>条记录了</p><p>实际情况中每个结点可能不能填充满，所以10亿条不容易用完，因此在数据库中，<code>B+树的高度一般都在2-4层</code>。而InnoDB在设计时是<strong>将根结点常驻内存</strong>的，也就是说，查找某一键值的行记录最多只需要<code>1-3次</code>磁盘IO操作</p><h5 id="思考题-为什么说b-树比b-树更适合实际应用中操作系统的文件索引和数据库索引" tabindex="-1"><a class="header-anchor" href="#思考题-为什么说b-树比b-树更适合实际应用中操作系统的文件索引和数据库索引" aria-hidden="true">#</a> 思考题：为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？</h5><ol><li>B+树的磁盘读写代价更低 <ul><li>B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</li></ul></li><li>B+树的查询效率更加稳定 <ul><li>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</li></ul></li></ol><h5 id="思考题-hash-索引与-b-树索引的区别" tabindex="-1"><a class="header-anchor" href="#思考题-hash-索引与-b-树索引的区别" aria-hidden="true">#</a> 思考题：Hash 索引与 B+ 树索引的区别</h5><ol><li>Hash索引<code>不能进行范围查询</code>，而B树可以。这是因为Hash索引指向的数据是<strong>无序</strong>的，而B+树的叶子节点是个<strong>有序的链表</strong>。</li><li>Hash索引<strong>不支持联合索引</strong>的<code>最左侧原则</code>(即联合索引的部分索引无法使用)，而B+树可以。对于联合索引来说，Hash索引在计算Hash值的时候是将索引键合并后再一起计算Hash值，所以不会针对每个索引单独计算Hash值。因此如果用到联合索引的一个或者几个索引时，联合索引无法被利用。</li><li>Hash索引<code>不支持ORDER BY排序</code>，因为Hash索引指向的数据是无序的，因此无法起到排序优化的作用，而B+树索引数据是有序的，可以起到对该字段ORDER BY排序优化的作用。同理，我们也无法用Hash索引进行模糊查询，而B+树使用LIKE进行模糊查询的时候，LIKE后面后模糊查询（比如%结尾）的话就可以起到优化作用。</li><li><strong>InnoDB不支持哈希索引</strong></li></ol><h5 id="思考题-hash-索引与-b-树索引是在建索引的时候手动指定的吗" tabindex="-1"><a class="header-anchor" href="#思考题-hash-索引与-b-树索引是在建索引的时候手动指定的吗" aria-hidden="true">#</a> 思考题：Hash 索引与 B+ 树索引是在建索引的时候手动指定的吗？</h5><p>针对InnoDB和MyISAM存储引擎，都会<strong>默认采用B+树索引</strong>，无法使用Hash索引。</p><p>InnoDB提供的<code>自适应Hash</code>是<strong>不需要手动指定</strong>的。</p><p>如果是Memory/Heap和NDB存储引擎，是可以进行选择Hash索引的。</p><h2 id="七、innodb-数据存储结构" tabindex="-1"><a class="header-anchor" href="#七、innodb-数据存储结构" aria-hidden="true">#</a> 七、InnoDB 数据存储结构</h2><h3 id="_7-1-数据库存储结构-页" tabindex="-1"><a class="header-anchor" href="#_7-1-数据库存储结构-页" aria-hidden="true">#</a> 7.1_数据库存储结构：页</h3><p>索引结构给我们提供了高效的索引方式，不过索引信息以及数据记录都是保存在文件上的，确切说是存储在<code>页结构</code>中。另一方面，索引是在存储引擎中实现的，MySQL服务器上的<code>存储引擎</code>负责对表中数据的读取和写入工作。不同存储引擎中存放的格式一般是不同的，甚至有的存储引擎比如Memory都不用磁盘来存储数据。</p><p>由于InnoDB 是MySQL的默认存储引擎，所以主要分析InnoDB存储引擎的数据存储结构。</p><p><img src="https://s2.loli.net/2023/10/18/Jyx4vRm2VrAI6G9.png" alt="image-20230203234415204"></p><h4 id="磁盘与内存交互基本单位-页" tabindex="-1"><a class="header-anchor" href="#磁盘与内存交互基本单位-页" aria-hidden="true">#</a> 磁盘与内存交互基本单位：页</h4><p>InnoDB 将数据划分为若干页，默认大小<code>16KB</code></p><p><code>页</code>是磁盘与内存交互的<code>基本单位</code>。</p><p>也就是说，<strong>一次最少从磁盘读16KB到内存，一次最少把内存中16KB内容刷新到磁盘中</strong>。不论读一行还是读多行，都会将他们所在页进行加载。</p><blockquote><p>数据库管理存储空间的基本单位是<code>页(Page)</code>，数据库IO操作的最小单位是<code>页</code>。</p></blockquote><h5 id="为什么不以记录作为单位呢" tabindex="-1"><a class="header-anchor" href="#为什么不以记录作为单位呢" aria-hidden="true">#</a> 为什么不以记录作为单位呢？</h5><p>如果以记录为单位，那么一次读取（一次IO操作）只能处理一行数据，效率低下。</p><h4 id="页结构概述" tabindex="-1"><a class="header-anchor" href="#页结构概述" aria-hidden="true">#</a> 页结构概述</h4><p>不同的页不一定在物理上相连，而是通过<code>双向链表</code>关联。</p><p>每个数据页中的记录会按照主键值从小到大的顺序组成<code>单项链表</code>，每个数据页会为存储在它里面的记录生成一个<code>页目录</code>，通过主键查找某条记录时可以在页目录中通过<code>二分法</code>快速定位对应的槽，然后遍历该槽对应分组中的记录即可找到指定的记录。</p><h4 id="页的大小" tabindex="-1"><a class="header-anchor" href="#页的大小" aria-hidden="true">#</a> 页的大小</h4><p>不同数据库管理系统（DBMS）页大小不同，InnoDB的默认页大小是<code>16KB</code>，可以通过以下命令来查看</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%innodb_page_size%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>SQL Server中页的大小为 <code>8KB</code>，而在Oracle中我们用术语<code>“块”</code>(Block)来代表“页”，Oralce支持的块大小为2KB，4KB，8KB,16KB，32KB和64KB。</p><h4 id="页的上层结构" tabindex="-1"><a class="header-anchor" href="#页的上层结构" aria-hidden="true">#</a> 页的上层结构</h4><blockquote><p>在数据库中，还有区（Extent）、段（Segment）、和表空间（Tablespace）的概念，关系如下图所示</p></blockquote><p><img src="https://s2.loli.net/2023/10/18/W87bKJ94t2SdXGB.png" alt="image-20230203235024967"></p><h5 id="区-extent" tabindex="-1"><a class="header-anchor" href="#区-extent" aria-hidden="true">#</a> 区（Extent）</h5><p>区(Extent)是<strong>比页大一级</strong>的存储结构，在InnoDB存储引擎中，一个区会分配<code>64个连续的页</code>。因为InnoDB中的页大小默认是16KB，所以一个区的大小是<code>64*16KB= 1MB</code>。</p><h5 id="段-segment" tabindex="-1"><a class="header-anchor" href="#段-segment" aria-hidden="true">#</a> 段（Segment）</h5><p>段(Segment)<strong>由一个或多个区组成</strong>，区在文件系统是一个连续分配的空间(在InnoDB中是连续的64个页)</p><p>不过在段中不要求区与区之间是相邻的。<strong>段是数据库中的<code>分配单位</code>，不同类型的数据库对象以不同的段形式存在</strong>。当我们创建数据表、索引的时候，就会相应创建对应的段，比如创建一张表时会创建一个<strong>表段</strong>，创建一个索引时会创建一个<strong>索引段</strong>。</p><h5 id="表空间-tablespace" tabindex="-1"><a class="header-anchor" href="#表空间-tablespace" aria-hidden="true">#</a> 表空间（Tablespace）</h5><p>表空间（Tablespace)是一个逻辑容器，表空间存储的对象是段，在一个表空间中可以有一个或多个段，但是一个段只能属于一个表空间。数据库由一个或多个表空间组成。表空间从管理上可以划分为<code>系统表空间、用户表空间、撤销表空间、临时表空间</code>等。</p><h3 id="_7-2页的内部结构" tabindex="-1"><a class="header-anchor" href="#_7-2页的内部结构" aria-hidden="true">#</a> 7.2页的内部结构</h3><h3 id="todo-未完" tabindex="-1"><a class="header-anchor" href="#todo-未完" aria-hidden="true">#</a> TODO:未完</h3><h2 id="八、索引失效" tabindex="-1"><a class="header-anchor" href="#八、索引失效" aria-hidden="true">#</a> 八、索引失效</h2><h3 id="索引失效的几种情况" tabindex="-1"><a class="header-anchor" href="#索引失效的几种情况" aria-hidden="true">#</a> 索引失效的几种情况</h3><ol><li>查询时没有遵循联合索引的最左原则</li><li>在索引列上做<strong>计算</strong>或<strong>函数操作</strong>等</li><li>where条件中<strong>范围条件</strong>右边的列索引失效 <ul><li><code>索引为(a,b,c)</code>，查询语句为<code>select * from t1 where a=1 and b &gt; 1 and c =1;</code>，索引使用遵循了最左原则，但是用到了范围查询，所以只有<code>a和b</code>能用上索引，<strong>c不行</strong></li></ul></li><li><strong>不等于</strong>比较时，无法使用索引</li><li><code>is not null</code>无法使用索引（<code>is null</code>可以）</li><li><code>like</code>使用<strong>通配符开头</strong>，索引失效</li><li>字符串查询操作，不加引号，索引失效 <ul><li><code>slect * from stu where name = 110;</code>在stu表的name字段是字符串类型，查询条件<code>110</code>没加引号，虽然能正常查询，但是不走索引</li></ul></li><li>联合索引使用<code>or</code>，即使满足了最左原则，索引也会失效</li></ol><h3 id="排序优化" tabindex="-1"><a class="header-anchor" href="#排序优化" aria-hidden="true">#</a> 排序优化</h3><ol><li>避免使用<code>Using FileSort</code>方式排序</li><li><code>order by</code>语句使用最左原则 或者 使用<code>where + order by</code>子句条件组合满足最左原则</li><li><code>where</code>中出现联合索引范围查询会让<code>order by</code>中后续的联合索引失效</li></ol><p><img src="https://s2.loli.net/2023/10/18/nH7SkOcwJ8DbU9m.png" alt=""></p><h3 id="关联查询优化" tabindex="-1"><a class="header-anchor" href="#关联查询优化" aria-hidden="true">#</a> 关联查询优化</h3><h4 id="内连接-1" tabindex="-1"><a class="header-anchor" href="#内连接-1" aria-hidden="true">#</a> 内连接</h4><p>内连接时，MySQL会自动把<code>小结果集的</code>选为驱动表，所以大表的字段最好加上所以</p><h4 id="外连接-1" tabindex="-1"><a class="header-anchor" href="#外连接-1" aria-hidden="true">#</a> 外连接</h4><p>左外连接时，左表会全表扫描（不可避免的），所以右表最好加上索引 右外连接同理（和左外连接相反）</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>最好保证被驱动表的字段建立了索引，外连接要用小表驱动大表（小表一定会全表扫描的）</p><h3 id="分组优化" tabindex="-1"><a class="header-anchor" href="#分组优化" aria-hidden="true">#</a> 分组优化</h3><p>和排序优化同理，分组底层也会用到排序</p><h2 id="九、慢查询日志" tabindex="-1"><a class="header-anchor" href="#九、慢查询日志" aria-hidden="true">#</a> 九、慢查询日志</h2><h3 id="开启和设置" tabindex="-1"><a class="header-anchor" href="#开启和设置" aria-hidden="true">#</a> 开启和设置</h3><ol><li>查看是否开启：<code>show variables like&#39;%slow_query_log%&#39;;</code></li><li>开启日志：<code>set globalslow_query_log=1;</code></li><li>设置阈值时间，超过阈值的查询会被记录：<code>set global long_query_time=1;</code></li><li>查看阈值时间：<code>SHOW VARIABLES LIKE&#39;long_query_time%&#39;;</code></li></ol><h3 id="查看日志" tabindex="-1"><a class="header-anchor" href="#查看日志" aria-hidden="true">#</a> 查看日志</h3><p>日志一般为：<code>C:\\ProgramData\\MySQL\\MySQL安装目录\\Data</code>中的<code>xxx-slow.log</code></p><h2 id="十、explain" tabindex="-1"><a class="header-anchor" href="#十、explain" aria-hidden="true">#</a> 十、explain</h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>通过explain可以了解到sql的执行的过程细节，可以辅助进行排查sql的问题 使用EXPLAIN关键字可以模似优化器执行SQL查询语句，从而知道NSQL是如何处理SQL语句的。可以用来分析查询语句或是表的结构的性能瓶颈。其作用：</p><ol><li>表的读取顺序</li><li>哪些索引可以使用</li><li>数据读取操作的操作类型</li><li>那些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ol><p>EXPLAIN关键字使用起来比较简单：<code>explain+SQL语句</code></p><h3 id="explain中的重要字段" tabindex="-1"><a class="header-anchor" href="#explain中的重要字段" aria-hidden="true">#</a> explain中的重要字段</h3><h4 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> id</h4><p>select查询的序列号，表示查询中执行select子句或操作表的顺序。</p><blockquote><p>id大的先执行</p></blockquote><ul><li>id相同时，执行顺序由上至下</li><li>id不同，如果是子查询，id的序号会递增，id值越大优先级越高，则先被执行。</li><li>id相同和不同都存在时，id相同的可以理解为一组，从上往下顺序执行，所有组中，id值越大，优先级越高越先执行。</li></ul><h4 id="select-type" tabindex="-1"><a class="header-anchor" href="#select-type" aria-hidden="true">#</a> select_type</h4><p>查询的类型，常见值有：</p><ul><li><code>SIMPLE</code>：简单的select查询，查询中不包含子查询或者UNION。</li><li><code>PRIMARY</code>：查询中若包含任何复杂的子部分，最外层查询则被标记为Primary。</li><li><code>DERIVED</code>：在FROM列表中包含的子查询被标记为DERIVED(衍生)，MySQL会递归执行这些子查询，把结果放在临时表里。</li><li><code>SUBQUERY</code>：在SELECT或WHERE列表中包含了子查询。</li></ul><h4 id="table" tabindex="-1"><a class="header-anchor" href="#table" aria-hidden="true">#</a> table</h4><p>显示当前sql执行哪张表</p><h4 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h4><p>访问类型排序</p><h5 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> system</h5><p>比较特殊，表只有一行记录</p><h5 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> const</h5><p>通过一次索引就找到了 const用于比较<code>主键索引</code>和<code>唯一索引</code> 因为只匹配一条记录，所以很快。 比如将主键放在where中，就是const查询</p><h5 id="eq-ref" tabindex="-1"><a class="header-anchor" href="#eq-ref" aria-hidden="true">#</a> eq_ref</h5><p>对于两个表关联查询，被驱动表的查询就是<code>eq_ref</code>（被驱动表的连接字段要是<strong>主键</strong>或者是<strong>唯一</strong>索引）（驱动表是all）</p><h5 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h5><p>非唯一索引扫描 返回匹配的所有行，属于是查找和扫描的混合体</p><h5 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> range</h5><p>使用索引进行范围查询为range 在where中用了<code>between、&lt;、&gt;、in</code>等范围查询索引操作 效率比all好，因为只需要从索引某一点开始扫，而不用全表扫（基本不用）</p><h5 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> index</h5><p>当查询操作都从索引表中查询数据时，为index</p><p>比如：一张表有一个主键和一个加了普通索引的字段，此时查询所有记录，不加where，因为两个字段都有索引，所以就是index类型查询</p><p>与all区别：index遍历索引树，all是读取全表而且还是从硬盘读</p><h5 id="all" tabindex="-1"><a class="header-anchor" href="#all" aria-hidden="true">#</a> all</h5><p>全表扫描</p><h5 id="各个访问类型的排序" tabindex="-1"><a class="header-anchor" href="#各个访问类型的排序" aria-hidden="true">#</a> 各个访问类型的排序</h5><p>从好到坏依次为：<code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</code> 一般要求能达到range，<code>最好能到ref</code></p><h4 id="possible-keys" tabindex="-1"><a class="header-anchor" href="#possible-keys" aria-hidden="true">#</a> possible_keys</h4><p>显示可能应用在这张表中的索引。 查询涉及到的字段上如果存在索引，则该索引将会被列出来，但不一定会被查询实际使用上。</p><p>特殊情况： 有可能出现<code>possible_keys</code>为null但是key不为null 原因为： possible_keys为null 说明用不上索引的树形查找，但如果二级索引包含了所有要查找的数据，二级索引往往比聚集索引小（占用空间），所以mysql可能会选择顺序遍历这个二级索引直接返回</p><h4 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> key</h4><p>查询中实际使用的索引，如果为NULL，则没有使用索引。</p><h4 id="ref-1" tabindex="-1"><a class="header-anchor" href="#ref-1" aria-hidden="true">#</a> ref</h4><p>显示索引的哪一列被使用了，如果可能的话，是一个常数。查找索引列上的值用了哪些列或常量</p><h4 id="rows" tabindex="-1"><a class="header-anchor" href="#rows" aria-hidden="true">#</a> rows</h4><p>MySQL认为它执行查询时必须检查的行数。（越少越好）</p><h4 id="extra" tabindex="-1"><a class="header-anchor" href="#extra" aria-hidden="true">#</a> extra</h4><p>一些常见的重要的额外信息：</p><ul><li><code>Using filesort</code>：排序时没有使用索引，效率低 <ul><li>MySQL无法利用索引完成的排序操作称为“文件排序”。</li></ul></li><li><code>Using temporary</code>：分组时没有使用索引，一般会和<code>Using filesort</code>一起出现，分组底层也会用到排序 <ul><li>Mys.ql在对查询结果排序时使用临时表，常见于排序order by和分组查询group by。</li></ul></li><li><code>Using index</code>：投影的字段只有索引字段，表示索引被用来执行索引键值的查找，避免访问了表的数据行，效率不错。</li><li><code>Using where</code>：表示使用了where过滤。</li></ul><h1 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h1><p><img src="https://s2.loli.net/2023/10/18/3MaPqyrFDl5zmA4.png" alt="image-20220413173703547"></p><p><img src="https://s2.loli.net/2023/10/18/FbZlroSiaI81uMn.png" alt="image-20220413173751711"></p><p><img src="https://s2.loli.net/2023/10/18/mfrg5t8SXd934O7.png" alt="image-20220413174408962"></p><p><img src="https://s2.loli.net/2023/10/18/21aYvAHjXVMwkl6.png" alt="image-20220413174810881"></p><p><img src="https://s2.loli.net/2023/10/18/JPI4Sa2VrKRgq61.png" alt="image-20220413175240886"></p><h1 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计" aria-hidden="true">#</a> 数据库设计</h1><h2 id="查询方式" tabindex="-1"><a class="header-anchor" href="#查询方式" aria-hidden="true">#</a> 查询方式</h2><p><img src="https://s2.loli.net/2023/10/18/FAYklaHjS9dGTs2.png" alt="image-20220413180823590"></p><p><img src="https://s2.loli.net/2023/10/18/ilX5Nqtub4EKpem.png" alt="image-20220413181928331"></p><p><img src="https://s2.loli.net/2023/10/18/7WtdIbN3SqjOuDg.png" alt="image-20220413182024243"></p><p><img src="https://s2.loli.net/2023/10/18/O3MRrbLg4JScCNx.png" alt="image-20220413191218922"></p><p><img src="https://s2.loli.net/2023/10/18/swbkBALyeUOMzIJ.png" alt="image-20220413191510578"></p><p><img src="https://s2.loli.net/2023/10/18/AJIM2EDioVnYBU8.png" alt="image-20220413191523906"></p><p><img src="https://s2.loli.net/2023/10/18/AyGn6s9TFEZWSr1.png" alt="image-20220413191849000"></p><h2 id="时间字段" tabindex="-1"><a class="header-anchor" href="#时间字段" aria-hidden="true">#</a> 时间字段</h2><h3 id="查询当前时区" tabindex="-1"><a class="header-anchor" href="#查询当前时区" aria-hidden="true">#</a> 查询当前时区</h3><h3 id="修改当前时区" tabindex="-1"><a class="header-anchor" href="#修改当前时区" aria-hidden="true">#</a> 修改当前时区</h3><h4 id="改变会话时区" tabindex="-1"><a class="header-anchor" href="#改变会话时区" aria-hidden="true">#</a> 改变会话时区</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> @<span class="token variable">@session.time_zone</span> <span class="token operator">=</span> <span class="token string">&#39;+8:00&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="timestamp-可以存储带时区的时间信息" tabindex="-1"><a class="header-anchor" href="#timestamp-可以存储带时区的时间信息" aria-hidden="true">#</a> timestamp（可以存储带时区的时间信息）</h3><h4 id="存入" tabindex="-1"><a class="header-anchor" href="#存入" aria-hidden="true">#</a> 存入</h4><p>插入timestamp的格式是<code>YYYY-MM-DD HH:MM:SS</code>或者<code>YYYY-MM-DD</code>或者<code>YYYY-MM-DD HH:MM:SS.FFF...</code>MySQL底层会将字符串时间从 当前时区 转化为 <strong>0时区</strong> 的时间，再存入表中</p><h4 id="读取" tabindex="-1"><a class="header-anchor" href="#读取" aria-hidden="true">#</a> 读取</h4><p>读取timestamp时，MySQL会将时间转换为当前时区，再返回</p><h4 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1" aria-hidden="true">#</a> 注意</h4><blockquote><p>timestamp存储的时间一律认为是0时区的时间</p><p>比如：</p><p>东八区时区存入<code>2020-12-12 08:00:00</code>，存进数据库的时间是<code>2020-12-12 00:00:00</code>，读出来的时间是<code>2020-12-12 08:00:00</code></p><p>如果存入是东八区，读取时候改为东九区，此时时间就是<code>2020-12-12 09:00:00</code></p></blockquote><h3 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> DATETIME</h3><p>DATETIME类型在所有的日期时间类型中占用的存储空间最大，总共需要 <code>8</code> 个字节的存储空间。在格式上为DATE类型和TIME类型的组合，可以表示为 <code>YYYY-MM-DD HH:MM:SS</code> ，其中<code>YYYY</code>表示年份，<code>MM</code>表示月份，<code>DD</code>表示日期，<code>HH</code>表示小时，<code>MM</code>表示分钟，<code>SS</code>表示秒。</p><h4 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h4><p>在向DATETIME类型的字段插入数据时，同样需要满足一定的格式条件。</p><ol><li>以 <code>YYYY-MM-DD HH:MM:SS</code> 格式或者<code> YYYYMMDDHHMMSS</code> 格式的字符串插入DATETIME类型的字段时，<strong>最小值为1000-01-01 00:00:00，最大值为9999-12-03 23:59:59</strong>。 <ul><li>以<code>YYYYMMDDHHMMSS</code>格式的数字插入DATETIME类型的字段时，会被转化为YYYY-MM-DD HH:MM:SS格式。</li></ul></li><li>以 <code>YY-MM-DD HH:MM:SS</code> 格式或者 <code>YYMMDDHHMMSS</code> 格式的字符串插入DATETIME类型的字段时，<strong>两位数的年份规则符合YEAR类型的规则，00到69表示2000到2069；70到99表示1970到1999。（建议不用两位数表示年）</strong></li><li>使用函数 <code>CURRENT_TIMESTAMP()</code> 和 <code>NOW() </code>，可以向DATETIME类型的字段插入系统的当前日期和时间。</li></ol><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><blockquote><p>不管是<code>CHAR</code>还是<code>VARCHAR</code>，后面加的数字都代表存储的<strong>字符数</strong>，具体底层占用多少字节根据字符集决定</p><ol><li>GBK一个汉字2字节</li><li>utf8mb3一个汉字3字节</li><li>utf8mb4一个汉字4字节</li></ol></blockquote><ol><li>CHAR <ul><li>占用字符数<code>[0, 255]</code>，不指定长度默认为<code>1</code></li><li>当MySQL检索CHAR类型的数据时，CHAR类型的字段<strong>会去除尾部的空格</strong>。</li><li>CHAR占用存储空间根据字符集编码计算后的字节数</li></ul></li><li>VARCHAR <ul><li>占用字符数<code>[0, 65536]</code>，必须指定长度</li><li>检索VARCHAR类型的字段数据时，<strong>会保留数据尾部的空格</strong>。</li><li>VARCHAR类型的字段所占用的存储空间为根据字符集编码计算后的字节数<strong>再加1个字节</strong>。</li></ul></li></ol><h3 id="char-和-varchar-的选择" tabindex="-1"><a class="header-anchor" href="#char-和-varchar-的选择" aria-hidden="true">#</a> CHAR 和 VARCHAR 的选择</h3><table><thead><tr><th>类型</th><th>特点</th><th>空间上</th><th>时间上</th><th>使用场景</th></tr></thead><tbody><tr><td>CHAR</td><td>固定长度</td><td>浪费空间</td><td>效率高</td><td>存储不打，速度要求高</td></tr><tr><td>VARCHAR</td><td>可变长度</td><td>节省存储空间</td><td>效率低</td><td>非CHAR的情况</td></tr></tbody></table><ol><li><p><strong>情况1</strong>：<strong>存储很短的信息</strong>。比如门牌号码101，201……这样很短的信息应该用char，因为varchar还要占个byte用于存储信息长度，本来打算节约存储的，结果得不偿失。</p></li><li><p><strong>情况2</strong>：<strong>固定长度的</strong>。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据长度的特性就消失了，而且还要占个长度信息。</p></li><li><p><strong>情况3</strong>：<strong>十分频繁改变的column</strong>。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个非常频繁改变的，那就要有很多的精力用于计算，而这些对于char来说是不需要的。</p></li><li><p><strong>情况4</strong>：具体存储引擎中的情况：</p><ol><li><code>MyISAM</code> 数据存储引擎和数据列：MyISAM数据表，最好使用固定长度(CHAR)的数据列代替可变长度(VARCHAR)的数据列。这样使得整个表静态化，从而使 <code>数据检索更快 </code>，用空间换时间。</li><li><code>MEMORY</code> 存储引擎和数据列：MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用CHAR或VARCHAR列都没有关系，两者都是作为CHAR类型处理的。</li><li><strong><code>InnoDB</code> 存储引擎</strong>，建议使用VARCHAR类型。因为对于InnoDB数据表，内部的行存储格式并没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且<strong>主要影响性能的因素是数据行使用的存储总量</strong>，由于char平均占用的空间多于varchar，所以除了简短并且固定长度的，其他考虑varchar。这样节省空间，对磁盘I/O和数据存储总量比较好。</li></ol></li></ol><h2 id="小数" tabindex="-1"><a class="header-anchor" href="#小数" aria-hidden="true">#</a> 小数</h2><h3 id="float-与-double" tabindex="-1"><a class="header-anchor" href="#float-与-double" aria-hidden="true">#</a> FLOAT 与 DOUBLE</h3><p><img src="https://s2.loli.net/2023/10/18/AgNuGidKonrTxRt.png" alt="image-20230130161858353"></p><p>写法：<code>FLOAT(M,D)</code> 或 <code>DOUBLE(M,D)</code> 。（新版不推荐使用指定范围）</p><p>这里，<code>M</code>称为 <strong>精度</strong> ，<code>D</code>称为 <strong>标度</strong> 。<code>(M,D)</code>中 <code>M=整数位+小数位</code>，<code>D=小数位</code>。 <strong>D&lt;=M&lt;=255，0&lt;=D&lt;=30</strong>。</p><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h4><ol><li>FLOAT 占用字节数少，取值范围小</li><li>DOUBLE 占用字节数多，取值范围也大。</li></ol><h4 id="有无符号问题-新版不推荐使用无符号" tabindex="-1"><a class="header-anchor" href="#有无符号问题-新版不推荐使用无符号" aria-hidden="true">#</a> 有无符号问题（新版不推荐使用无符号）</h4><ol><li>整数的无符号的正数会比有符号正数表示的更广</li><li>浮点数的无符号的正数会和有符号正数表示正数范围都一样</li></ol><p>MySQL 存储浮点数的格式为： <code>符号(S) 、 尾数(M) 和 阶码(E) </code>。因此，<strong>无论有没有符号，MySQL 的浮点数都会存储表示符号的部分</strong>。因此， 所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p><ol><li><h4 id="注意新版本问题" tabindex="-1"><a class="header-anchor" href="#注意新版本问题" aria-hidden="true">#</a> 注意新版本问题</h4></li><li><p><strong>从MySQL 8.0.17开始，FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确不推荐使用</strong>，将来可能被移除。</p></li><li><p>另外，关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了，将来也可能被移除。</p></li></ol><h3 id="定点数-decimal" tabindex="-1"><a class="header-anchor" href="#定点数-decimal" aria-hidden="true">#</a> 定点数 DECIMAL</h3><p>定义时可以写<code>DECIMAL(M,D),DEC,NUMERIC</code></p><p>占用<code>M+2</code>字节</p><p>有效范围由M和D决定</p><h4 id="double-对比-decimal-优势" tabindex="-1"><a class="header-anchor" href="#double-对比-decimal-优势" aria-hidden="true">#</a> DOUBLE 对比 DECIMAL 优势</h4><p><strong>DECIMAL(M,D)的最大取值范围与DOUBLE类型一样</strong>，但是有效的数据范围是由M和D决定的。</p><p>DECIMAL 的存储空间并不是固定的，由精度值M决定，总共占用的存储空间为M+2个字节。也就是说，在一些对<strong>精度要求不高的场景下</strong>，<strong>比起占用同样字节长度的定点数，浮点数表达的数值范围可以更大一些</strong>。</p><h4 id="定点数优势" tabindex="-1"><a class="header-anchor" href="#定点数优势" aria-hidden="true">#</a> 定点数优势</h4><ol><li>定点数在MySQL内部是以 <code>字符串</code> 的形式进行存储，这就决定了它一定<strong>是精准的</strong>。</li><li>当DECIMAL类型不指定精度和标度时，其<code>默认为DECIMAL(10,0)</code>。当数据的精度超出了定点数类型的精度范围时，则MySQL同样会进行四舍五入处理。（标度超出则报错）</li></ol><h4 id="定点数和浮点数选择" tabindex="-1"><a class="header-anchor" href="#定点数和浮点数选择" aria-hidden="true">#</a> 定点数和浮点数选择</h4><ul><li>浮点数相对于定点数的优点是在<strong>长度一定的情况下，浮点类型取值范围大</strong>，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）</li><li>定点数类型取值范围相对小，但是<strong>精准，没有误差</strong>，适合于对精度要求极高的场景 （比如涉及金额计算的场景）</li></ul><h2 id="数据类型小结" tabindex="-1"><a class="header-anchor" href="#数据类型小结" aria-hidden="true">#</a> 数据类型小结</h2><p>在定义数据类型时：</p><ol><li>如果确定是 <strong>整数</strong> ，就用<code> INT</code> ；</li><li>如果是 <strong>小数</strong> ，一定用定点数类型<code>DECIMAL(M,D)</code> ；</li><li>如果是<strong>日期与时间</strong>，就用 <code>DATETIME</code> 。</li></ol><p>这样做的好处是，首先确保你的系统不会因为数据类型定义出错。不过，凡事都是有两面的，可靠性好，并不意味着高效。比如，TEXT 虽然使用方便，但是效率不如 CHAR(M) 和 VARCHAR(M)。</p><p>关于字符串的选择，建议参考如下阿里巴巴的《Java开发手册》规范：</p><p><strong>阿里巴巴《Java开发手册》之MySQL数据库：</strong></p><ul><li>任何字段如果为<strong>非负数</strong>，必须是 <code>UNSIGNED</code></li><li>【 <strong>强制</strong> 】小数类型为 <code>DECIMAL</code>，==禁止==使用 FLOAT 和 DOUBLE。 <ul><li>说明：在存储的时候，FLOAT 和 DOUBLE 都<strong>存在精度损失的问题</strong>，很可能在比较值的时候，得到不正确的结果。</li><li><code>如果存储的数据范围超过 DECIMAL 的范围，建议将数据拆成整数和小数并分开存储</code>。</li></ul></li><li>【 <strong>强制</strong> 】如果存储的字符串长度<strong>几乎相等</strong>，使用<code>CHAR</code>定长字符串类型。</li><li>【 <strong>强制</strong> 】VARCHAR 是可变长字符串，不预先分配存储空间，长度不要超过 5000。如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</li></ul><p>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;Hello_123&#39;;</p><p>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;admin&#39;;</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;admin&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h1><h2 id="mysql事务操作" tabindex="-1"><a class="header-anchor" href="#mysql事务操作" aria-hidden="true">#</a> MySQL事务操作</h2><blockquote><p>MySQL的事务要在innoDB里才好使，在MyISAM里不行</p></blockquote><ol><li><code>start transaction</code><ul><li>开启一个事务，如果不指定保存点的话回滚直接回到这里</li></ul></li><li><code>set autocommit=off</code><ul><li>开启事务</li></ul></li><li><code>savepoint 保存点名</code><ul><li>设置一个保存点</li></ul></li><li><code>rollback to 保存点名</code><ul><li>回滚事务到一个保存点位置</li></ul></li><li><code>rollback</code><ul><li>回滚全部事务</li></ul></li><li><code>commit</code><ul><li>提交事务，操作生效，不能再回退了</li></ul></li></ol><h2 id="事务的传播行为" tabindex="-1"><a class="header-anchor" href="#事务的传播行为" aria-hidden="true">#</a> 事务的传播行为</h2><h2 id="事务并发的三大问题" tabindex="-1"><a class="header-anchor" href="#事务并发的三大问题" aria-hidden="true">#</a> 事务并发的三大问题:</h2><ol><li>脏读</li><li>不可重复读</li><li>幻读</li></ol><h4 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读" aria-hidden="true">#</a> 脏读</h4><p>读到其他事务未提交的数据</p><p><img src="https://s2.loli.net/2023/10/18/ByWeZt3jqHQl86L.png" alt="image-20220504130636522"></p><h4 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读" aria-hidden="true">#</a> 不可重复读</h4><p>读到其他事务已提交的数据</p><p>（更新或删除算不可重复读）</p><p><img src="https://s2.loli.net/2023/10/18/DCJQLbzH7TXOdhf.png" alt="image-20220504130709530"></p><h4 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读" aria-hidden="true">#</a> 幻读</h4><p>读到其他事务已提交的数据</p><p>（插入才可能算幻读）</p><p><img src="https://s2.loli.net/2023/10/18/iL3QDPUZnwNSARt.png" alt="image-20220504130813340"></p><h2 id="事务隔离" tabindex="-1"><a class="header-anchor" href="#事务隔离" aria-hidden="true">#</a> 事务隔离</h2><h4 id="事务特征-隔离级别" tabindex="-1"><a class="header-anchor" href="#事务特征-隔离级别" aria-hidden="true">#</a> 事务特征，隔离级别</h4><p><img src="https://s2.loli.net/2023/10/18/4f8A9cxpKskTj1y.png" alt="事务特征，隔离级别"></p><h3 id="事务的四种隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的四种隔离级别" aria-hidden="true">#</a> 事务的四种隔离级别</h3><p><img src="https://s2.loli.net/2023/10/18/KTXocLaI3kbzVCq.png" alt="image-20220504131214939"></p><h4 id="read-uncommitted-不用" tabindex="-1"><a class="header-anchor" href="#read-uncommitted-不用" aria-hidden="true">#</a> Read Uncommitted (不用)</h4><p>三大问题一个都没解决，属于最低级别的隔离</p><h4 id="read-committed" tabindex="-1"><a class="header-anchor" href="#read-committed" aria-hidden="true">#</a> Read Committed</h4><p>读已提交，解决脏读问题</p><h4 id="repeatable-read" tabindex="-1"><a class="header-anchor" href="#repeatable-read" aria-hidden="true">#</a> Repeatable Read</h4><p>可重复读，解决脏读和不可重复读，没解决幻读</p><h4 id="serializable-不用" tabindex="-1"><a class="header-anchor" href="#serializable-不用" aria-hidden="true">#</a> Serializable (不用)</h4><p>可以解决问题，但是太慢了</p><h3 id="mysql-innodb对事务隔离级别的支持程度" tabindex="-1"><a class="header-anchor" href="#mysql-innodb对事务隔离级别的支持程度" aria-hidden="true">#</a> MySQL InnoDB对事务隔离级别的支持程度</h3><p><img src="https://s2.loli.net/2023/10/18/7wqsktpzaZ6rPdn.png" alt="image-20220504131757806"></p><p>事务结束 (回滚 / 提交) 锁就会释放</p><p><img src="https://s2.loli.net/2023/10/18/3yDhbNXFQsPVB6U.png" alt="image-20220504133001595"></p><p><img src="https://s2.loli.net/2023/10/18/CQine4E6cvmzKsL.png" alt="image-20220504133121210"></p><h3 id="行锁" tabindex="-1"><a class="header-anchor" href="#行锁" aria-hidden="true">#</a> 行锁</h3><h4 id="共享锁" tabindex="-1"><a class="header-anchor" href="#共享锁" aria-hidden="true">#</a> 共享锁</h4><p><img src="https://s2.loli.net/2023/10/18/Xo1nEJWh2cgANHV.png" alt="image-20220504133257927"></p><h4 id="排他锁" tabindex="-1"><a class="header-anchor" href="#排他锁" aria-hidden="true">#</a> 排他锁</h4><p><img src="https://s2.loli.net/2023/10/18/SJ7qNm6r9Vw3LUz.png" alt="image-20220504133737501"></p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h4 id="意向共享锁-意向排它锁" tabindex="-1"><a class="header-anchor" href="#意向共享锁-意向排它锁" aria-hidden="true">#</a> 意向共享锁 / 意向排它锁</h4><p>这种意向锁是不能手动加的，是数据库自己在我们要上锁的时候给的一个额外的标志</p><p><img src="https://s2.loli.net/2023/10/18/GDhtFguI5mL76a1.png" alt="image-20220504134510740"></p><ul><li>一个事务成功地给一张表加上表锁的前提：</li></ul><p>​ 没有其他任何事务已经锁定了这张表的任何一行数据</p><ul><li>怎么知道有没有其他事务锁定数据呢？</li></ul><p>​ 用全表扫描来检测，但是效率低，而且如果扫描过的数据又被加锁了，再加表锁就不成功了</p><ul><li>引入意向锁目的：</li></ul><p>​ 提高加表锁的效率，类似于一个标识，可以快速判断有没有其他任何事务已经锁定了这张表的任何一行数据</p><p>​ 可以理解成火车上卫生间的指示灯，可以直观看到有没有人在里面，就不用每次都跑过去看了</p><h3 id="锁的原理" tabindex="-1"><a class="header-anchor" href="#锁的原理" aria-hidden="true">#</a> 锁的原理</h3><h4 id="锁的本质" tabindex="-1"><a class="header-anchor" href="#锁的本质" aria-hidden="true">#</a> 锁的本质</h4><p><u>锁住的是索引项</u></p><ul><li><p>有几种情况</p><ul><li><p>不使用索引 会锁表</p></li><li><p>主键索引 primary key 会锁主键</p></li><li><p>唯一索引 unique</p></li></ul></li></ul><h4 id="索引本质" tabindex="-1"><a class="header-anchor" href="#索引本质" aria-hidden="true">#</a> 索引本质</h4><p>加快查询速度</p><p>索引的逻辑顺序 == 数据的物理顺序</p><ul><li>举例</li></ul><p>​ 字典 -- 按拼音排序</p><p>​ 可以通过拼音，笔画，偏旁部首来查询，这里拼音就是聚集索引，其他两个是非聚集索引</p><h5 id="一些问题" tabindex="-1"><a class="header-anchor" href="#一些问题" aria-hidden="true">#</a> 一些问题</h5><h4 id="_1-为什么没索引加锁会锁表" tabindex="-1"><a class="header-anchor" href="#_1-为什么没索引加锁会锁表" aria-hidden="true">#</a> ① 为什么没索引加锁会锁表？</h4><p>一张表一定会有聚集索引来决定数据存放数据</p><ul><li><p>有三种聚集索引：</p><ul><li><p>primary key</p></li><li><p>unique -- not null</p></li><li><p>_rowid ( 隐藏字段 ) (表中若没其他索引，则会用这个隐藏的)</p><ul><li>还有隐藏两个： tx_id 事务， roll_ptr 回滚指针</li></ul></li></ul></li></ul><p>为何没索引加锁会锁表？</p><p>​ 因为默认走隐藏_rowid了，会锁表里每一行的rowid，就像锁表一样</p><h5 id="_2-为什么给-name-加锁会锁住-id" tabindex="-1"><a class="header-anchor" href="#_2-为什么给-name-加锁会锁住-id" aria-hidden="true">#</a> ② 为什么给 name 加锁会锁住 id</h5><p>（表中两列：name - 唯一索引， id - 主键索引）</p>`,644),r=t(`<p><img src="https://s2.loli.net/2023/10/18/2Bemi1QxcndWND8.png" alt="image-20220504143343229"></p><p>为什么给 name 加锁会锁住 id ：</p><p>​ 因为用二级索引找到主键，去主键的树里找到内容，所以会关联起来（回表）</p><h2 id="区间定义" tabindex="-1"><a class="header-anchor" href="#区间定义" aria-hidden="true">#</a> 区间定义</h2><p><img src="https://s2.loli.net/2023/10/18/2kInLB6oYWduJ9g.png" alt="image-20220504161642711"></p><h3 id="记录锁" tabindex="-1"><a class="header-anchor" href="#记录锁" aria-hidden="true">#</a> 记录锁</h3><p><img src="https://s2.loli.net/2023/10/18/bBATIKajmOCoNXD.png" alt="image-20220504161837681"></p><h3 id="间隙锁" tabindex="-1"><a class="header-anchor" href="#间隙锁" aria-hidden="true">#</a> 间隙锁</h3><p>间隙锁可以锁一些值区间，可以限制插入</p><p><img src="https://s2.loli.net/2023/10/18/QEUo2yGpjwiq9fM.png" alt="image-20220504161930088"></p><h3 id="临键锁" tabindex="-1"><a class="header-anchor" href="#临键锁" aria-hidden="true">#</a> 临键锁</h3><p>![image-20220504162326699](../Second semester/Python/image-20220504162326699.png)</p><h1 id="数据库存储文件" tabindex="-1"><a class="header-anchor" href="#数据库存储文件" aria-hidden="true">#</a> 数据库存储文件</h1><h2 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb" aria-hidden="true">#</a> InnoDB</h2><h3 id="_5-x版本" tabindex="-1"><a class="header-anchor" href="#_5-x版本" aria-hidden="true">#</a> 5.x版本</h3><h4 id="保存表结构" tabindex="-1"><a class="header-anchor" href="#保存表结构" aria-hidden="true">#</a> 保存表结构</h4><p>为了保存表结构， <strong>InnoDB</strong> 在<code> 数据目录</code> 下对应的<code>数据库子目录下</code>创建了一个专门用于 <strong>描述表结构的文件</strong> ，文件名是<code>xxx.frm</code></p><p><code>.frm文件</code>的格式在不同的平台上都是相同的。这个后缀名为<code>.frm</code>是以 <strong>二进制格式</strong> 存储的</p><h4 id="保存数据" tabindex="-1"><a class="header-anchor" href="#保存数据" aria-hidden="true">#</a> 保存数据</h4><h5 id="_5-6-6以前-系统表空间" tabindex="-1"><a class="header-anchor" href="#_5-6-6以前-系统表空间" aria-hidden="true">#</a> 5.6.6以前-系统表空间</h5><p>默认情况下，<strong>InnoDB</strong>会在数据目录下创建一个名为<code>ibdata1</code>、大小为 12M 的文件，这个文件就是对应的 <code>系统表空间</code> 在文件系统上的表示。怎么才12M？</p><p>注意这个文件是 <code>自扩展文件</code> ，当不够用的时候它会自己增加文件大小。</p><h5 id="_5-6-6以及之后的版本-独立表空间" tabindex="-1"><a class="header-anchor" href="#_5-6-6以及之后的版本-独立表空间" aria-hidden="true">#</a> 5.6.6以及之后的版本-独立表空间</h5><p><strong>在MySQL5.6.6以及之后的版本中</strong>，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为 每一个表建立一个独立表空间 ，也就是说我们创建了多少个表，就有多少个独立表空间。使用 <strong>独立表空间</strong> 来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同，只不过添加了一个<code> .ibd</code> 的扩展名而已，所以完整的文件名称长这样：</p><h4 id="保存数据库相关配置" tabindex="-1"><a class="header-anchor" href="#保存数据库相关配置" aria-hidden="true">#</a> 保存数据库相关配置</h4><p>MySQL5.7 中会在data/a的目录下生成 <code>db.opt</code> 文件用于保存数据库的相关配置。比如：字符集、比较规则。而MySQL8.0不再提供db.opt文件。</p><h3 id="_8-版本" tabindex="-1"><a class="header-anchor" href="#_8-版本" aria-hidden="true">#</a> 8+版本</h3><p>数据库配置、结构、数据全部合并在<code>.idb</code>文件中</p><h2 id="myisam" tabindex="-1"><a class="header-anchor" href="#myisam" aria-hidden="true">#</a> MyISAM</h2><h3 id="存表结构" tabindex="-1"><a class="header-anchor" href="#存表结构" aria-hidden="true">#</a> 存表结构</h3><p>在存储表结构方面， MyISAM 和 InnoDB 一样，也是在 数据目录 下对应的数据库子目录下创建了一个专门用于描述表结构的文件：<code>表名.frm</code></p><h3 id="存数据和索引" tabindex="-1"><a class="header-anchor" href="#存数据和索引" aria-hidden="true">#</a> 存数据和索引</h3><p>在MyISAM中的索引全部都是 <code>二级索引 </code>，该存储引擎的 <strong>数据和索引是分开存放</strong> 的。所以在文件系统中也是使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>创建一个名为 test 的表，使用 MyISAM 存储引擎
会对应创建下面三个文件

test.frm 存储表结构
test.MYD 存储数据 (MYData)
test.MYI 存储索引 (MYIndex)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h2><p>举例： <code>数据库a</code> ， <code>表b</code> 。</p><h3 id="innodb-1" tabindex="-1"><a class="header-anchor" href="#innodb-1" aria-hidden="true">#</a> InnoDB</h3><p>如果表b采用 <code>InnoDB </code>，data\\a中会产生1个或者2个文件：</p><ul><li><code>b.frm</code> ：描述表结构文件，字段长度等</li><li>如果采用 <code>系统表空间</code> 模式的，数据信息和索引信息都存储在<code>ibdata1</code> 中</li><li>如果采用 <code>独立表空间</code> 存储模式，data\\a中还会产生 <code>b.ibd </code>文件（存储数据信息和索引信息）</li></ul><p>此外：</p><p>① <strong>MySQL5.7</strong> 中会在data/a的目录下生成 <code>db.opt</code> 文件用于保存数据库的相关配置。比如：字符集、比较</p><p>规则。而<strong>MySQL8.0不再提供db.opt文件</strong>。</p><p>② <strong>MySQL8.0中不再单独提供b.frm</strong>，而是<strong>合并在<code>b.ibd文件</code>中</strong>。</p><h3 id="myisam-1" tabindex="-1"><a class="header-anchor" href="#myisam-1" aria-hidden="true">#</a> MyISAM</h3><p>如果表b采用 <code>MyISAM </code>，data\\a中会产生3个文件：</p><ul><li>不同 MySQL 版本： <ul><li><strong>MySQL5.7</strong> 中： b<code>.frm</code> ：描述表结构文件，字段长度等。</li><li><strong>MySQL8.0</strong> 中 b.xxx<code>.sdi </code>：描述表结构文件，字段长度等</li></ul></li><li><code>b.MYD</code> (MYData)：<strong>数据信息</strong>文件，存储数据信息(如果采用独立表存储模式)</li><li><code>b.MYI</code> (MYIndex)：存放<strong>索引</strong>信息文件</li></ul><h1 id="mysql逻辑架构" tabindex="-1"><a class="header-anchor" href="#mysql逻辑架构" aria-hidden="true">#</a> MySQL逻辑架构</h1><h2 id="一、逻辑架构" tabindex="-1"><a class="header-anchor" href="#一、逻辑架构" aria-hidden="true">#</a> 一、逻辑架构</h2><h3 id="_1-1-三层总览" tabindex="-1"><a class="header-anchor" href="#_1-1-三层总览" aria-hidden="true">#</a> 1.1_三层总览</h3><p><img src="https://s2.loli.net/2023/10/18/vtTEZNrS2OhjgCR.png" alt="image-20230202152547086"></p><p><img src="https://s2.loli.net/2023/10/18/MPr7S9zjNVFAJcI.png" alt="image-20230202152554265"></p><h3 id="第1层-连接层" tabindex="-1"><a class="header-anchor" href="#第1层-连接层" aria-hidden="true">#</a> <strong>第</strong>1层：连接层</h3><blockquote><p>概述：第一层为连接层，大概执行过程是：</p><ol><li>MySQL服务器收到客户端的 TCP 连接请求</li><li>分配从线程池分配一个线程与这个客户端交互</li><li>连接成功后，对账号密码进行校验</li><li>校验无误后从权限表查出账号对应的权限与之关联</li></ol></blockquote><ol><li>系统（客户端）访问 <code>MySQL</code> 服务器前，做的第一件事就是建立 <code>TCP</code> 连接。</li><li>经过三次握手建立连接成功后， MySQL 服务器对 <code>TCP</code> 传输过来的账号密码做<strong>身份认证、权限获取</strong>。 <ol><li><strong>用户名或密码不对</strong>，会收到一个<code>Access denied for user</code>错误，客户端程序结束执行</li><li><strong>用户名密码认证通过</strong>，会从权限表查出<strong>账号拥有的权限</strong>与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</li></ol></li><li><code>TCP</code> 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</li></ol><h3 id="第2层-sql层-服务层" tabindex="-1"><a class="header-anchor" href="#第2层-sql层-服务层" aria-hidden="true">#</a> 第2层：SQL层（服务层）</h3><blockquote><p>概述：第二层为服务层，大概执行流程是：</p><ol><li>SQL语句首先由 <code>SQL Interface</code> 接收，传给 解析器</li><li><code>解析器</code>对SQL的语法语义进行检查，无误后创建<code>语法树</code>并校验权限</li><li>在查询之前会经过<code>查询优化器</code>，通过查询优化器来确定最优SQL执行路径并调用<code>执行器</code>执行SQL并返回结果</li></ol></blockquote><h4 id="sql-interface-sql接口" tabindex="-1"><a class="header-anchor" href="#sql-interface-sql接口" aria-hidden="true">#</a> <strong>SQL Interface: SQL接口</strong></h4><ul><li>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT ... FROM就是调用SQL Interface</li><li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口</li></ul><h4 id="parser-解析器" tabindex="-1"><a class="header-anchor" href="#parser-解析器" aria-hidden="true">#</a> <strong>Parser:</strong> <strong>解析器</strong></h4><ul><li>在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个SQL语句是不合理的。</li><li>在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建 <strong>语法树</strong> ，并根据数据字典丰富查询语法树，会 <strong>验证该客户端是否具有执行该查询的权限</strong> 。创建好语法树后，MySQL还会对SQl查询进行语法上的优化，进行查询重写。</li></ul><h4 id="optimizer-查询优化器" tabindex="-1"><a class="header-anchor" href="#optimizer-查询优化器" aria-hidden="true">#</a> <strong>Optimizer:</strong> <strong>查询优化器</strong></h4><p>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个<code>执行计划</code> 。</p><p>这个执行计划指明：</p><ol><li>应该使用哪些<strong>索引</strong> 进行查询（全表检索还是使用索引检索）</li><li>表之间的连接顺序如何</li><li>最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。</li></ol><p>它使用<code>“ 选取-投影-连接 ”</code>策略进行查询。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个SELECT查询先根据WHERE语句进行 <strong>选取</strong> ，而不是将表全部查询出来以后再进行gender过滤。 这个SELECT查询先根据id和name进行属性 <strong>投影</strong> ，而不是将属性全部取出以后再进行过滤，将这两个查询条件 <strong>连接</strong> 起来生成最终查询结果。</p><h4 id="caches-buffers-查询缓存组件" tabindex="-1"><a class="header-anchor" href="#caches-buffers-查询缓存组件" aria-hidden="true">#</a> <strong>Caches &amp; Buffers： 查询缓存组件</strong></h4><blockquote><p>因为缓存是将 SQL 语句的<strong>字符串当做key</strong>缓存起来的，如果两次 SQL语句有一点点不一样，都会导致缓存无法命中，因为命中率很低所以8.0开始被移除了</p></blockquote><ul><li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过程了，直接将结果反馈给客户端。</li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li><li>这个查询缓存可以在<code> 不同客户端之间共享</code> 。</li><li>从MySQL 5.7.20开始，<strong>不推荐使用查询缓存，并在 MySQL 8.0中删除</strong> 。</li></ul><h3 id="第3层-存储引擎层" tabindex="-1"><a class="header-anchor" href="#第3层-存储引擎层" aria-hidden="true">#</a> 第3层：存储引擎层</h3><p>存储引擎和数据库文件打交道</p><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><p><img src="https://s2.loli.net/2023/10/18/xHvJQbD1CoPYlkL.png" alt="image-20230202154422883"></p><h2 id="二、sql-执行过程" tabindex="-1"><a class="header-anchor" href="#二、sql-执行过程" aria-hidden="true">#</a> 二、SQL 执行过程</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><blockquote><p><code>SQL语句→查询缓存→解析器→优化器→执行器</code></p><p><img src="https://s2.loli.net/2023/10/18/paeS9mj3tP6HzhQ.png" alt="image-20230202155701454"></p></blockquote><p><img src="https://s2.loli.net/2023/10/18/bQqphwTs4uWdjFA.png" alt="image-20230202154539467"></p><h3 id="解析器" tabindex="-1"><a class="header-anchor" href="#解析器" aria-hidden="true">#</a> 解析器</h3><blockquote><p>在解析器中对 SQL 语句进行<strong>语法分析、语义分析</strong>。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id <span class="token keyword">from</span> t
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分析器先做<code>“ 词法分析 ”</code>。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。比如： MySQL 从输入的&quot;<strong>select</strong>&quot;这个关键字识别出来，这是一个查询语句。它也要把字符串“t”识别成“表名 t”，把字符串“id”识别成“列 id”。</p><p>接着，要做<code>“ 语法分析 ”</code>。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输入的这个 SQL 语句是否 满足 MySQL 语法 。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> department_id<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> employees <span class="token keyword">group</span> <span class="token keyword">by</span> department_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果SQL语句正确，则会生成一个这样的语法树：</p><p><img src="https://s2.loli.net/2023/10/18/cxYwHCgDkTSrqGn.png" alt="image-20230202154918177"></p><h3 id="优化器" tabindex="-1"><a class="header-anchor" href="#优化器" aria-hidden="true">#</a> 优化器</h3><p>在优化器中会确定 SQL 语句的<strong>执行路径</strong>，比如是根据 <strong>全表检索</strong> ，还是根据 <strong>索引检索</strong> 等。</p><p>举例：如下语句是执行两个表的 join：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test1 <span class="token keyword">join</span> test2 <span class="token keyword">using</span><span class="token punctuation">(</span>ID<span class="token punctuation">)</span>
<span class="token keyword">where</span> test1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;zhangwei&#39;</span> <span class="token operator">and</span> test2<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;mysql高级课程&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方案1：可以先从表 test1 里面取出 <code>name=&#39;zhangwei&#39;</code>的记录的 ID 值，再根据 ID 值关联到表 test2，再判断 test2 里面 name的值是否等于 &#39;mysql高级课程&#39;。</li><li>方案2：可以先从表 test2 里面取出<code> name=&#39;mysql高级课程&#39;</code> 的记录的 ID 值，再根据 ID 值关联到 test1，再判断 test1 里面 name的值是否等于 zhangwei。</li></ul><p>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一方案。优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入<strong>执行器阶段</strong>。</p><h3 id="执行器" tabindex="-1"><a class="header-anchor" href="#执行器" aria-hidden="true">#</a> 执行器</h3><p>到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了 <code>执行器阶段 </code>。</p><p><img src="https://s2.loli.net/2023/10/18/8vU3hWMtOXSCQs6.png" alt="image-20230202155505144"></p><p>在执行之前需要判断该用户<code>是否具备权限</code> 。如果没有，就会返回权限错误。</p><p>如果具备权限，就执行 SQL查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p><h1 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a> 存储引擎</h1><p>MySQL从3.23.34a开始就包含InnoDB存储引擎。 <code>大于等于5.5</code>之后，<strong>默认采用</strong><code>InnoDB引擎 </code>。</p><h2 id="innodb-2" tabindex="-1"><a class="header-anchor" href="#innodb-2" aria-hidden="true">#</a> InnoDB</h2><h3 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2" aria-hidden="true">#</a> 优点</h3><p>支持事务、行锁、外键</p><p>InnoDB是为了处理巨大数据量的最大性能设计的</p><h3 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2" aria-hidden="true">#</a> 缺点</h3><p>写的效率比MyISAM差</p><p>会占用更多的内存（数据和索引都存在<code>.idb</code>文件里），不仅缓存索引还缓存了数据</p><h2 id="myisam-2" tabindex="-1"><a class="header-anchor" href="#myisam-2" aria-hidden="true">#</a> MyISAM</h2><h3 id="优点-3" tabindex="-1"><a class="header-anchor" href="#优点-3" aria-hidden="true">#</a> 优点</h3><p>访问快</p><p>一般用于 <strong>对事务要求不高</strong> 或者 <strong>查询、插入多</strong> 的情况</p><p>对数据统计有额外的常数存储，所以<code>count(*)</code>效率很高</p><p>只缓存索引不缓存数据，对内存要求没有InnoDB高</p><h3 id="缺点-3" tabindex="-1"><a class="header-anchor" href="#缺点-3" aria-hidden="true">#</a> 缺点</h3><p>不支持事务、行级锁、外键 ，有一个毫无疑问的缺陷就是 <strong>崩溃后无法安全恢复</strong> 。</p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h2><table><thead><tr><th></th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，不适合高并发</td><td>行锁，适合高并发</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>缓存索引和数据，对内存要求高</td></tr><tr><td>自带系统表使用</td><td>Y</td><td>N</td></tr><tr><td>关注点</td><td>性能：节省资源、消耗少、简单业务</td><td>事务：并发写、事务、更大资源</td></tr><tr><td>默认安装</td><td>Y</td><td>Y</td></tr><tr><td>默认使用</td><td>N</td><td>Y</td></tr></tbody></table><h1 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h1><h2 id="sql执行顺序" tabindex="-1"><a class="header-anchor" href="#sql执行顺序" aria-hidden="true">#</a> SQL执行顺序</h2><p>以SQL99语法为例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 第二执行部分</span>
<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 第一执行部分</span>
<span class="token keyword">from</span> xxx <span class="token punctuation">(</span><span class="token keyword">left</span> <span class="token operator">/</span> <span class="token keyword">right</span><span class="token punctuation">)</span> <span class="token keyword">join</span> xxx 
<span class="token keyword">on</span> 多表连接条件
<span class="token punctuation">(</span><span class="token keyword">left</span> <span class="token operator">/</span> <span class="token keyword">right</span><span class="token punctuation">)</span> <span class="token keyword">join</span> xxx 
<span class="token keyword">on</span> 多表连接条件
<span class="token keyword">where</span> 不包含聚合函数的过滤条件
<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">having</span> 包含聚合函数的过滤条件

<span class="token comment"># 第三执行部分</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">ASC</span> <span class="token operator">/</span> <span class="token keyword">DESC</span><span class="token punctuation">)</span>
<span class="token keyword">limit</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行顺序大致为：</p><ol><li>第一部分 <ol><li>FROM 表</li><li>ON</li><li>(left / right) join</li><li>where <ul><li>不包含聚合函数的过滤条件写这里比写having里面<strong>效率高</strong></li></ul></li><li>group by</li><li>having</li></ol></li><li>第二部分 <ol><li>select</li><li>distinct</li></ol></li><li>第三部分 <ol><li>order by</li><li>limit</li></ol></li></ol><p>SQL 的执行原理</p><p>SELECT 是先执行 <strong>FROM</strong> 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：</p><ol><li>首先先通过 CROSS <strong>JOIN</strong> 求笛卡尔积，相当于得到<code>虚拟表 vt（virtual table）1-1</code>；</li><li>通过 <strong>ON</strong> 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 <code>vt1-2</code>；</li><li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 vt1-2 的基础上增加外部行，得到虚拟表 <code>vt1-3</code>。</li></ol><p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。</p><p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 vt1 ，就可以在此基础上再进行 WHERE 阶段 。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 <code>vt2</code> 。</p><p>然后进入第三步和第四步，也就是 <strong>GROUP</strong> 和 <strong>HAVING</strong> 阶段 。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表 <code>vt3</code> 和 <code>vt4</code> 。</p><p>当完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 <strong>SELECT</strong> 和 <strong>DISTINCT</strong>阶段 。</p><ul><li>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表<code>vt5-1</code> 和<code> vt5-2</code> 。</li></ul><p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 <strong>ORDER BY</strong> 阶段 ，得到虚拟表<code>vt6</code> 。</p><p>最后在 vt6 的基础上，取出指定行的记录，也就是 <strong>LIMIT</strong> 阶段 ，得到最终的结果，对应的是虚拟表<code>vt7</code> 。</p><p>当然在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。</p><p>同时因为 SQL 是一门类似英语的结构化查询语言，所以在写 SELECT 语句的时候，还要注意相应的关键字顺序，所谓底层运行的原理，就是SQL的执行顺序。</p><h2 id="ddl-和-dml-区别" tabindex="-1"><a class="header-anchor" href="#ddl-和-dml-区别" aria-hidden="true">#</a> DDL 和 DML 区别</h2><ul><li>DDL的操作一旦执行，就<strong>不可回滚</strong>。指令<code>SET autocommit = FALSE</code>对DDL操作<strong>失效</strong>。(因为在执行完DDL操作之后，一定会（自动）执行一次COMMIT。而此COMMIT操作<strong>不受SET autocommit = FALSE影响</strong>的。)</li><li>DML的操作<strong>默认情况</strong>，一旦执行，也是<strong>不可回滚</strong>的。但是，如果在执行DML之前，执行了 <code>SET autocommit = FALSE</code>，则执行的DML操作就<strong>可以实现回滚</strong>。</li></ul><h2 id="mysql8新特性-ddl原子化" tabindex="-1"><a class="header-anchor" href="#mysql8新特性-ddl原子化" aria-hidden="true">#</a> MySQL8新特性：DDL原子化</h2><p>在MySQL 8.0版本中，InnoDB表的<strong>DDL支持事务完整性</strong>，即 DDL操作要么成功要么回滚 。</p><p>DDL操作回滚日志写入到data dictionary数据字典表mysql.innodb_ddl_log（该表是隐藏的表，通过show tables无法看到）中，用于回滚操作。通过设置参数，可将DDL操作日志打印输出到MySQL错误日志中。</p><h2 id="mysql8新特性-计算列" tabindex="-1"><a class="header-anchor" href="#mysql8新特性-计算列" aria-hidden="true">#</a> MySQL8新特性：计算列</h2><h3 id="什么叫计算列呢" tabindex="-1"><a class="header-anchor" href="#什么叫计算列呢" aria-hidden="true">#</a> 什么叫计算列呢</h3><p>简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为1、b列值为2，c列不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。</p><p>在MySQL 8.0中，<code>CREATE TABLE</code> 和 <code>ALTER TABLE</code> 中都支持增加计算列。</p><h3 id="以create-table为例" tabindex="-1"><a class="header-anchor" href="#以create-table为例" aria-hidden="true">#</a> 以CREATE TABLE为例：</h3><p>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列，用于计算a+b的值。 创建测试表tb1，语句如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tb1<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span><span class="token punctuation">,</span>
    a <span class="token keyword">INT</span><span class="token punctuation">,</span>
    b <span class="token keyword">INT</span><span class="token punctuation">,</span>
    c <span class="token keyword">INT</span> GENERATED ALWAYS <span class="token keyword">AS</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> VIRTUAL
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后只要插入或更新ab列，c就会自动计算</p><h2 id="阿里巴巴开发规范" tabindex="-1"><a class="header-anchor" href="#阿里巴巴开发规范" aria-hidden="true">#</a> 阿里巴巴开发规范</h2><ul><li>【 <strong>强制</strong> 】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。 <ul><li>正例：aliyun_admin，rdc_config，level3_name</li><li>反例：AliyunAdmin，rdcConfig，level_3_name</li></ul></li><li>【 <strong>强制</strong> 】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</li><li>【 <strong>强制</strong> 】表必备三字段：<code>id</code>,<code> gmt_create,</code> <code>gmt_modified</code>。 <ul><li>说明：其中 id 必为主键，类型为BIGINT UNSIGNED、单表时自增、步长为 1。</li><li>gmt_create,gmt_modified 的类型均为 DATETIME 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新</li></ul></li><li>【 <strong>推荐</strong> 】表的命名最好是遵循 “业务名称_表的作用”。 <ul><li>正例：alipay_task 、 force_project、 trade_config</li></ul></li><li>【 <strong>推荐</strong> 】库名与应用名称尽量一致。</li><li>【<strong>参考</strong>】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。 <ul><li>正例：无符号值可以避免误存负数，且扩大了表示范围。</li></ul></li></ul><p><img src="https://s2.loli.net/2023/10/18/G6w8Murl2TVyjzb.png" alt="image-20230128171021504"></p>`,150);function u(h,k){const n=i("font");return d(),l("div",null,[c,a(n,{color:"red"},{default:s(()=>[e("在InnoDB 中主键索引是**聚集索引**，其他的是"),a(n,{color:"red"},{default:s(()=>[e("**二级索引**")]),_:1})]),_:1}),r])}const b=o(p,[["render",u],["__file","MySQL.html.vue"]]);export{b as default};
