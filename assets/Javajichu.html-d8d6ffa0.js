import{_ as a,o as n,c as e,e as s}from"./app-55752f72.js";const i={},t=s(`<h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><p>在JDK当中双引号括起来的字符串，例如：&quot;abc&quot; &quot;def&quot;都是直接存储在<code>“方法区”</code>的<code>“字符串常量池”</code>当中的。</p><p>在Java中有双引号括起来的一定是String对象，一定会在字符串常量池中有一个空间</p><p>==注意：==垃圾回收器是不会回收常量的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 在栈中有个s变量，字符串常量池有一个&quot;a&quot;字符串对象</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 和上面这个区别是在堆中还new了一个String对象，存的引用指向方法区中的&quot;a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer" aria-hidden="true">#</a> StringBuffer</h2><h3 id="频繁拼接字符串问题" tabindex="-1"><a class="header-anchor" href="#频繁拼接字符串问题" aria-hidden="true">#</a> 频繁拼接字符串问题</h3><p>因为Java中的字符串是不可变的，每一次拼接都会产生新字符串。这样会占用大量的方法区内存。造成内存空间的浪费。</p><h3 id="底层" tabindex="-1"><a class="header-anchor" href="#底层" aria-hidden="true">#</a> 底层</h3><ul><li><code>String</code> 的底层是个被<code>final</code>修饰的byte数组，因此当指定了它的引用之后就不能再指向其他数组了</li><li><code>StringBuffer</code> 的底层是没有被final修饰的byte数组，在默认初始化的时候会给16的初始长度，如果长度不够了会自动调用<code>Arrays.copyOf</code>（<code>System.arraycopy</code>）进行数组拷贝</li></ul><h3 id="优化频繁拼接字符串问题" tabindex="-1"><a class="header-anchor" href="#优化频繁拼接字符串问题" aria-hidden="true">#</a> 优化频繁拼接字符串问题</h3><p>建议使用JDK自带的：</p><ul><li><pre><code> \`java.lang.StringBuffer\`
</code></pre></li><li><pre><code> \`java.lang.StringBuilder\`
</code></pre></li></ul><h3 id="如何优化它们的性能" tabindex="-1"><a class="header-anchor" href="#如何优化它们的性能" aria-hidden="true">#</a> 如何优化它们的性能？</h3><p><strong>关键点：给一个合适的初始化容量。可以提高程序的执行效率。</strong></p><ul><li><p>在创建<code>StringBuffer</code>的时候尽可能给定一个初始化容量。</p></li><li><p>最好减少底层数组的扩容次数。预估计一下，给一个大一些初始化容量。</p></li></ul><h3 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> ==面试题==</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、面试题：String为什么是不可变的？
    我看过源代码，String类中有一个byte[]数组，这个byte[]数组采用了final修饰，
    因为数组一旦创建长度不可变。并且被final修饰的引用一旦指向某个对象之后，不
    可再指向其它对象，所以String是不可变的！
        &quot;abc&quot; 无法变成 &quot;abcd&quot;

2、StringBuilder/StringBuffer为什么是可变的呢？
    我看过源代码，StringBuffer/StringBuilder内部实际上是一个byte[]数组，
    这个byte[]数组没有被final修饰，StringBuffer/StringBuilder的初始化
    容量我记得应该是16，当存满之后会进行扩容，底层调用了数组拷贝的方法
    System.arraycopy()...是这样扩容的。所以StringBuilder/StringBuffer
    适合于使用字符串的频繁拼接操作。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>==注意==</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
s <span class="token operator">=</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串的“不可变”，说的不是s的引用不能指向其他字符串！而是因为String底层的byte数组是final修饰的，这个byte数组</p>`,21),r=[t];function d(c,l){return n(),e("div",null,r)}const u=a(i,[["render",d],["__file","Javajichu.html.vue"]]);export{u as default};
