import{_ as a,o as n,c as s,e}from"./app-55752f72.js";const t={},i=e(`<h2 id="微服务架构" tabindex="-1"><a class="header-anchor" href="#微服务架构" aria-hidden="true">#</a> 微服务架构</h2><h3 id="架构演化" tabindex="-1"><a class="header-anchor" href="#架构演化" aria-hidden="true">#</a> 架构演化</h3><p>软件系统架构大致经历了：<code>单体应用架构—&gt;垂直应用架构—&gt;分布式架构—&gt;SOA架构—&gt;微服务架构的演变</code></p><ol><li>单体应用架构： <ul><li>一个项目一个tomcat。</li><li>优点：简单维护简单。</li><li>缺点：紧密耦合容错低，扩展性差，<strong>不适合大项目</strong>。</li></ul></li><li>垂直应用架构： <ul><li>对单体应用架构拆分，多个项目多个tomcat。</li><li>优点：可以针对模块进行集群扩展，一个模块的问题不会影响另一个模块</li><li>缺点：各系统相互独立，会有重复冗余的代码且系统间无法互相调用</li></ul></li><li>分布式架构： <ul><li>对垂直应用架构拆分，把整个系统分为展现层和服务层</li><li>优点：<strong>提高代码复用性</strong></li><li>缺点：系统间耦合度变高，调用关系错综复杂，难以维护</li></ul></li><li>SOA架构（面向服务）： <ul><li>对分布式架构优化，展现层和服务层中间多了个服务治理中心。</li><li>优点：使用注册中心解决了服务间调用关系的自动调节</li><li>缺点：服务间有依赖关系，一但出现问题会引起服务雪崩；服务间调用关系复杂</li></ul></li><li>微服务架构： <ul><li>把SOA架构中的服务层拆分成原子状态。</li><li>优点：服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，<strong>利于扩展</strong></li></ul></li></ol><h3 id="微服务架构的问题以及解决方式" tabindex="-1"><a class="header-anchor" href="#微服务架构的问题以及解决方式" aria-hidden="true">#</a> 微服务架构的问题以及解决方式</h3><p>一旦采用微服务系统架构，就势必会遇到这样几个问题：</p><ul><li>这么多小服务，如何管理他们？(服务治理 注册中心[服务注册 发现 剔除])</li><li>这么多小服务，他们之间如何通讯？(<strong>restful</strong>)</li><li>这么多小服务，客户端怎么访问他们？(网关)</li><li>这么多小服务，一旦出现问题了，应该如何自处理？(容错)</li><li>这么多小服务，一旦出现问题了，应该如何排错？ (链路追踪)</li></ul><h2 id="springcloud-alibaba组件" tabindex="-1"><a class="header-anchor" href="#springcloud-alibaba组件" aria-hidden="true">#</a> SpringCloud Alibaba组件</h2><h3 id="一、nacos" tabindex="-1"><a class="header-anchor" href="#一、nacos" aria-hidden="true">#</a> 一、Nacos</h3><blockquote><p>服务注册与发现、服务剔除</p></blockquote><p>可以将各个微服务自动注册进注册中心，各个服务实例可以通过nacos获取到其他服务的信息，通过这些信息去请求其他服务</p><h4 id="_1-1-nacos对比其他注册中心" tabindex="-1"><a class="header-anchor" href="#_1-1-nacos对比其他注册中心" aria-hidden="true">#</a> 1.1 Nacos对比其他注册中心</h4><p>在Eureka闭源后，Nacos已经成为SpringCloudAlibaba的首选注册中心了</p><p><img src="https://s2.loli.net/2023/10/17/wBLYy73ScJWnuef.png" alt="image-20230228171740576"></p><h4 id="_1-2-核心功能" tabindex="-1"><a class="header-anchor" href="#_1-2-核心功能" aria-hidden="true">#</a> 1.2 核心功能</h4><ol><li><strong>服务注册</strong>：Nacos Client会通过发送REST请求的方式向Nacos Server注册自己的服务，提供自身的元数据，比如ip地址、端口等信息。Nacos Server接收到注册请求后，就会把这些元数据信息存储在一个双层的内存Map中。</li><li><strong>服务心跳</strong>：在服务注册后，Nacos Client会维护一个定时心跳来持续通知Nacos Server，说明服务一直处于可用状态，防止被剔除。默认5s发送一次心跳。</li><li><strong>服务同步</strong>：Nacos Server集群之间会互相同步服务实例，用来保证服务信息的一致性。 leader raft</li><li><strong>服务发现</strong>：服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个REST请求给Nacos Server，获取上面注册的服务清单，并且缓存在Nacos Client本地，同时会在Nacos Client本地开启一个定时任务定时拉取服务端最新的注册表信息更新到本地缓存</li><li><strong>服务健康检查</strong>：Nacos Server会开启一个定时任务用来检查注册服务实例的健康情况，对于超过15s没有收到客户端心跳的实例会将它的healthy属性置为false(客户端服务发现时不会发现)，如果某个实例超过30秒没有收到心跳，直接剔除该实例(被剔除的实例如果恢复发送心跳则会重新注册）</li></ol><h4 id="_1-3-基础用法" tabindex="-1"><a class="header-anchor" href="#_1-3-基础用法" aria-hidden="true">#</a> 1.3 基础用法</h4><h5 id="搭建nacos环境" tabindex="-1"><a class="header-anchor" href="#搭建nacos环境" aria-hidden="true">#</a> 搭建Nacos环境</h5><ol><li>去GitHub上下对应版本的Nacos</li><li>启动服务（默认端口8848，默认账号密码是nacos/nacos）</li></ol><h5 id="将服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#将服务注册到nacos" aria-hidden="true">#</a> 将服务注册到Nacos</h5><ol><li><p>添加依赖</p><ul><li><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--nacos客户端--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>在主类上添加**@EnableDiscoveryClient**注解</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductApplication</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>在application.yml中添加nacos服务的地址</p><ul><li><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="二、ribbon" tabindex="-1"><a class="header-anchor" href="#二、ribbon" aria-hidden="true">#</a> 二、Ribbon</h3><p>Spring Cloud Ribbon 是一个基于 HTTP 和 TCP 的<code>客户端负载均衡工具</code>，它基于 NetflixRibbon 实现。通过 Spring Cloud 的封装，可以轻松地将面向服务的 <strong>REST 模版请求</strong>自动转换成客户端负载均衡的服务调用。</p><h4 id="_2-1-基础用法" tabindex="-1"><a class="header-anchor" href="#_2-1-基础用法" aria-hidden="true">#</a> 2.1 基础用法</h4><h5 id="_1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖" aria-hidden="true">#</a> 1-引入依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-注册resttemplate的时候加上-loadbalanced" tabindex="-1"><a class="header-anchor" href="#_2-注册resttemplate的时候加上-loadbalanced" aria-hidden="true">#</a> 2-注册RestTemplate的时候加上@LoadBalanced</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 加了@LoadBalanced之后，就会被ribbon控制
* <span class="token keyword">@return</span>
*/</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-之后只要是通过这个resttemplate示例发送的请求都会被ribbon接管" tabindex="-1"><a class="header-anchor" href="#_3-之后只要是通过这个resttemplate示例发送的请求都会被ribbon接管" aria-hidden="true">#</a> 3-之后只要是通过这个restTemplate示例发送的请求都会被ribbon接管</h5><h4 id="_2-2-通过配置文件方式修改复杂均衡策略" tabindex="-1"><a class="header-anchor" href="#_2-2-通过配置文件方式修改复杂均衡策略" aria-hidden="true">#</a> 2.2 通过配置文件方式修改复杂均衡策略</h4><p>修改application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">被调用的微服务名</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    指定使用Nacos提供的负载均衡策略（优先调用同一集群的实例，基于随机<span class="token important">&amp;权重）</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、feign" tabindex="-1"><a class="header-anchor" href="#三、feign" aria-hidden="true">#</a> 三、Feign</h3><p>Feign是Spring Cloud提供的一个声明式的<code>伪Http客户端</code>， 它使得<strong>调用远程服务就像调用本地服务一样简单</strong>， 只需要创建一个接口并添加一个注解即可。</p><p>Spring Cloud openfeign对Feign进行了增强，使其支持Spring MVC注解，另外还整合了Ribbon和Nacos，从而使得Feign的使用更加方便，通常提到Feign都指的是<code>openFeign</code></p><p>Nacos很好的兼容了Feign， Feign默认集成了 Ribbon， 所以在Nacos下使用Fegin默认就实现了负载均衡的效果。</p><h4 id="_3-1-基础用法" tabindex="-1"><a class="header-anchor" href="#_3-1-基础用法" aria-hidden="true">#</a> 3.1 基础用法</h4><h5 id="_1-加入fegin的依赖" tabindex="-1"><a class="header-anchor" href="#_1-加入fegin的依赖" aria-hidden="true">#</a> 1 加入Fegin的依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--fegin组件--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-在主类上添加开启feign的注解" tabindex="-1"><a class="header-anchor" href="#_2-在主类上添加开启feign的注解" aria-hidden="true">#</a> 2 在主类上添加开启Feign的注解</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@EnableFeignClients</span><span class="token comment">//开启Feign</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootApplication</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-创建一个service-并使用fegin实现微服务调用" tabindex="-1"><a class="header-anchor" href="#_3-创建一个service-并使用fegin实现微服务调用" aria-hidden="true">#</a> 3 创建一个service， 并使用Fegin实现微服务调用</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;声明调用的提供者的name&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>
<span class="token comment">//指定调用提供者的哪个方法</span>
<span class="token comment">//@FeignClient+@GetMapping 就是一个完整的请求路径 http://声明调用的提供者的name/路径</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/路径&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Product</span> <span class="token function">findByPid</span><span class="token punctuation">(</span>参数和服务原方法参数一致<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-在controller中注入刚才的service-像调用本地方式一样调用远程服务" tabindex="-1"><a class="header-anchor" href="#_4-在controller中注入刚才的service-像调用本地方式一样调用远程服务" aria-hidden="true">#</a> 4 在Controller中注入刚才的Service，像调用本地方式一样调用远程服务</h5><h3 id="四、sentinel" tabindex="-1"><a class="header-anchor" href="#四、sentinel" aria-hidden="true">#</a> 四、<strong>Sentinel</strong></h3><p>Sentinel (分布式系统的流量防卫兵) 是阿里开源的一套用于<strong>服务容错</strong>的综合性解决方案。它以流量为切入点, 从<strong>流量控制、熔断降级、系统负载保护</strong>等多个维度来保护服务的稳定性。</p><h4 id="_4-1-服务容错" tabindex="-1"><a class="header-anchor" href="#_4-1-服务容错" aria-hidden="true">#</a> 4.1 服务容错</h4><p>系统可能出现的问题：</p><ol><li>一个服务的故障导致其它服务的连锁反应（雪崩）</li><li>激增流量击垮服务器</li></ol><p>服务容错的<strong>目的</strong>：</p><ol><li>保护服务自身，不受外界环境（CPU内存等）影响</li><li>保护服务自身，不被上游服务压垮（限流）</li><li>保护服务自身，不被下游服务拖垮（超时、熔断）</li></ol><h4 id="_4-2-常见的容错思路" tabindex="-1"><a class="header-anchor" href="#_4-2-常见的容错思路" aria-hidden="true">#</a> 4.2 <strong>常见的容错思路</strong></h4><p>常见的容错思路有<code>隔离、超时、限流、熔断、降级</code>这几种</p><h5 id="隔离" tabindex="-1"><a class="header-anchor" href="#隔离" aria-hidden="true">#</a> 隔离</h5><p>它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的系统服务。</p><p>常见的隔离方式有：线程池隔离和信号量隔离．</p><h5 id="超时" tabindex="-1"><a class="header-anchor" href="#超时" aria-hidden="true">#</a> 超时</h5><p>在上游服务调用下游服务的时候，设置一个最大响应时间，如果超过这个时间，下游未作出反应，就断开请求，释放掉线程。</p><h5 id="限流" tabindex="-1"><a class="header-anchor" href="#限流" aria-hidden="true">#</a> 限流</h5><p>限流就是限制系统的输入和输出流量已达到保护系统的目的。为了保证系统的稳固运行,一旦达到的需要限制的阈值,就需要限制流量并采取少量措施以完成限制流量的目的</p><h5 id="熔断" tabindex="-1"><a class="header-anchor" href="#熔断" aria-hidden="true">#</a> 熔断</h5><p>在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断</p><h4 id="_4-3-基础用法" tabindex="-1"><a class="header-anchor" href="#_4-3-基础用法" aria-hidden="true">#</a> 4.3 基础用法</h4><h5 id="_1-在pom-xml中加入依赖" tabindex="-1"><a class="header-anchor" href="#_1-在pom-xml中加入依赖" aria-hidden="true">#</a> 1 在pom.xml中加入依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-在github上下载jar包-解压到文件夹" tabindex="-1"><a class="header-anchor" href="#_2-在github上下载jar包-解压到文件夹" aria-hidden="true">#</a> 2 在GitHub上下载jar包，解压到文件夹</h5><h5 id="_3-控制台启动sentinel" tabindex="-1"><a class="header-anchor" href="#_3-控制台启动sentinel" aria-hidden="true">#</a> 3 控制台启动sentinel</h5><p>控制台本身是一个SpringBoot项目，启动的时候可以指定配置参数</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code># 直接使用jar命令启动项目(控制台本身是一个SpringBoot项目)
java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.7.0.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-修改yml" tabindex="-1"><a class="header-anchor" href="#_4-修改yml" aria-hidden="true">#</a> 4 修改yml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>
      <span class="token key atrule">transport</span><span class="token punctuation">:</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9999</span> <span class="token comment">#跟控制台交流的端口,随意指定一个未使用的端口即可</span>
          <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span> <span class="token comment"># 指定控制台服务的地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-通过浏览器访问sentinel" tabindex="-1"><a class="header-anchor" href="#_5-通过浏览器访问sentinel" aria-hidden="true">#</a> 5 通过浏览器访问sentinel</h5><p>默认用户名密码是 sentinel/sentinel</p><h3 id="五、gateway" tabindex="-1"><a class="header-anchor" href="#五、gateway" aria-hidden="true">#</a> 五、<strong>Gateway</strong></h3><h4 id="_5-1-概述" tabindex="-1"><a class="header-anchor" href="#_5-1-概述" aria-hidden="true">#</a> 5.1 概述</h4><p>在微服务架构中，一个系统会被拆分为很多个微服务。那么作为客户端要如何去调用这么多的微服务呢？</p><p>如果没有网关的存在，只能在客户端记录每个微服务的地址，然后分别去调用，这样非常麻烦且容易出错。</p><p>可以加入网关，就是指系统的<strong>统一入口</strong>，它封装了应用程序的内部结构，为客户端提供统一服务，一些与业务本身功能无关的公共逻辑可以在这里实现，诸如认证、鉴权、监控、路由转发等等。</p><p><img src="https://s2.loli.net/2023/10/17/XmxUeLNiovMgwkz.png" alt="image-20230305233444008"></p><h4 id="_5-2-基础用法-结合nacos" tabindex="-1"><a class="header-anchor" href="#_5-2-基础用法-结合nacos" aria-hidden="true">#</a> 5.2 基础用法-结合nacos</h4><h5 id="_1-引入nacos和gateway依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入nacos和gateway依赖" aria-hidden="true">#</a> 1 引入Nacos和Gateway依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--gateway网关--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--nacos客户端--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-主类上启用nacos" tabindex="-1"><a class="header-anchor" href="#_2-主类上启用nacos" aria-hidden="true">#</a> 2 主类上启用Nacos</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiGatewayApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApiGatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-修改yml" tabindex="-1"><a class="header-anchor" href="#_3-修改yml" aria-hidden="true">#</a> 3 修改yml</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7000</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
	  <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
	    <span class="token key atrule">locator</span><span class="token punctuation">:</span>
	      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 让gateway可以发现nacos中的微服务</span>
	  <span class="token key atrule">routes</span><span class="token punctuation">:</span>
	    <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> product_route
	      <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//service<span class="token punctuation">-</span>product <span class="token comment"># lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略</span>
	      <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
	        <span class="token punctuation">-</span> Path=/product<span class="token punctuation">-</span>serv/<span class="token important">**</span>
	      <span class="token key atrule">filters</span><span class="token punctuation">:</span>
	        <span class="token punctuation">-</span> StripPrefix=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-gateway核心架构" tabindex="-1"><a class="header-anchor" href="#_5-3-gateway核心架构" aria-hidden="true">#</a> 5.3 <strong>Gateway</strong>核心架构</h4><h5 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h5><p>路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:</p><ol><li><strong><code>id</code></strong>，路由标识符，区别于其他 Route。</li><li><strong><code>uri</code></strong>，路由指向的目的地 uri，即客户端请求最终被转发到的微服务。</li><li><strong><code>order</code></strong>\`，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高。</li><li><strong><code>predicate</code></strong>，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。</li><li><strong><code>fifilter</code></strong>，过滤器用于修改请求和响应信息。</li></ol><h5 id="执行流程图" tabindex="-1"><a class="header-anchor" href="#执行流程图" aria-hidden="true">#</a> 执行流程图</h5><h5 id="执行流程简述" tabindex="-1"><a class="header-anchor" href="#执行流程简述" aria-hidden="true">#</a> 执行流程简述</h5><ol><li>Gateway Client向Gateway Server发送请求</li><li>请求首先会被<code>HttpWebHandlerAdapter</code>进行提取组装成网关上下文</li><li>然后网关的上下文会传递到<code>DispatcherHandler</code>，它负责将请求分发给<code>RoutePredicateHandlerMapping</code></li><li><code>RoutePredicateHandlerMapping</code>负责路由查找，并根据路由断言判断路由是否可用</li><li>如果过断言成功，由<code>FilteringWebHandler</code>创建过滤器链并调用</li><li>请求会一次经过<code>PreFilter--微服务--PostFilter</code>的方法，最终返回响应</li></ol><h3 id="六、skywalking" tabindex="-1"><a class="header-anchor" href="#六、skywalking" aria-hidden="true">#</a> 六、<strong>SkyWalking</strong></h3><h4 id="_6-1-链路追踪可以解决的问题" tabindex="-1"><a class="header-anchor" href="#_6-1-链路追踪可以解决的问题" aria-hidden="true">#</a> 6.1 链路追踪可以解决的问题</h4><ol><li>串联整个调用链路，快速定位问题</li><li>缕清各个微服务之间的依赖关系</li><li>进行各个微服务接口的性能分折</li><li>跟踪整个业务流程的调用处理顺序</li></ol><h4 id="_6-2-链路追踪框架对比" tabindex="-1"><a class="header-anchor" href="#_6-2-链路追踪框架对比" aria-hidden="true">#</a> 6.2 链路追踪框架对比</h4><ol><li><p>Zipkin是Twitter开源的调用链分析工具，目前基于springcloud sleuth得到了广泛的使用，特点是轻量，使用部署简单。</p></li><li><p>Pinpoint是韩国人开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，UI功能强大，接入端无代码侵入。</p></li><li><p>SkyWalking是本土开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，UI功能较强，接入端无代码侵入。目前已加入Apache孵化器。</p></li><li><p>CAT是大众点评开源的基于编码和配置的调用链分析，应用监控分析，日志采集，监控报警等一系列的监控平台工具。</p></li></ol><p><img src="https://s2.loli.net/2023/10/17/fiWp5Rat6LIl43s.png" alt="image-20230306093621560"></p><h4 id="_6-3-skywalking主要功能特性" tabindex="-1"><a class="header-anchor" href="#_6-3-skywalking主要功能特性" aria-hidden="true">#</a> 6.3 <strong>Skywalking主要功能特性</strong></h4><p>1、多种监控手段，可以通过语言探针和service mesh获得监控的数据；</p><p>2、支持多种语言自动探针，包括 Java，.NET Core 和 Node.JS；</p><p>3、轻量高效，无需大数据平台和大量的服务器资源；</p><p>4、模块化，UI、存储、集群管理都有多种机制可选；</p><p>5、支持告警；</p><p>6、优秀的可视化解决方案；</p><h4 id="_6-4-基础用法" tabindex="-1"><a class="header-anchor" href="#_6-4-基础用法" aria-hidden="true">#</a> 6.4 基础用法</h4><h5 id="_1-下载skywalking" tabindex="-1"><a class="header-anchor" href="#_1-下载skywalking" aria-hidden="true">#</a> 1 下载SkyWalking</h5><p>http://skywalking.apache.org/downloads/</p><h5 id="_2-通过startup启动skywalking" tabindex="-1"><a class="header-anchor" href="#_2-通过startup启动skywalking" aria-hidden="true">#</a> 2 通过startup启动SkyWalking</h5><p>启动成功后会启动两个服务，一个是skywalking-oap-server，一个是skywalking-web-ui</p><ol><li>skywalking-oap-server服务启动后会暴露11800 和 12800 两个端口，分别为收集监控数据的端口11800和接受前端请求的端口12800，修改端口可以修改config/applicaiton.yml</li><li>skywalking-web-ui服务会占用 8080 端口， 修改端口可以修改webapp/webapp.yml</li></ol><h5 id="_3-idea中接入skywalking" tabindex="-1"><a class="header-anchor" href="#_3-idea中接入skywalking" aria-hidden="true">#</a> 3 IDEA中接入SkyWalking</h5><p>通过javaagent参数配置方式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># skywalking‐agent.jar的本地磁盘的路径
‐javaagent:D:\\apache\\apache‐skywalking‐apm‐es7‐8.4.0\\apache‐skywalking‐apm‐bin‐es7\\agent\\skywalking‐agent.jar
# 在skywalking上显示的服务名
‐DSW_AGENT_NAME=springboot‐skywalking‐demo
# skywalking的collector服务的IP及端口
‐DSW_AGENT_COLLECTOR_BACKEND_SERVICES=192.168.3.100:11800
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,115),l=[i];function p(c,o){return n(),s("div",null,l)}const r=a(t,[["render",p],["__file","SpringCloudxuexizongjie.html.vue"]]);export{r as default};
