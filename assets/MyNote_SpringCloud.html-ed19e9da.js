import{_ as e,r as t,o as p,c as i,a as n,b as o,d as c,e as a}from"./app-55752f72.js";const l={},u=a(`<h2 id="微服务架构演化" tabindex="-1"><a class="header-anchor" href="#微服务架构演化" aria-hidden="true">#</a> 微服务架构演化</h2><h3 id="从单体到微服务" tabindex="-1"><a class="header-anchor" href="#从单体到微服务" aria-hidden="true">#</a> 从单体到微服务</h3><p>软件系统架构大致经历了：<code>单体应用架构—&gt;垂直应用架构—&gt;分布式架构—&gt;SOA架构—&gt;微服务架构的演变</code></p><ol><li>单体应用架构： <ul><li>一个项目一个tomcat。</li><li>优点：简单维护简单。</li><li>缺点：紧密耦合容错低，扩展性差，<strong>不适合大项目</strong>。</li></ul></li><li>垂直应用架构： <ul><li>对单体应用架构拆分，多个项目多个tomcat。</li><li>优点：可以针对模块进行集群扩展，一个模块的问题不会影响另一个模块</li><li>缺点：各系统相互独立，会有重复冗余的代码且系统间无法互相调用</li></ul></li><li>分布式架构： <ul><li>对垂直应用架构拆分，把整个系统分为展现层和服务层</li><li>优点：<strong>提高代码复用性</strong></li><li>缺点：系统间耦合度变高，调用关系错综复杂，难以维护</li></ul></li><li>SOA架构（面向服务）： <ul><li>对分布式架构优化，展现层和服务层中间多了个服务治理中心。</li><li>优点：使用注册中心解决了服务间调用关系的自动调节</li><li>缺点：服务间有依赖关系，一但出现问题会引起服务雪崩；服务间调用关系复杂</li></ul></li><li>微服务架构： <ul><li>把SOA架构中的服务层拆分成原子状态。</li><li>优点：服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，<strong>利于扩展</strong></li></ul></li></ol><h3 id="微服务架构的问题以及解决方式" tabindex="-1"><a class="header-anchor" href="#微服务架构的问题以及解决方式" aria-hidden="true">#</a> 微服务架构的问题以及解决方式</h3><p>一旦采用微服务系统架构，就势必会遇到这样几个问题：</p><ul><li>这么多小服务，如何管理他们？(服务治理 注册中心[服务注册 发现 剔除])</li><li>这么多小服务，他们之间如何通讯？(<strong>restful</strong>)</li><li>这么多小服务，客户端怎么访问他们？(网关)</li><li>这么多小服务，一旦出现问题了，应该如何自处理？(容错)</li><li>这么多小服务，一旦出现问题了，应该如何排错？ (链路追踪)</li></ul><h2 id="eureka" tabindex="-1"><a class="header-anchor" href="#eureka" aria-hidden="true">#</a> Eureka</h2><h3 id="集群" tabindex="-1"><a class="header-anchor" href="#集群" aria-hidden="true">#</a> 集群</h3><h4 id="集群方案" tabindex="-1"><a class="header-anchor" href="#集群方案" aria-hidden="true">#</a> 集群方案</h4><ol><li>中心化集群</li><li>主从模式集群</li><li>去中心化模式（没有主从概念）（Eureka采用这个模式）</li></ol><p><img src="https://s2.loli.net/2023/10/17/KuimTewqZDWSNBJ.png" alt="image-20230217141309353"></p><h4 id="集群注册方案" tabindex="-1"><a class="header-anchor" href="#集群注册方案" aria-hidden="true">#</a> 集群注册方案</h4><h5 id="第一种" tabindex="-1"><a class="header-anchor" href="#第一种" aria-hidden="true">#</a> 第一种</h5><ol><li>A服务器向B和C服务器注册</li><li>B向A和C注册</li><li>C向A和B注册</li></ol><h5 id="第二种" tabindex="-1"><a class="header-anchor" href="#第二种" aria-hidden="true">#</a> 第二种</h5><ol><li>A向ABC注册</li><li>修改[配置文件](# 集群服务器的yml配置)，改变端口即可</li></ol><h4 id="如何在一台电脑模拟出集群效果呢" tabindex="-1"><a class="header-anchor" href="#如何在一台电脑模拟出集群效果呢" aria-hidden="true">#</a> 如何在一台电脑模拟出集群效果呢</h4><blockquote><p>通过<code>win + r</code>打开运行，输入<code>drivers</code>，修改<code>etc/host</code>，加入以下配置就能骗过去了</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>127.0.0.1 peer1
127.0.0.1 peer2
127.0.0.1 peer3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="集群服务器的yml配置" tabindex="-1"><a class="header-anchor" href="#集群服务器的yml配置" aria-hidden="true">#</a> 集群服务器的yml配置</h4><blockquote><p>可以通过一次性注册所有集群url，然后复制配置文件就能直接启动了</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 单机</span>

<span class="token comment">## 应用名称</span>
<span class="token comment">#spring:</span>
<span class="token comment">#  application:</span>
<span class="token comment">#    name: euraka-server</span>
<span class="token comment">#server:</span>
<span class="token comment">#  port: 8761 # eureka默认端口</span>
<span class="token comment">#eureka:</span>
<span class="token comment">#  server:</span>
<span class="token comment">#    eviction-interval-timer-in-ms: 10000  # 服务器隔多少毫秒执行清除操作</span>
<span class="token comment">#    renewal-percent-threshold: 0.85 # 续约百分比，超过85%的应用没和服务器续约，则不会删除任何服务（防止因为服务器自身网络问题误删）</span>
<span class="token comment">#  instance:</span>
<span class="token comment">#    instance-id: \${eureka.instance.hostname}:\${spring.application.name}:\${server.port}</span>
<span class="token comment">#    hostname: localhost</span>
<span class="token comment">#    prefer-ip-address: true # 以ip形式显示具体服务信息</span>
<span class="token comment">#    lease-renewal-interval-in-seconds: 5 # 服务示例续约的时间间隔</span>

<span class="token comment"># 集群，这里简单配置一下</span>
<span class="token comment"># 应用名称</span>
<span class="token comment">#spring:</span>
<span class="token comment">#  application:</span>
<span class="token comment">#    name: euraka-server</span>
<span class="token comment">#server:</span>
<span class="token comment">#  port: 8761 # eureka默认端口</span>
<span class="token comment">#eureka:</span>
<span class="token comment">#  client:</span>
<span class="token comment">#    service-url: # 默认是 8761 ，现在要指定向另外两台服务器注册</span>
<span class="token comment">#      defaultZone: http://peer2:8762/eureka,http://peer3:8763/eureka</span>
<span class="token comment">#  instance:</span>
<span class="token comment">#    instance-id: \${eureka.instance.hostname}:\${spring.application.name}:\${server.port}</span>
<span class="token comment">#    hostname: peer1</span>
<span class="token comment">#    prefer-ip-address: true # 以ip形式显示具体服务信息</span>
<span class="token comment">#    lease-renewal-interval-in-seconds: 5 # 服务示例续约的时间间隔</span>


<span class="token comment">#集群终极方案</span>
<span class="token comment">#通过改配置端口，开启多台服务器，同时注册的时候全写就行</span>
<span class="token comment"># 应用名称</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> euraka<span class="token punctuation">-</span>server
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span> <span class="token comment"># eureka默认端口</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> <span class="token comment"># 默认是 8761 ，现在要指定向所有服务器注册（包括自己）</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8762/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>8763/eureka
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
<span class="token comment">#    instance-id: \${eureka.instance.hostname}:\${spring.application.name}:\${server.port}</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>
<span class="token comment">#    hostname: peer1</span>
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 以ip形式显示具体服务信息</span>
    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 服务示例续约的时间间隔</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="集群客户端的yml配置" tabindex="-1"><a class="header-anchor" href="#集群客户端的yml配置" aria-hidden="true">#</a> 集群客户端的yml配置</h4><blockquote><p>直接向所有服务器注册</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">## 应用名称</span>
<span class="token comment">#spring:</span>
<span class="token comment">#  application:</span>
<span class="token comment">#    name: eureka-client-a</span>
<span class="token comment">#server:</span>
<span class="token comment">#  port: 8080 # 客户端端口无要求</span>
<span class="token comment">#eureka:</span>
<span class="token comment">#  client:</span>
<span class="token comment">#    service-url: # 指定注册的地址</span>
<span class="token comment">#      defaultZone: http://localhost:8761/eureka</span>
<span class="token comment">#    register-with-eureka: true</span>
<span class="token comment">#    fetch-registry: true</span>
<span class="token comment">#    registry-fetch-interval-seconds: 10</span>
<span class="token comment">#  instance:</span>
<span class="token comment">#    instance-id: \${eureka.instance.hostname}:\${spring.application.name}:\${server.port}</span>
<span class="token comment">#    hostname: localhost</span>
<span class="token comment">#    prefer-ip-address: true # 以ip形式显示具体服务信息</span>
<span class="token comment">#    lease-renewal-interval-in-seconds: 10 # 服务示例续约的时间间隔</span>


<span class="token comment"># 应用名称</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>a
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span> <span class="token comment"># 客户端端口无要求</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> <span class="token comment"># 指定注册的地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//peer1<span class="token punctuation">:</span>8761/eureka<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//peer2<span class="token punctuation">:</span>8762/eureka，http<span class="token punctuation">:</span>//peer3<span class="token punctuation">:</span>8763/eureka
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#是否注册自己（集群需要注册自己和拉取服务）</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">registry-fetch-interval-seconds</span><span class="token punctuation">:</span> <span class="token number">10</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 以ip形式显示具体服务信息</span>
    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 服务示例续约的时间间隔</span>
    

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分布式数据一致性协议" tabindex="-1"><a class="header-anchor" href="#分布式数据一致性协议" aria-hidden="true">#</a> <strong>分布式数据一致性协议</strong></h3><blockquote><p><code>eureka</code> <strong>没有分布式数据一致性的机制</strong> 节点都是相同的</p><p>在有主从模式的集群中 一般都要遵循<code>Paxos或Raft</code>等的协议 才可以稳定对外提供服务</p></blockquote><h4 id="paxos" tabindex="-1"><a class="header-anchor" href="#paxos" aria-hidden="true">#</a> Paxos</h4><p>zk（Zookeeper） 是 Paxos</p><h4 id="raft" tabindex="-1"><a class="header-anchor" href="#raft" aria-hidden="true">#</a> Raft</h4><p>Nacos raft</p><p>动画展示：http://thesecretlivesofdata.com/raft/</p><h3 id="eureka-概念的理解" tabindex="-1"><a class="header-anchor" href="#eureka-概念的理解" aria-hidden="true">#</a> <strong>Eureka</strong> <strong>概念的理解</strong></h3><p><strong>6.1</strong> <strong>服务的注册</strong></p><p>当项目启动时（eureka 的客户端），就会向 eureka-server 发送自己的<strong>元数据（原始数据）</strong>（运行的 ip，端口 port，健康的状态监控等，因为使用的是 http/ResuFul 请求风格），</p><p>eureka-server 会在自己内部保留这些元数据(内存中)。（有一个服务列表）（restful 风格，以 http 动词的请求方式，完成对 url 资源的操作）</p><p><strong>6.2</strong> <strong>服务的续约</strong></p><p>项目启动成功了，除了向 eureka-server 注册自己成功，还会<strong>定时</strong>的向 eureka-server 汇报自己，心跳，表示自己还活着。（修改一个时间）</p><p><strong>6.3</strong> <strong>服务的下线（主动下线）</strong></p><p>当项目关闭时，会给 eureka-server 报告，说明自己要下机了。</p><p><strong>6.4</strong> <strong>服务的剔除（被动下线，主动剔除）</strong></p><p>当项目超过了指定时间没有向 eureka-server 汇报自己，那么 eureka-server 就会认为此节点死掉了，会把它剔除掉，也不会放流量和请求到此节点了。</p><h3 id="服务发现-源头" tabindex="-1"><a class="header-anchor" href="#服务发现-源头" aria-hidden="true">#</a> <strong>服务发现（源头）</strong></h3><h4 id="什么是服务发现" tabindex="-1"><a class="header-anchor" href="#什么是服务发现" aria-hidden="true">#</a> <strong>什么是服务发现</strong></h4><p><strong>根据服务名称发现服务的实例过程</strong></p><p><strong>客户端会在本地缓存服务端的列表</strong></p><p><strong>拉取列表是有间隔周期的 （导致服务上线 客户端不能第一时间感知到 （可以容忍））</strong></p><p><strong>其实每次做服务发现 都是从本地的列表来进行的</strong></p><p><img src="https://s2.loli.net/2023/10/17/kVX7R4taEAKsDd9.png" alt="image-20230217165044369"></p><ol><li>在a服务里做服务发现</li><li>访问访问 http://localhost:8001/find?serviceId=eureka-client-b</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ServiceInstance</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span></span><span class="token class-name">DiscoveryClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
    * 注入服务发现组件，我们的 eureka 已经实现了这个接口，所以 IOC 里面有这个对象
    */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DiscoveryClient</span> discoveryClient<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
    * 服务发现
    *
    * <span class="token keyword">@param</span> <span class="token parameter">serviceId</span>
    * <span class="token keyword">@return</span>
    */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;find&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//调用服务发现</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span>serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        instances<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instances<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resttemplate发送同步rest请求" tabindex="-1"><a class="header-anchor" href="#resttemplate发送同步rest请求" aria-hidden="true">#</a> RestTemplate发送同步REST请求</h3><h4 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h4><ol><li>通过实例化<code>RestTemplate</code></li><li>通过<code>RestTemplate</code>的对象调用对应方法（GET、POST等等） <ul><li><code>getForObject</code>返回的是个泛型，希望什么类型可以指定</li><li><code>getForEntity</code>返回响应的实体</li></ul></li></ol><h2 id="ribbon" tabindex="-1"><a class="header-anchor" href="#ribbon" aria-hidden="true">#</a> Ribbon</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>Spring Cloud Ribbon 是一个基于 HTTP 和 TCP 的<code>客户端负载均衡工具</code>，它基于 <strong>Netflix</strong>Ribbon 实现。通过 Spring Cloud 的封装，可以让我们轻松地将面向服务的 <strong>REST 模版请求</strong>自动转换成客户端负载均衡的服务调用。 <code>轮询 hash 权重 ... </code></p><p>简单的说 Ribbon 就是 netfix 公司的一个开源项目，主要功能是提供<strong>客户端负载均衡算法和服务调用</strong>。Ribbon 客户端组件提供了一套完善的配置项，比如<strong>连接超时，重试</strong>等。。通过Load Balancer获取到服务提供的所有机器实例，Ribbon会自动基于某种规则(轮询，随机)去调用这些服务。Ribbon也可以实现我们自己的负载均衡算法。</p><p>在 Spring Cloud 构建的微服务系统中， Ribbon 作为服务**消费者(客户端)**的负载均衡器，有两种使用方式，一种是和 <strong>RestTemplate</strong> 相结合，另一种是和 OpenFeign 相结合。OpenFeign 已经默认集成了 Ribbon,关于 OpenFeign 的内容将会在下一章进行详细讲解。Ribbon 有很多子模块，但很多模块没有用于生产环境!</p><blockquote><p>目前主流的负载方案分为以下两种：</p><ol><li>集中式负载均衡，在消费者和服务提供方中间使用独立的代理方式进行负载，有硬件的（比如 F5），也有软件的（比如Nginx）。</li><li>客户端根据自己的请求情况做负载均衡，Ribbon 就属于客户端自己做负载均衡。</li></ol></blockquote><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h3><p>负载均衡，英文名称为 Load Balance（<strong><code>LB</code></strong>）http:// lb://（负载均衡协议） ，其含义就是指将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，例如 Web 服务器、企业核心应用服务器和其它主要任务服务器等，从而协同完成工作任务。</p><p>负载均衡构建在原有网络结构之上，它提供了一种透明且廉价有效的方法扩展服务器和网络设备的带宽、加强网络数据处理能力、增加吞吐量、提高网络的可用性和灵活性。</p><h3 id="常见负载均衡算法" tabindex="-1"><a class="header-anchor" href="#常见负载均衡算法" aria-hidden="true">#</a> <strong>常见负载均衡算法</strong></h3><ol><li>随机，通过随机选择服务进行执行，一般这种方式使用较少;</li><li>轮训，负载均衡默认实现方式，请求来之后排队处理;</li><li>加权轮训，通过对服务器性能的分型，给高配置，低负载的服务器分配更高的权重，均衡各个服务器的压力;</li><li>地址Hash，通过客户端请求的地址的HASH值取模映射进行服务器调度。 ip ---&gt;hash</li><li>最小链接数，即使请求均衡了，压力不一定会均衡，最小连接数法就是根据服务器的情况，比如请求积压数等参数，将请求分配到当前压力最小的服务器上。 最小活跃数</li></ol><p><img src="https://s2.loli.net/2023/10/17/fa1uUoHeGhR57Ji.png" alt="image-20230228175757542"></p><h4 id="irule" tabindex="-1"><a class="header-anchor" href="#irule" aria-hidden="true">#</a> <strong>IRule</strong></h4><p>这是所有负载均衡策略的<strong>父接口</strong>，里边的核心方法就是choose方法，用来选择一个服务实例。</p><h4 id="abstractloadbalancerrule" tabindex="-1"><a class="header-anchor" href="#abstractloadbalancerrule" aria-hidden="true">#</a> <strong>AbstractLoadBalancerRule</strong></h4><p>AbstractLoadBalancerRule是一个抽象类，里边主要定义了一个ILoadBalancer，这里定义它的目的主要是辅助负责均衡策略选取合适的服务端实例。</p><h4 id="randomrule" tabindex="-1"><a class="header-anchor" href="#randomrule" aria-hidden="true">#</a> <strong>RandomRule</strong></h4><p>看名字就知道，这种负载均衡策略就是<strong>随机选择一个服务实例</strong>，看源码我们知道，在RandomRule的无参构造方法中初始化了一个Random对象，然后在它重写的choose方法又调用了choose(ILoadBalancer lb, Object key)这个重载的choose方法，在这个重载的choose方法中，每次利用random对象生成一个不大于服务实例总数的随机数，并将该数作为下标所以获取一个服务实例。</p><h4 id="roundrobinrule" tabindex="-1"><a class="header-anchor" href="#roundrobinrule" aria-hidden="true">#</a> <strong>RoundRobinRule</strong></h4><p>RoundRobinRule这种负载均衡策略叫做线性<strong>轮询负载均衡策略</strong>。这个类的choose(ILoadBalancer lb, Object key)函数整体逻辑是这样的：开启一个计数器count，在while循环中遍历服务清单，获取清单之前先通过incrementAndGetModulo方法获取一个下标，这个下标是一个不断自增长的数先加1然后和服务清单总数取模之后获取到的（所以这个下标从来不会越界），拿着下标再去服务清单列表中取服务，每次循环计数器都会加1，如果连续10次都没有取到服务，则会报一个警告No available alive servers after 10 tries from load balancer: XXXX。</p><h4 id="retryrule-在轮询的基础上进行重试" tabindex="-1"><a class="header-anchor" href="#retryrule-在轮询的基础上进行重试" aria-hidden="true">#</a> <strong>RetryRule</strong>（在轮询的基础上进行重试）</h4><p>看名字就知道这种负载均衡策略带有<strong>重试</strong>功能。首先RetryRule中又定义了一个subRule，它的实现类是RoundRobinRule，然后在RetryRule的choose(ILoadBalancer lb, Object key)方法中，每次还是采用RoundRobinRule中的choose规则来选择一个服务实例，如果选到的实例正常就返回，如果选择的服务实例为null或者已经失效，则<strong>在失效时间deadline之前不断的进行重试</strong>（重试时获取服务的策略还是RoundRobinRule中定义的策略），如果超过了deadline还是没取到则会返回一个null。</p><h4 id="weightedresponsetimerule" tabindex="-1"><a class="header-anchor" href="#weightedresponsetimerule" aria-hidden="true">#</a> <strong>WeightedResponseTimeRule</strong></h4><p>（<strong>Nacos还扩展了一个自己的基于配置的权重扩展--NacosRule</strong>）**</p><p>WeightedResponseTimeRule是RoundRobinRule的一个子类，在WeightedResponseTimeRule中对RoundRobinRule的功能进行了扩展，WeightedResponseTimeRule中会根据每一个实例的运行情况来给计算出该实例的一个<strong>权重</strong>，然后在挑选实例的时候则根据权重进行挑选，这样能够实现更优的实例调用。WeightedResponseTimeRule中有一个名叫DynamicServerWeightTask的定时任务，默认情况下每隔30秒会计算一次各个服务实例的权重，权重的计算规则也很简单，<strong>如果一个服务的平均响应时间越短则权重越大，那么该服务实例被选中执行任务的概率也就越大</strong>。</p><h4 id="clientconfigenabledroundrobinrule" tabindex="-1"><a class="header-anchor" href="#clientconfigenabledroundrobinrule" aria-hidden="true">#</a> <strong>ClientConfigEnabledRoundRobinRule</strong></h4><p>ClientConfigEnabledRoundRobinRule选择策略的实现很简单，内部定义了RoundRobinRule，choose方法还是采用了RoundRobinRule的choose方法，所以它的选择策略和<strong>RoundRobinRule</strong>的选择策略一致，不赘述。</p><h4 id="bestavailablerule" tabindex="-1"><a class="header-anchor" href="#bestavailablerule" aria-hidden="true">#</a> <strong>BestAvailableRule</strong></h4><p>BestAvailableRule继承自ClientConfigEnabledRoundRobinRule，它在ClientConfigEnabledRoundRobinRule的基础上主要增加了根据loadBalancerStats中保存的服务实例的状态信息来**过滤掉失效的服务实例的功能，然后顺便找出并发请求最小的服务实例来使用。**然而loadBalancerStats有可能为null，如果loadBalancerStats为null，则BestAvailableRule将采用它的父类即ClientConfigEnabledRoundRobinRule的服务选取策略（线性轮询）。</p><h4 id="zoneavoidancerule-默认" tabindex="-1"><a class="header-anchor" href="#zoneavoidancerule-默认" aria-hidden="true">#</a> <strong>ZoneAvoidanceRule（默认）</strong></h4><p>（<strong>默认规则</strong>，复合判断server所在区域的性能和server的可用性选择服务器。）（如果<strong>单台机器的话就相当于是轮询</strong>）</p><p>ZoneAvoidanceRule是PredicateBasedRule的一个实现类，只不过这里多一个过滤条件，ZoneAvoidanceRule中的过滤条件是以</p><p>ZoneAvoidancePredicate为主过滤条件和以AvailabilityPredicate为次过滤条件组成的一个叫做CompositePredicate的组合过滤条件，过滤成功之后，继续采用线性轮询(<strong>RoundRobinRule</strong>)的方式从过滤结果中选择一个出来。</p><h4 id="availabilityfilteringrule" tabindex="-1"><a class="header-anchor" href="#availabilityfilteringrule" aria-hidden="true">#</a> <strong>AvailabilityFilteringRule</strong></h4><p>（先过滤掉故障实例，再选择并发较小的实例）</p><p>过滤掉一直连接失败的被标记为circuit tripped的后端Server，并过滤掉那些高并发的后端Server或者使用一个AvailabilityPredicate来包含过滤server的逻辑，其实就是检查status里记录的各个Server的运行状态。</p><h3 id="入门使用" tabindex="-1"><a class="header-anchor" href="#入门使用" aria-hidden="true">#</a> 入门使用</h3><h4 id="_1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1-引入依赖" aria-hidden="true">#</a> 1-引入依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-注册resttemplate的时候加上-loadbalanced" tabindex="-1"><a class="header-anchor" href="#_2-注册resttemplate的时候加上-loadbalanced" aria-hidden="true">#</a> 2-注册RestTemplate的时候加上@LoadBalanced</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 加了@LoadBalanced之后，就会被ribbon控制
     * <span class="token keyword">@return</span>
     */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-之后只要是通过这个resttemplate示例发送的请求都会被ribbon接管" tabindex="-1"><a class="header-anchor" href="#_3-之后只要是通过这个resttemplate示例发送的请求都会被ribbon接管" aria-hidden="true">#</a> 3-之后只要是通过这个restTemplate示例发送的请求都会被ribbon接管</h4><h3 id="修改默认负载均衡策略" tabindex="-1"><a class="header-anchor" href="#修改默认负载均衡策略" aria-hidden="true">#</a> 修改默认负载均衡策略</h3><blockquote><p>注意，修改都在客户端（消费者）</p></blockquote><h4 id="一、配置类方法" tabindex="-1"><a class="header-anchor" href="#一、配置类方法" aria-hidden="true">#</a> 一、配置类方法</h4><h5 id="_1-编写配置类" tabindex="-1"><a class="header-anchor" href="#_1-编写配置类" aria-hidden="true">#</a> 1.编写配置类</h5><blockquote><p>**注意：==此处有坑==。**不能写在@SpringbootApplication注解的@CompentScan扫描得到的地方（默认是扫描启动类的包及其子包下所有），否则自定义的配置类就会被所有的</p><p>RibbonClients共享。</p><p>不建议使用配置类方式，推荐yml方式</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfig</span> <span class="token punctuation">{</span>

<span class="token doc-comment comment">/**
* 全局配置
* 指定负载均衡策略
* <span class="token keyword">@return</span>
*/</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">iRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 指定使用Nacos提供的负载均衡策略（优先调用同一集群的实例，基于随机权重）</span>
         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-在启动类上用-ribbonclient指定微服务及其负载均衡策略。" tabindex="-1"><a class="header-anchor" href="#_2-在启动类上用-ribbonclient指定微服务及其负载均衡策略。" aria-hidden="true">#</a> 2.在启动类上用@RibbonClient指定微服务及其负载均衡策略。</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RibbonClients</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token comment">// name 是服务名，configuration配置自定义配置类</span>
    <span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;mall‐order&quot;</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">RibbonConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;mall‐account&quot;</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">RibbonConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二、配置文件方法" tabindex="-1"><a class="header-anchor" href="#二、配置文件方法" aria-hidden="true">#</a> 二、配置文件方法</h4><p>调用指定微服务提供的服务时，使用对应的负载均衡算法</p><p>修改application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>被调用的微服务名
<span class="token key atrule">mall‐order</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    指定使用Nacos提供的负载均衡策略（优先调用同一集群的实例，基于随机<span class="token important">&amp;权重）</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义负载均衡策略" tabindex="-1"><a class="header-anchor" href="#自定义负载均衡策略" aria-hidden="true">#</a> <strong>自定义负载均衡策略</strong></h3><blockquote><p>通过实现 IRule 接口可以自定义负载策略，主要的选择服务逻辑在 choose 方法中</p></blockquote><h4 id="实现基于nacos权重的负载均衡策略" tabindex="-1"><a class="header-anchor" href="#实现基于nacos权重的负载均衡策略" aria-hidden="true">#</a> <strong>实现基于Nacos权重的负载均衡策略</strong></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token annotation punctuation">@Slf4j</span>
<span class="token number">2</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosRandomWithWeightRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">{</span>
<span class="token number">3</span>
<span class="token number">4</span>  <span class="token annotation punctuation">@Autowired</span>
<span class="token number">5</span> <span class="token keyword">private</span> <span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">;</span>
<span class="token number">6</span>
<span class="token number">7</span>  <span class="token annotation punctuation">@Override</span>
<span class="token number">8</span> <span class="token keyword">public</span> <span class="token class-name">Server</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">9</span>  <span class="token class-name">DynamicServerListLoadBalancer</span> loadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DynamicServerListLoadBalancer</span><span class="token punctuation">)</span> <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">10</span>  <span class="token class-name">String</span> serviceName <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">11</span>  <span class="token class-name">NamingService</span> namingService <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">namingServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token number">13</span> <span class="token comment">//nacos基于权重的算法</span>
<span class="token number">14</span>  <span class="token class-name">Instance</span> instance <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">selectOneHealthyInstance</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">15</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">17</span>  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;获取服务实例异常：{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">19</span> <span class="token punctuation">}</span>
<span class="token number">20</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token number">21</span> <span class="token punctuation">}</span>
<span class="token number">22</span>  <span class="token annotation punctuation">@Override</span>
<span class="token number">23</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span><span class="token class-name">IClientConfig</span> clientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">24</span>
<span class="token number">25</span> <span class="token punctuation">}</span>
<span class="token number">26</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置自定义的策略" tabindex="-1"><a class="header-anchor" href="#配置自定义的策略" aria-hidden="true">#</a> <strong>配置自定义的策略</strong></h4><p>通过修改application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>1 <span class="token comment"># 被调用的微服务名</span>
<span class="token key atrule">2 mall‐order</span><span class="token punctuation">:</span>
3  ribbon<span class="token punctuation">:</span>
4  <span class="token comment"># 自定义的负载均衡策略（基于随机&amp;权重）</span>
5  NFLoadBalancerRuleClassName<span class="token punctuation">:</span> com.tuling.mall.ribbondemo.rule.NacosRandomWithWeightRule
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="饥饿加载" tabindex="-1"><a class="header-anchor" href="#饥饿加载" aria-hidden="true">#</a> 饥饿加载</h3><p>在进行服务调用的时候，如果网络情况不好，第一次调用会超时。</p><p>Ribbon默认懒加载，意味着只有在发起调用的时候才会创建客户端。</p><p>开启饥饿加载，解决第一次调用慢的问题</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">1 ribbon</span><span class="token punctuation">:</span>
2   eager‐load<span class="token punctuation">:</span>
3     <span class="token comment"># 开启ribbon饥饿加载</span>
4     enabled<span class="token punctuation">:</span> <span class="token boolean important">true</span>
5     <span class="token comment"># 配置mall‐user使用ribbon饥饿加载，多个使用逗号分隔</span>
6     clients<span class="token punctuation">:</span> mall‐order
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nacos" tabindex="-1"><a class="header-anchor" href="#nacos" aria-hidden="true">#</a> Nacos</h2><h3 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么</h3><p>官方：一个更易于构建云原生应用的动态**服务发现(**Nacos Discovery <strong>)</strong>、**服务配置(<strong>Nacos Config</strong>)**和服务管理平台。</p><p>集 注册中心+配置中心+服务管理 平台</p><p>Nacos 的关键特性包括:</p><ol><li>服务发现和服务健康监测</li><li>动态配置服务</li><li>动态 DNS 服务</li><li>服务及其元数据管理</li></ol><h3 id="执行过程-流程" tabindex="-1"><a class="header-anchor" href="#执行过程-流程" aria-hidden="true">#</a> 执行过程/流程</h3><p><img src="https://s2.loli.net/2023/10/17/EFm2ipxWyZ7LUhg.png" alt="image-20230228171701626"></p><h3 id="与其他注册中心对比" tabindex="-1"><a class="header-anchor" href="#与其他注册中心对比" aria-hidden="true">#</a> 与其他注册中心对比</h3><blockquote><p>CAP C 一致性 A可用性 P 分区容错性</p><p>P一定有，剩下就是保证A或者保证C了</p></blockquote><p><img src="https://s2.loli.net/2023/10/17/wBLYy73ScJWnuef.png" alt="image-20230228171740576"></p><h3 id="核心功能" tabindex="-1"><a class="header-anchor" href="#核心功能" aria-hidden="true">#</a> 核心功能</h3><ol><li><strong>服务注册</strong>：Nacos Client会通过发送REST请求的方式向Nacos Server注册自己的服务，提供自身的元数据，比如ip地址、端口等信息。Nacos Server接收到注册请求后，就会把这些元数据信息存储在一个双层的内存Map中。</li><li><strong>服务心跳</strong>：在服务注册后，Nacos Client会维护一个定时心跳来持续通知Nacos Server，说明服务一直处于可用状态，防止被剔除。默认5s发送一次心跳。</li><li><strong>服务同步</strong>：Nacos Server集群之间会互相同步服务实例，用来保证服务信息的一致性。 leader raft</li><li><strong>服务发现</strong>：服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个REST请求给Nacos Server，获取上面注册的服务清单，并且缓存在Nacos Client本地，同时会在Nacos Client本地开启一个定时任务定时拉取服务端最新的注册表信息更新到本地缓存</li><li><strong>服务健康检查</strong>：Nacos Server会开启一个定时任务用来检查注册服务实例的健康情况，对于超过15s没有收到客户端心跳的实例会将它的healthy属性置为false(客户端服务发现时不会发现)，如果某个实例超过30秒没有收到心跳，直接剔除该实例(被剔除的实例如果恢复发送心跳则会重新注册）</li></ol><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery</p><h3 id="注册中心-入门用法" tabindex="-1"><a class="header-anchor" href="#注册中心-入门用法" aria-hidden="true">#</a> 注册中心-入门用法</h3><h4 id="搭建nacos环境" tabindex="-1"><a class="header-anchor" href="#搭建nacos环境" aria-hidden="true">#</a> <strong>搭建</strong>nacos环境</h4><h5 id="第1步-安装nacos" tabindex="-1"><a class="header-anchor" href="#第1步-安装nacos" aria-hidden="true">#</a> 第1步: 安装nacos</h5><p>下载地址: https://github.com/alibaba/nacos/releases</p><p>下载zip格式的安装包，然后进行解压缩操作</p><h5 id="第2步-启动nacos" tabindex="-1"><a class="header-anchor" href="#第2步-启动nacos" aria-hidden="true">#</a> 第2步: 启动nacos</h5><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>#切换目录，进入bin目录
cd nacos/bin
#命令启动，-m可以用来指定单机还是集群，默认是单机，默认端口8848
startup.cmd -m standalone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="第3步-访问nacos" tabindex="-1"><a class="header-anchor" href="#第3步-访问nacos" aria-hidden="true">#</a> 第3步: 访问nacos</h5><p>打开浏览器输入http://localhost:8848/nacos，即可访问服务， 默认密码是nacos/nacos</p><h4 id="将商品微服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#将商品微服务注册到nacos" aria-hidden="true">#</a> <strong>将商品微服务注册到nacos</strong></h4><h5 id="_1-在pom-xml中添加nacos的依赖" tabindex="-1"><a class="header-anchor" href="#_1-在pom-xml中添加nacos的依赖" aria-hidden="true">#</a> 1 在pom.xml中添加nacos的依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--nacos客户端--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-在主类上添加-enablediscoveryclient注解" tabindex="-1"><a class="header-anchor" href="#_2-在主类上添加-enablediscoveryclient注解" aria-hidden="true">#</a> 2 在主类上添加<code>@EnableDiscoveryClient</code>注解</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductApplication</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-在application-yml中添加nacos服务的地址" tabindex="-1"><a class="header-anchor" href="#_3-在application-yml中添加nacos服务的地址" aria-hidden="true">#</a> 3 在application.yml中添加nacos服务的地址</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置中心" tabindex="-1"><a class="header-anchor" href="#配置中心" aria-hidden="true">#</a> 配置中心</h3><h4 id="与springcloud-config对比" tabindex="-1"><a class="header-anchor" href="#与springcloud-config对比" aria-hidden="true">#</a> 与SpringCloud config对比</h4><p><strong>三大优势：</strong></p><ol><li>springcloud config大部分场景结合git 使用，动态变更还需要依赖 <code>Spring Cloud Bus</code> 消息总线来通过所有的户端变化（有延迟）</li><li>springcloud config<code>不提供</code>可视化界面</li><li>nacos config使用长轮询更新配置，一旦配置有变动后，通知Provider的过程非常的迅速，从速度上秒杀springcloud原来的config几条街</li></ol><h4 id="入门用法" tabindex="-1"><a class="header-anchor" href="#入门用法" aria-hidden="true">#</a> 入门用法</h4><h5 id="_1-nacos中创建配置" tabindex="-1"><a class="header-anchor" href="#_1-nacos中创建配置" aria-hidden="true">#</a> 1）nacos中创建配置</h5><h5 id="_2-项目中引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-项目中引入依赖" aria-hidden="true">#</a> 2）项目中引入依赖</h5><blockquote><p>在<code>SpringCloud 2020.* </code>版本把bootstrap禁用了，导致在读取文件的时候读取不到而报错，所以要把bootstrap手动导入进来才能生效</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-bootstrap --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- &lt;version&gt;3.0.3&lt;/version&gt;--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-添加bootstrap-yml" tabindex="-1"><a class="header-anchor" href="#_3-添加bootstrap-yml" aria-hidden="true">#</a> 3）添加bootstrap.yml</h5><blockquote><p>注意：这里项目名要与配置中心的<code>DataId</code>一致才行</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> com.xiaohuowa.order
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos
      <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-测试" tabindex="-1"><a class="header-anchor" href="#_4-测试" aria-hidden="true">#</a> 4）测试</h5><blockquote><p>在启动类中读取配置中心的配置并输出</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> userName <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> userAge <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="feign" tabindex="-1"><a class="header-anchor" href="#feign" aria-hidden="true">#</a> Feign</h2><h3 id="java-项目中如何实现接口调用" tabindex="-1"><a class="header-anchor" href="#java-项目中如何实现接口调用" aria-hidden="true">#</a> <strong>JAVA 项目中如何实现接口调用？</strong></h3><p><strong>1）Httpclient</strong></p><p>HttpClient 是 Apache Jakarta Common 下的子项目，用来提供高效的、最新的、功能丰富的支持 Http 协议的客户端编程工具包，并且它支持 HTTP 协议最新版本和建议。HttpClient 相比传统 JDK 自带的 URLConnection，提升了易用性和灵活性，使客户端发送 HTTP 请求变得容易，提高了开发的效率。</p><p><strong>2）Okhttp</strong></p><p>一个处理网络请求的开源项目，是安卓端最火的轻量级框架，由 Square 公司贡献，用于替代 HttpUrlConnection 和 Apache HttpClient。OkHttp 拥有简洁的 API、高效的性能，并支持多种协议（HTTP/2 和 SPDY）。</p><p><strong>3）HttpURLConnection</strong></p><p>HttpURLConnection 是 Java 的标准类，它继承自 URLConnection，可用于向指定网站发送 GET 请求、POST 请求。HttpURLConnection 使用比较复杂，不像 HttpClient 那样容易使用。</p><p><strong>4）RestTemplate WebClient</strong></p><p>RestTemplate 是 Spring 提供的用于访问 Rest 服务的客户端，RestTemplate 提供了多种便捷访问远程 HTTP 服务的方法，能够大大提高客户端的编写效率。</p><h3 id="什么是feign" tabindex="-1"><a class="header-anchor" href="#什么是feign" aria-hidden="true">#</a> <strong>什么是Feign</strong></h3><p>Feign是Netflix开发的声明式、模板化的HTTP客户端，其灵感来自Retrofit、JAXRS-2.0以及WebSocket。</p><p>Feign可帮助我们更加便捷、优雅地调用HTTP API。</p><p>Spring Cloud openfeign对Feign进行了增强，使其支持Spring MVC注解，另外还整合了Ribbon和Nacos，从而使得Feign的使用更加方便（所以现在提到Feign基本都是在指openfeign）</p><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h4><p>Feign可以做到使用 HTTP 请求远程服务时就<strong>像调用本地方法一样</strong>的体验，开发者完全感知不到这是远程方法，更感知不到这是个 HTTP 请求。</p><p>它像 Dubbo 一样，consumer 直接调用接口方法调用 provider，而不需要通过常规的 Http Client 构造请求再解析返回数据。它解决了让开发者调用远程接口就跟调用本地方法一样，无需关注与远程的交互细节，更无需关注分布式环境开发。</p><h3 id="spring-cloud-alibaba快速整合openfeign-四步" tabindex="-1"><a class="header-anchor" href="#spring-cloud-alibaba快速整合openfeign-四步" aria-hidden="true">#</a> <strong>Spring Cloud Alibaba快速整合OpenFeign</strong>（四步）</h3><h4 id="一、引入依赖" tabindex="-1"><a class="header-anchor" href="#一、引入依赖" aria-hidden="true">#</a> 一、引入依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--加入openfeign依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二、编写调用接口-feignclient注解" tabindex="-1"><a class="header-anchor" href="#二、编写调用接口-feignclient注解" aria-hidden="true">#</a> 二、编写调用接口+@FeignClient注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * name 指定要调用的服务名
 * path 相当于对应服务的类的 @RequestMapping(&quot;/stock&quot;) 中的值
 */</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;mall‐order&quot;</span><span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderFeignService</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 声明方法，同对应服务的对应方法
     * <span class="token keyword">@return</span>
     */</span>
     <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/findOrderByUserId/{userId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">findOrderByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="三、调用端在启动类上添加-enablefeignclients注解" tabindex="-1"><a class="header-anchor" href="#三、调用端在启动类上添加-enablefeignclients注解" aria-hidden="true">#</a> 三、调用端在启动类上添加@EnableFeignClients注解</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token comment">// @EnableDiscoveryClient</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderOpenFeignApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderOpenFeignApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">/*
    用了 openfeign 之后不需要RestTemplate了
    @Bean
    @LoadBalanced // 负载均衡
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        RestTemplate restTemplate = builder.build();
        return restTemplate;
    }*/</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="四、发起调用-像调用本地方式一样调用远程服务" tabindex="-1"><a class="header-anchor" href="#四、发起调用-像调用本地方式一样调用远程服务" aria-hidden="true">#</a> 四、发起调用，像调用本地方式一样调用远程服务</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StockFeignService</span> stockFeignService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ProductFeignService</span> productFeignService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;下单成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// String msg = restTemplate.getForObject(&quot;http://localhost:8011/stock/reduct&quot;, String.class);</span>
        <span class="token comment">// String msg = restTemplate.getForObject(&quot;http://stock-service/stock/reduct&quot;, String.class);</span>
        <span class="token class-name">String</span> msg <span class="token operator">=</span> stockFeignService<span class="token punctuation">.</span><span class="token function">reduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> pro <span class="token operator">=</span> productFeignService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello world&quot;</span> <span class="token operator">+</span> msg <span class="token operator">+</span> pro<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-cloud-feign的自定义配置及使用" tabindex="-1"><a class="header-anchor" href="#spring-cloud-feign的自定义配置及使用" aria-hidden="true">#</a> <strong>Spring Cloud Feign的自定义配置及使用</strong></h3><h4 id="日志配置" tabindex="-1"><a class="header-anchor" href="#日志配置" aria-hidden="true">#</a> <strong>日志配置</strong></h4><p>有时候我们遇到 Bug，比如接口调用失败、参数没收到等问题，或者想看看调用性能，就需要配置 Feign 的日志了，以此让 Feign 把请求信息输出来</p><h5 id="日志等级" tabindex="-1"><a class="header-anchor" href="#日志等级" aria-hidden="true">#</a> 日志等级</h5><ol><li><strong><code>NONE</code></strong>【性能最佳，适用于生产】：不记录任何日志（默认值）。</li><li><strong><code>BASIC</code></strong>【适用于生产环境追踪问题】：仅记录请求方法、URL、响应状态代码以及执行时间。</li><li><strong><code>HEADERS</code></strong>：记录BASIC级别的基础上，记录请求和响应的header。</li><li><strong><code>FULL</code></strong>【比较适用于开发及测试环境定位问题】：记录请求和响应的header、body和元数据。</li></ol><h5 id="配置方法" tabindex="-1"><a class="header-anchor" href="#配置方法" aria-hidden="true">#</a> 配置方法</h5><h6 id="_1-定义一个配置类-指定日志级别" tabindex="-1"><a class="header-anchor" href="#_1-定义一个配置类-指定日志级别" aria-hidden="true">#</a> <strong>1）定义一个配置类，指定日志级别</strong></h6><blockquote><p>加<code>@Configuration</code>代表是全局配置</p><p>不加<code>@Configuration</code>是[局部配置](# 局部配置，让调用的微服务生效，在@FeignClient 注解中指定使用的配置类)</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 加了 @Configuration 会使配置作用在所有的服务提供方（全局配置）
 * 不加 @Configuration ，可以针对某个或某几个服务提供方进行配置（局部配置）
 */</span>
<span class="token annotation punctuation">@Configuration</span> <span class="token comment">// 全局配置</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 设置返回日志的级别</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2-修改yml日志级别" tabindex="-1"><a class="header-anchor" href="#_2-修改yml日志级别" aria-hidden="true">#</a> 2) 修改yml日志级别</h6><blockquote><p>格式是<code>logging.level.feign接口包路径=debug</code></p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># SpringBoot 默认日志等级为 info，如果不进行如下修改，feign 的 debug 日志等级就不会输出</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span> <span class="token comment"># 如果在这里配，就是所有日志等级都修改</span>
    <span class="token key atrule">com.xiaohuowa.order.feign</span><span class="token punctuation">:</span> debug  <span class="token comment"># 在这里指定包来配，可以让部分改变日志等级</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="局部配置-让调用的微服务生效-在-feignclient-注解中指定使用的配置类" tabindex="-1"><a class="header-anchor" href="#局部配置-让调用的微服务生效-在-feignclient-注解中指定使用的配置类" aria-hidden="true">#</a> 局部配置，让调用的微服务生效，在@FeignClient 注解中指定使用的配置类</h6><blockquote><p>注意：用局部配置之后，配置类不能加<code>@Configuration</code>注解！</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * name 指定要调用的服务名
 * path 相当于对应服务的类的 @RequestMapping(&quot;/stock&quot;) 中的值
 * configuration 可以指定一个 feign 的局部配置
 */</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;stock-service&quot;</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">&quot;/stock&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">FeignConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StockFeignService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 声明方法，同对应服务的对应方法
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/reduct&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="补充-局部配置可以在yml中配置" tabindex="-1"><a class="header-anchor" href="#补充-局部配置可以在yml中配置" aria-hidden="true">#</a> <strong>补充：局部配置可以在yml中配置</strong></h6><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># feign 日志，局部配置</span>
<span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">product-service</span><span class="token punctuation">:</span> <span class="token comment"># 指定服务提供方名字</span>
        <span class="token key atrule">logger-level</span><span class="token punctuation">:</span> BASIC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="契约配置-让高版本支持cloud支持feign原生注解" tabindex="-1"><a class="header-anchor" href="#契约配置-让高版本支持cloud支持feign原生注解" aria-hidden="true">#</a> <strong>契约配置（让高版本支持Cloud支持Feign原生注解）</strong></h4><p>​ Spring Cloud 在 Feign 的基础上做了扩展，使用 Spring MVC 的注解来完成Feign的功能。原生的 Feign 是不支持 Spring MVC 注解的，如果你想在 Spring Cloud 中使用原生的注解方式来定义客户端也是可以的，通过配置契约来改变这个配置，Spring Cloud 中默认的是 SpringMvcContract。</p><p>​ Spring Cloud 1 早期版本就是用的原生Fegin. 随着netflix的停更替换成了Open feign</p><blockquote><p>注意：修改契约配置后，OrderFeignService <code>不再支持</code>springmvc的注解，需要使用Feign原生的注解</p></blockquote><h5 id="配置文件-配置步骤" tabindex="-1"><a class="header-anchor" href="#配置文件-配置步骤" aria-hidden="true">#</a> 配置文件-配置步骤</h5><h6 id="_1-修改契约配置-支持feign原生的注解" tabindex="-1"><a class="header-anchor" href="#_1-修改契约配置-支持feign原生的注解" aria-hidden="true">#</a> <strong>1）修改契约配置，支持Feign原生的注解</strong></h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token doc-comment comment">/**
2 * 修改契约配置，支持Feign原生的注解
3 * @return
4 */</span>
<span class="token number">5</span> <span class="token annotation punctuation">@Bean</span>
<span class="token number">6</span> <span class="token keyword">public</span> <span class="token class-name">Contract</span> <span class="token function">feignContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">7</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Contract<span class="token punctuation">.</span>Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">8</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2-orderfeignservice-中配置使用feign原生的注解" tabindex="-1"><a class="header-anchor" href="#_2-orderfeignservice-中配置使用feign原生的注解" aria-hidden="true">#</a> <strong>2）OrderFeignService 中配置使用Feign原生的注解</strong></h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span> <span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;mall‐order&quot;</span><span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
<span class="token number">2</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderFeignService</span> <span class="token punctuation">{</span>
<span class="token number">3</span>  <span class="token annotation punctuation">@RequestLine</span><span class="token punctuation">(</span><span class="token string">&quot;GET /findOrderByUserId/{userId}&quot;</span><span class="token punctuation">)</span>
<span class="token number">4</span> <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">findOrderByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">5</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="yml-配置步骤" tabindex="-1"><a class="header-anchor" href="#yml-配置步骤" aria-hidden="true">#</a> <strong>yml-配置步骤</strong></h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">product-service</span><span class="token punctuation">:</span> <span class="token comment"># 指定服务提供方名字</span>
        <span class="token key atrule">logger-level</span><span class="token punctuation">:</span> BASIC
        <span class="token key atrule">contract</span><span class="token punctuation">:</span> feign.Contract.Default  <span class="token comment"># 设置为默认的契约 （还原成原生的注解）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义拦截器" tabindex="-1"><a class="header-anchor" href="#自定义拦截器" aria-hidden="true">#</a> <strong>自定义拦截器</strong></h4><blockquote><p>从<code>客户端</code>到<code>服务器</code>，中间的拦截器是MVC的</p><p>从一个<code>微服务</code>到另一个<code>微服务</code>，中间拦截器是feign可以配置的</p></blockquote><h5 id="配置文件方式" tabindex="-1"><a class="header-anchor" href="#配置文件方式" aria-hidden="true">#</a> 配置文件方式</h5><h6 id="创建自定义拦截器" tabindex="-1"><a class="header-anchor" href="#创建自定义拦截器" aria-hidden="true">#</a> 创建自定义拦截器</h6><blockquote><p>需要实现<code>RequestInterceptor</code>并重写<code>apply</code>方法</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> xiaohuowa
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span>  <span class="token punctuation">{</span>

    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 给 header 加东西</span>
        requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 给请求参数加东西</span>
        requestTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 修改uri</span>
        requestTemplate<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/999&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 自定义记录日志操作</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;这里是 feign 的拦截器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="在配置文件中创建拦截器实例" tabindex="-1"><a class="header-anchor" href="#在配置文件中创建拦截器实例" aria-hidden="true">#</a> 在配置文件中创建拦截器实例</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span> <span class="token comment">// 全局配置</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 自定义拦截器
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomInterceptor</span> <span class="token function">customInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="yml配置" tabindex="-1"><a class="header-anchor" href="#yml配置" aria-hidden="true">#</a> <strong>yml配置</strong></h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">product-service</span><span class="token punctuation">:</span> <span class="token comment"># 指定服务提供方名字</span>
        <span class="token key atrule">logger-level</span><span class="token punctuation">:</span> BASIC
        <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">1000</span>  <span class="token comment"># 连接超时时间，默认2s</span>
        <span class="token key atrule">read-timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>  <span class="token comment"># 请求处理超时时间，默认5s</span>
        <span class="token key atrule">request-interceptors</span><span class="token punctuation">:</span>
          <span class="token punctuation">-</span> com.xiaohuowa.order.interceptor.feign.CustomInterceptor  <span class="token comment"># 配置自定义的拦截器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="超时时间配置" tabindex="-1"><a class="header-anchor" href="#超时时间配置" aria-hidden="true">#</a> <strong>超时时间配置</strong></h4><blockquote><p>补充说明： Feign的底层用的是Ribbon，但超时时间以Feign配置为准</p></blockquote><p>通过 Options 可以配置连接超时时间和读取超时时间</p><ol><li>Options 的第一个参数是连接的超时时间（ms），默认值是 <code>2s</code>；</li><li>第二个是请求处理的超时时间（ms），默认值是 <code>5s</code>。</li></ol><h5 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置" aria-hidden="true">#</a> <strong>全局配置</strong></h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span> <span class="token comment">// 全局配置</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Request<span class="token punctuation">.</span>Options</span> <span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 这里设置连接超时时间为：1s
         * 读取（响应）超时时间为：3s
         */</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Options</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="yml中配置" tabindex="-1"><a class="header-anchor" href="#yml中配置" aria-hidden="true">#</a> <strong>yml中配置</strong></h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">product-service</span><span class="token punctuation">:</span> <span class="token comment"># 指定服务提供方名字</span>
        <span class="token key atrule">logger-level</span><span class="token punctuation">:</span> BASIC
        <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">1000</span>  <span class="token comment"># 连接超时时间，默认2s</span>
        <span class="token key atrule">read-timeout</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token comment"># 请求处理超时时间，默认5s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端组件配置" tabindex="-1"><a class="header-anchor" href="#客户端组件配置" aria-hidden="true">#</a> <strong>客户端组件配置</strong></h4><p>Feign 中默认使用 JDK 原生的 URLConnection 发送 HTTP 请求，我们可以集成别的组件来替换掉 URLConnection，比如 Apache HttpClient，OkHttp</p><h5 id="配置apache-httpclient" tabindex="-1"><a class="header-anchor" href="#配置apache-httpclient" aria-hidden="true">#</a> <strong>配置Apache HttpClient</strong></h5><blockquote><p>关于配置可参考源码： org.springframework.cloud.openfeign.FeignAutoConfiguration</p></blockquote><h6 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h6><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!‐‐</span> <span class="token attr-name">Apache</span> <span class="token attr-name">HttpClient</span> <span class="token attr-name">‐‐</span><span class="token punctuation">&gt;</span></span>
2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
4 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
5 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
6 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
7 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
8 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
9 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign‐httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
10 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>10.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
11 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="修改yml配置" tabindex="-1"><a class="header-anchor" href="#修改yml配置" aria-hidden="true">#</a> 修改yml配置</h6><p>在yml中启用 HttpClient</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">1 feign</span><span class="token punctuation">:</span>
2  <span class="token comment">#feign 使用 Apache HttpClient 可以忽略，默认开启</span>
3  httpclient<span class="token punctuation">:</span>
4  enabled<span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置-okhttp" tabindex="-1"><a class="header-anchor" href="#配置-okhttp" aria-hidden="true">#</a> <strong>配置 OkHttp</strong></h5><blockquote><p>关于配置可参考源码： org.springframework.cloud.openfeign.FeignAutoConfiguration</p></blockquote><h6 id="引入依赖-1" tabindex="-1"><a class="header-anchor" href="#引入依赖-1" aria-hidden="true">#</a> 引入依赖</h6><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
2     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
3     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign‐okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
4 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="修改yml" tabindex="-1"><a class="header-anchor" href="#修改yml" aria-hidden="true">#</a> 修改yml</h6><p>将 Feign 的 HttpClient 禁用，启用 OkHttp，配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">1 feign</span><span class="token punctuation">:</span>
2  <span class="token comment">#feign 使用 okhttp</span>
3  httpclient<span class="token punctuation">:</span>
4  enabled<span class="token punctuation">:</span> <span class="token boolean important">false</span>
5  okhttp<span class="token punctuation">:</span>
6  enabled<span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="gzip-压缩配置" tabindex="-1"><a class="header-anchor" href="#gzip-压缩配置" aria-hidden="true">#</a> <strong>GZIP 压缩配置</strong></h4><blockquote><p>注意：只有当 Feign 的 Http Client <strong>不是 okhttp3 的时候，压缩才会生效</strong>，配置源码在FeignAcceptGzipEncodingAutoConfiguration</p></blockquote><p>开启压缩可以有效节约网络资源，提升接口性能，我们可以配置 GZIP 来压缩数据：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">1 feign</span><span class="token punctuation">:</span>
2  <span class="token comment"># 配置 GZIP 来压缩数据</span>
3  compression<span class="token punctuation">:</span>
4  request<span class="token punctuation">:</span>
5  enabled<span class="token punctuation">:</span> <span class="token boolean important">true</span>
6  <span class="token comment"># 配置压缩的类型</span>
7  mime‐types<span class="token punctuation">:</span> text/xml<span class="token punctuation">,</span>application/xml<span class="token punctuation">,</span>application/json
8  <span class="token comment"># 最小压缩值</span>
图灵课堂
9  min‐request‐size<span class="token punctuation">:</span> <span class="token number">2048</span>
10  response<span class="token punctuation">:</span>
11  enabled<span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="为什么在okhttp3的时候不会生效" tabindex="-1"><a class="header-anchor" href="#为什么在okhttp3的时候不会生效" aria-hidden="true">#</a> 为什么在okhttp3的时候不会生效？</h5><p>核心代码就是 <code>@ConditionalOnMissingBean（type=&quot;okhttp3.OkHttpClient&quot;）</code>，表示 Spring BeanFactory 中<strong>不包含</strong>指定的 bean 时条件匹配，也就是没有启用 okhttp3 时才会进行压缩配置。</p><p>​</p><h2 id="sentinel" tabindex="-1"><a class="header-anchor" href="#sentinel" aria-hidden="true">#</a> sentinel</h2>`,263),r={href:"https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},d=a(`<blockquote><p>默认是懒加载的，必须先访问一次服务之后才会出现在控制台上</p><p>可以通过配置取消懒加载</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">sentinel</span><span class="token punctuation">:</span>  
<span class="token key atrule">eager</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="降级" tabindex="-1"><a class="header-anchor" href="#降级" aria-hidden="true">#</a> 降级</h5><p>定义降级逻辑</p><p>两种方法：</p><p>1）fallback</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;media-api&quot;</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">MultipartSupportConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">MediaServiceClientFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/media&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MediaServiceClient</span><span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个fallback类MediaServiceClientFallback，此类实现了MediaServiceClient接口。</p><p>这种方法<strong>无法取出熔断所抛出的异常</strong>，而第二种方法定义FallbackFactory 可以解决这个问题。</p><p>2）fallbackFactory</p><p>第二种方法在FeignClient中指定fallbackFactory ，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;media-api&quot;</span><span class="token punctuation">,</span>
             configuration <span class="token operator">=</span> <span class="token class-name">M</span>  ultipartSupportConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
             fallbackFactory <span class="token operator">=</span> <span class="token class-name">MediaServiceClientFallbackFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义MediaServiceClientFallbackFactory如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediaServiceClientFallbackFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaServiceClient</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MediaServiceClient</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MediaServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> upload<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//降级方法</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;调用媒资管理服务上传文件时发生熔断，异常信息:{}&quot;</span><span class="token punctuation">,</span>throwable<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>降级处理逻辑：</p><p>返回一个null对象，上游服务请求接口得到一个null说明执行了降级处理。</p>`,15);function k(v,m){const s=t("ExternalLinkIcon");return p(),i("div",null,[u,n("p",null,[n("a",r,[o("sentinel快速开始"),c(s)])]),d])}const g=e(l,[["render",k],["__file","MyNote_SpringCloud.html.vue"]]);export{g as default};
