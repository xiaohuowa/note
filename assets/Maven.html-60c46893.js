import{_ as l,r as e,o as c,c as r,d as a,w as i,b as s,a as n,e as o}from"./app-55752f72.js";const u={},d=o(`<h1 id="maven" tabindex="-1"><a class="header-anchor" href="#maven" aria-hidden="true">#</a> Maven</h1><p><img src="https://s2.loli.net/2023/10/17/gioMYGvA4nTOp8t.png" alt="image-20220413210543237"></p><h1 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> Mybatis</h1><p>比如说小于号不能在直接出现在xml内，可以用 &amp;lt；来转义；也可以输入大写CD，用提示打出CDATA区，把内容直接输入就行</p><p>字符少用转义，多用CDATA区</p><p><img src="https://s2.loli.net/2023/10/17/rBZif3zCxq8yIng.png" alt="image-20220414093406057"></p><h2 id="mybatis参数传递" tabindex="-1"><a class="header-anchor" href="#mybatis参数传递" aria-hidden="true">#</a> mybatis参数传递</h2><p><img src="https://s2.loli.net/2023/10/17/nM1WkuGmyZsCOqx.png" alt="image-20220414100938432"></p><h3 id="参数封装" tabindex="-1"><a class="header-anchor" href="#参数封装" aria-hidden="true">#</a> 参数封装</h3><p><img src="https://s2.loli.net/2023/10/17/sgQEVGL78ezvru4.png" alt="image-20220414101112752"></p><p>封装总结：复杂的直接加@Param来给个别名</p><h1 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h1><h2 id="_1-spring新注解-本部分代码在spring-test-annotation文件中" tabindex="-1"><a class="header-anchor" href="#_1-spring新注解-本部分代码在spring-test-annotation文件中" aria-hidden="true">#</a> 1. spring新注解 （本部分代码在spring_test_annotation文件中）</h2><p><img src="https://s2.loli.net/2023/10/17/PqcW9SnQFYzAEgu.png" alt="image-20220510155206087"></p><p><img src="https://s2.loli.net/2023/10/17/CWfMYcGF6hm2Zej.png" alt="image-20220510155156949"></p><h4 id="主配置文件的配置" tabindex="-1"><a class="header-anchor" href="#主配置文件的配置" aria-hidden="true">#</a> 主配置文件的配置：</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 用类的方式来代替 applicationContext.xml
 * <span class="token keyword">@author</span> 小火娃
 */</span>
<span class="token comment">// 标志该类是 Spring 的核心配置类，用类的方式来代替 applicationContext.xml</span>
<span class="token annotation punctuation">@Configuration</span>

<span class="token comment">// &lt;context:component-scan base-package=&quot;com.xiaohuowa&quot;/&gt;</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.xiaohuowa&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// &lt;import resource=&quot;applicationContext-xxx.xml&quot;/&gt; 引入分的配置文件</span>
<span class="token comment">//@Import({DataSourceConfiguration.class, xxx.class})  可以用 逗号 来分隔开多个分的配置文件</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSourceConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s2.loli.net/2023/10/17/AireMyPjCZvxR8E.png" alt="image-20220510213423410"></p><h4 id="分配置文件的配置" tabindex="-1"><a class="header-anchor" href="#分配置文件的配置" aria-hidden="true">#</a> 分配置文件的配置:</h4><ul><li>读取外部文件</li><li>通过内部的属性来获取外部文件的值，再进行注入</li></ul><p><img src="https://s2.loli.net/2023/10/17/oCE39vuxQ52Phfb.png" alt="image-20220510213452732"></p><p><img src="https://s2.loli.net/2023/10/17/2hEi78wKIjFLvcV.png" alt="image-20220510213549749"></p><p><img src="https://s2.loli.net/2023/10/17/DMzTS3sKxvXIV8E.png" alt="image-20220510213652895"></p><h5 id="测试文件的写法" tabindex="-1"><a class="header-anchor" href="#测试文件的写法" aria-hidden="true">#</a> 测试文件的写法：</h5><ul><li>主要要注意在 <em>AnnotationConfigApplicationContext(SpringConfiguration.class);</em> 的时候<strong>类名不能加引号</strong></li></ul><p><img src="https://s2.loli.net/2023/10/17/9oyateuURYDM7nP.png" alt="image-20220510213731127"></p><h2 id="_2-spring-集成-junit-本部分代码在spring-test-annotation文件中" tabindex="-1"><a class="header-anchor" href="#_2-spring-集成-junit-本部分代码在spring-test-annotation文件中" aria-hidden="true">#</a> 2. spring 集成 Junit （本部分代码在spring_test_annotation文件中）</h2>`,27),m=n("p",null,[n("img",{src:"https://s2.loli.net/2023/10/17/9u1IXz5JiwDOt3B.png",alt:"image-20220510214604022"})],-1),h=o(`<p><img src="https://s2.loli.net/2023/10/17/J1IHKspO2BY63Xd.png" alt="image-20220510214533528"></p><h3 id="spring-集成-junit-步骤" tabindex="-1"><a class="header-anchor" href="#spring-集成-junit-步骤" aria-hidden="true">#</a> spring 集成 Junit 步骤</h3><ul><li>导入坐标要 spring-junit 和 junit</li></ul><p><img src="https://s2.loli.net/2023/10/17/dcVFobZqpKeWQ7x.png" alt="image-20220510214859928"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// RunWith 指定Spirng用某个内核来跑测试</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token comment">//@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)  用xml方式</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">SpringConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 用全注解方式配置</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringJunitTest2</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-spring-集成-web" tabindex="-1"><a class="header-anchor" href="#_3-spring-集成-web" aria-hidden="true">#</a> 3. Spring 集成 web</h2>`,6),g={href:"https://blog.csdn.net/wangxinyao1997/article/details/88087564",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,"给项目创 web 模块")],-1),k=n("p",null,[n("img",{src:"https://img-blog.csdnimg.cn/43c0af18d3b34f9d845c6e33067e948f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5omO5ZOH5aSq5p6j57OV,size_20,color_FFFFFF,t_70,g_se,x_16",alt:"img"})],-1);function b(x,_){const t=e("font"),p=e("ExternalLinkIcon");return c(),r("div",null,[d,a(t,{color:"red"},{default:i(()=>[s("**现有问题：**")]),_:1}),m,a(t,{color:"red"},{default:i(()=>[s("**解决思路：**")]),_:1}),h,n("p",null,[n("a",g,[s("IDEA中出现异常: java.lang.NoClassDefFoundError: org/springframework/web/context/WebApplicationContext...._Thinkao~的博客-CSDN博客"),a(p)])]),v,k])}const C=l(u,[["render",b],["__file","Maven.html.vue"]]);export{C as default};
