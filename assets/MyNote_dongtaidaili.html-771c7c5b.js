import{_ as n,o as a,c as s,e}from"./app-55752f72.js";const p={},t=e(`<h2 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理" aria-hidden="true">#</a> 动态代理</h2><h3 id="jdk动态代理" tabindex="-1"><a class="header-anchor" href="#jdk动态代理" aria-hidden="true">#</a> JDK动态代理</h3><ol><li>目标对象必须实现业务接口</li><li>JDK代理对象不需要实现业务接口</li><li>JDK动态代理的对象在程序运行前不存在.在程序运行时动态的在内存中构建</li><li>JDK动态代理灵活的进行业务功能的切换</li><li><strong>本类中的方法(非接口中的方法)不能被代理</strong></li></ol><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><ol><li><p>JDK动态代理</p><ul><li>必须有接口，目标类必须实现接口</li></ul></li><li><p>CGLib动态代理</p><ul><li>没有接口时，需要使用cglib动态代理</li></ul></li></ol><h3 id="什么是动态代理" tabindex="-1"><a class="header-anchor" href="#什么是动态代理" aria-hidden="true">#</a> 什么是动态代理</h3><p>基于反射机制，使用jdk的反射机制，创建对象的能力， 创建的是代理类的对象。 而不用你创建类文件。不用写java文件。 <strong>动态</strong>：在程序执行时，调用jdk提供的方法才能创建代理类的对象。</p><h3 id="动态代理能做什么" tabindex="-1"><a class="header-anchor" href="#动态代理能做什么" aria-hidden="true">#</a> 动态代理能做什么</h3><blockquote><p>静态代理实现了目标对象的灵活切换</p><p>动态代理实现了目标对象实现的业务功能的灵活增加</p><ul><li>在静态代理中如果改变了业务功能，那么目标对象要改变、代理也要改变</li><li>而用了动态代理就不用改变代理类了，只需要变目标对象即可（如果接口方法用的是default的话，那就可以需要哪个目标对象变就让哪个目标）</li></ul></blockquote><p>可以在不改变原来目标方法功能的前提下， 可以在代理中增强自己的功能代码。</p><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h3><h4 id="现实中的代理" tabindex="-1"><a class="header-anchor" href="#现实中的代理" aria-hidden="true">#</a> 现实中的代理</h4><p>代购， 中介，换ip，商家等等</p><h4 id="举个例子" tabindex="-1"><a class="header-anchor" href="#举个例子" aria-hidden="true">#</a> 举个例子：</h4><p>比如有一家美国的大学， 可以对全世界招生。</p><ul><li><p>留学中介（代理）： 帮助这家美国的学校招生， 中介是学校的代理， 中介是代替学校完成招生功能。</p></li><li><p>中介和代理他们要做的事情是一致的： 招生。 （中介是学校代理， 学校是目标。）</p></li><li><p>家长 ---&gt; 中介（学校介绍，办入学手续）----&gt; 美国学校。 中介是代理，不能白干活，需要收取费用（增强）。</p></li><li><p>代理不让你访问到目标。</p></li></ul><h5 id="为什么要找中介" tabindex="-1"><a class="header-anchor" href="#为什么要找中介" aria-hidden="true">#</a> 为什么要找中介 ？</h5><ol><li>中介是专业的， 方便</li><li>家长现在不能自己去找学校。 家长没有能力访问学校。 或者美国学校不接收个人来访。</li></ol><p>买东西都是商家卖， 商家是某个商品的代理， 你个人买东西， 肯定不会让你接触到厂家的。</p><h5 id="开发中的情况" tabindex="-1"><a class="header-anchor" href="#开发中的情况" aria-hidden="true">#</a> 开发中的情况</h5><p>在开发中也会有这样的情况， 现在有个A类，想调用C类的方法，但C不让A调用，但是可以给B调用，所以A需要找B来间接调用C的方法</p><h3 id="使用代理模式的作用" tabindex="-1"><a class="header-anchor" href="#使用代理模式的作用" aria-hidden="true">#</a> 使用代理模式的作用</h3><ol><li><strong>功能增强：</strong> 在你原有的功能上，增加了额外的功能。 新增加的功能，叫做功能增强。</li><li><strong>控制访问：</strong> 代理类不让你访问目标，例如商家不让用户访问厂家。</li></ol><h3 id="实现代理的方式" tabindex="-1"><a class="header-anchor" href="#实现代理的方式" aria-hidden="true">#</a> 实现代理的方式</h3><h4 id="静态代理" tabindex="-1"><a class="header-anchor" href="#静态代理" aria-hidden="true">#</a> 静态代理</h4><h5 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么</h5><ol><li>代理类是自己手工实现的，自己创建一个java类，表示代理类。</li><li>同时你所要代理的目标类是确定的。</li></ol><h5 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h5><ol><li>实现简单</li><li>容易理解。</li></ol><h5 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h5><ol><li>当目标类增加了， 代理类可能也需要成倍的增加。 代理类数量过多。</li><li>当你的接口中功能增加了， 或者修改了，会影响众多的实现类，厂家类，代理都需要修改。影响比较多。</li></ol><h5 id="静态代理代码" tabindex="-1"><a class="header-anchor" href="#静态代理代码" aria-hidden="true">#</a> 静态代理代码</h5><h6 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求：</h6><p>模拟租客租房，租客只能通过中介租房，中介收取500元手续费</p><h6 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤：</h6><ol><li>创建接口定义出租房屋方法，代表中介和房东都要做的事（出租房屋）</li><li>创建房东类实现接口，重写出租房屋方法</li><li>创建中介类（代理）实现接口，重写出租房屋方法 <ul><li>在方法中实例化房东，调用房东的出租房屋方法，获取租金后加价五百返回</li></ul></li><li>创建租客类，实例化中介，调用中介的出租房屋方法，获得的就是中介已经加价过的价格</li></ol><h6 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码：</h6><p>一、共用接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.static_proxy.service
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DoSth</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 出租房子
     * <span class="token keyword">@param</span> <span class="token parameter">months</span> 租几个月
     * <span class="token keyword">@return</span> 返回租金
     */</span>
    <span class="token class-name">Integer</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> months<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、房东类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
* @project_name: dynamic
* @package_name: com.xiaohuowa.static_proxy
 * 房东类
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Landlord</span> <span class="token keyword">implements</span> <span class="token class-name">DoSth</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token doc-comment comment">/**
     * 房东出租房子，一个月1000元
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> months<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> money <span class="token operator">*</span> months<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三、中介类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.static_proxy
 * 中介类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Intermediary</span> <span class="token keyword">implements</span> <span class="token class-name">DoSth</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> months<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 中介手动new个房东</span>
        <span class="token class-name">Landlord</span> landlord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Landlord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取房东的租金数额</span>
        <span class="token class-name">Integer</span> money <span class="token operator">=</span> landlord<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 中介收500中介费</span>
        money <span class="token operator">+=</span> <span class="token number">500</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> money<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>四、租客类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.static_proxy
 * 租户类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tenant</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 租户找中介租房</span>
        <span class="token class-name">Intermediary</span> intermediary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intermediary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> money <span class="token operator">=</span> intermediary<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;通过中介租一个月房需要 &quot;</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">&quot; 元&quot;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过中介租一个月房需要 1500 元</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态代理-1" tabindex="-1"><a class="header-anchor" href="#动态代理-1" aria-hidden="true">#</a> 动态代理</h4><h5 id="避免静态代理的缺点" tabindex="-1"><a class="header-anchor" href="#避免静态代理的缺点" aria-hidden="true">#</a> 避免静态代理的缺点</h5><p>动态代理中目标类即使很多也可以做到</p><ol><li>代理类数量可以很少</li><li>当修改了接口中的方法时，不会影响代理类。</li></ol><p>动态代理： 在程序执行过程中，使用jdk的反射机制，创建代理类对象， 并动态的指定要代理目标类。</p><p>换句话说： 动态代理是一种创建java对象的能力，让你不用创建代理类，就能创建代理类对象。</p><p>在java中，要想创建对象：</p><ul><li>创建类文件， java文件编译为class</li><li>使用构造方法，创建类的对象。</li></ul><h5 id="了解cglib" tabindex="-1"><a class="header-anchor" href="#了解cglib" aria-hidden="true">#</a> 了解CGLib</h5><p>cglib动态代理（了解）: cglib是第三方的工具库， 创建代理对象。<strong>没接口用CGLib</strong></p><p>cglib的原理是继承， cglib通过继承目标类，创建它的子类，在子类中重写父类中同名的方法， 实现功能的修改。</p><p>因为cglib是继承，重写方法，所以要求目标类不能是final的， 方法也不能是final的。</p><p>cglib的要求目标类比较宽松， 只要能继承就可以了。cglib在很多的框架中使用， 比如 mybatis ，spring框架中都有使用。</p><p>CGLib效率高于JDK</p><h5 id="掌握jdk动态代理" tabindex="-1"><a class="header-anchor" href="#掌握jdk动态代理" aria-hidden="true">#</a> 掌握JDK动态代理</h5><blockquote><p>使用Java反射包中的类和接口实现动态代理的功能。</p></blockquote><p>反射包<code>java.lang.reflect</code>, 里面有三个类 ：<code> InvocationHandler</code> , <code>Method,</code> <code>Proxy</code></p><p>反射中的 Method类，表示方法（类中的方法）。 通过Method可以执行某个方法。</p><h6 id="jdk动态代理的实现" tabindex="-1"><a class="header-anchor" href="#jdk动态代理的实现" aria-hidden="true">#</a> jdk动态代理的实现</h6><h6 id="实现动态代理的步骤" tabindex="-1"><a class="header-anchor" href="#实现动态代理的步骤" aria-hidden="true">#</a> 实现动态代理的步骤：</h6><ol><li><p>创建接口，定义目标类要完成的功能</p></li><li><p>创建目标类实现接口</p></li><li><p>创建<code>InvocationHandler接口</code>的实现类，在<code>invoke方法</code>中完成代理类的功能</p><ul><li><p>调用目标方法</p></li><li><p>增强功能</p></li></ul></li><li><p>使用**<code>Proxy类</code>的静态方法**，创建代理对象。 并把<strong>返回值转为接口类型</strong>。</p></li></ol><h6 id="一、invocationhandler-接口" tabindex="-1"><a class="header-anchor" href="#一、invocationhandler-接口" aria-hidden="true">#</a> 一、InvocationHandler 接口</h6><blockquote><p><code>InvocationHandler 接口</code>（调用处理器）：<strong>就一个方法<code>invoke（）</code></strong></p></blockquote><p>invoke（）:<strong>表示代理对象要执行的功能代码</strong>。代理类要完成的功能就写在invoke()方法中。</p><p>代理类要完成什么功能？</p><ul><li>调用目标方法，执行目标方法的功能</li><li>功能增强，在目标方法调用时，增加功能</li></ul><p><code>invoke()方法</code>参数：</p><ol><li>Object proxy:jdk创建的代理对象，无需赋值。</li><li>Method method:目标类中的方法，jdk提供method对象的</li><li>Object[] args：目标类中方法的参数， jdk提供的。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>==用法：==</p><ol><li>创建类实现接口<code>InvocationHandler</code></li><li>重写<code>invoke（）</code>方法， 把原来静态代理中代理类要完成的功能，写在这。</li></ol><h6 id="二、method类" tabindex="-1"><a class="header-anchor" href="#二、method类" aria-hidden="true">#</a> 二、Method类</h6><blockquote><p>Method类表示目标类中的方法。</p></blockquote><p>==作用：==</p><p>通过Method可以执行某个目标类的方法</p><p>这个<code>invoke</code>和上面InvocationHandler 的不是同一个</p><p><code>Method.invoke();method.invoke(目标对象，方法的参数)</code></p><p>相当于：<code>Object ret = method.invoke(方法名, 实参);</code></p><p>说明： method.invoke（）就是用来执行目标方法的，等同于静态代理中的 //向厂家发送订单，告诉厂家，我买了u盘，厂家发货 float price = factory.sell(amount); //厂家的价格。</p><h6 id="三、proxy类" tabindex="-1"><a class="header-anchor" href="#三、proxy类" aria-hidden="true">#</a> 三、Proxy类</h6><p>核心的对象，创建代理对象。之前创建对象都是 new 类的构造方法()，现在是使用Proxy类的方法，<strong>代替new</strong>的使用。</p><p>Proxy类里面的方法： 静态方法 <code>newProxyInstance() </code> ==作用是：==</p><ul><li>创建代理对象， 等同于静态代理中的 TaoBao taoBao = new TaoBao();</li></ul><p>==<code>newProxyInstance</code>参数：==</p><ol><li><code>ClassLoader loader 类加载器</code>，负责向内存中加载对象的。 使用反射获取对象的ClassLoader类a , a.getCalss().getClassLoader(), 目标对象的类加载器</li><li><code>Class&lt;?&gt;[] interfaces</code>： 接口， 目标对象实现的接口，也是反射获取的。</li><li><code>InvocationHandler h</code> : 自己写的，代理类要完成的功能。</li></ol><p>==返回值==</p><ul><li>就是代理对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>
                                  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>
	                                  <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="动态代理代码" tabindex="-1"><a class="header-anchor" href="#动态代理代码" aria-hidden="true">#</a> 动态代理代码</h6><p>==需求：==</p><p>模拟租客租房，租客只能通过中介租房，中介收取500元手续费</p><p>==步骤：==</p><ol><li>创建接口定义出租房屋方法，代表中介和房东都要做的事（出租房屋）</li><li>创建房东类实现接口，重写出租房屋方法</li><li>创建一个<code>InvocationHandler接口</code>的实现类 <ul><li>在这个类中给一个目标对象（这里是房东）赋值（用构造方法或者setter都行），传进来哪个对象，就给哪个对象创建代理</li><li>重写<code>invoke</code>方法，在方法里调用目标对象（这里是房东）的出租方法，并进行加价500元操作</li></ul></li><li>创建租客类，实例化一个目标对象（这里是房东）。再实例化刚才实现了<code>InvocationHandler接口</code>的实现类 <ul><li>通过<code>Proxy</code>的静态方法<code>newProxyInstance</code>创建代理对象，返回值强转为借口（目标对象实现的接口）</li><li>通过返回的接口执行对应方法获取租金金额</li></ul></li></ol><p>==代码==</p><p>一、共用接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.dynamic_proxy.service
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DoSth</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> months<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>						
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、房东类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
* @project_name: dynamic
* @package_name: com.xiaohuowa.dynamic_proxy
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Landlord</span> <span class="token keyword">implements</span> <span class="token class-name">DoSth</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> months<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> money <span class="token operator">*</span> months<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三、<code>InvocationHandler接口</code>的实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.dynamic_proxy
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>

    <span class="token comment">// 动态代理，传进来哪个对象，就给哪个对象创建代理</span>
    <span class="token class-name">MyProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 1. 调用目标方法</span>
        result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 中介加价</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> result<span class="token punctuation">;</span>
            money <span class="token operator">+=</span> <span class="token number">500</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> money<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 3. 返回中介加价后的价格</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>四、租客类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.dynamic_proxy
 * 租户类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tenant</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 1. 创建目标对象（多态）</span>
        <span class="token class-name">DoSth</span> landlord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Landlord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 创建InvocationHandler对象。传入的是房东，就是为房东做动态代理</span>
        <span class="token class-name">MyProxy</span> myProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyProxy</span><span class="token punctuation">(</span>landlord<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3. 创建代理对象（强转为借口）</span>
        <span class="token comment">// 为什么可以强转为借口？因为目标对象 landlord 实际上实现了这个借口</span>
        <span class="token class-name">DoSth</span> doSth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DoSth</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>landlord<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> landlord<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4. 通过代理执行方法</span>
        <span class="token class-name">Integer</span> money <span class="token operator">=</span> doSth<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;通过动态代理中介租2个月房需要 &quot;</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">&quot; 元&quot;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态代理写法二-写个工具类" tabindex="-1"><a class="header-anchor" href="#动态代理写法二-写个工具类" aria-hidden="true">#</a> 动态代理写法二（写个工具类）</h4><ol><li>先给出接口，定义目标类和代理类都要完成的方法</li><li>给出目标类实现接口</li><li>写一个代理工具类 <ul><li>这个类通过构造方法动态接受一个对象，传进来哪个对象就为哪个对象创建动态代理</li><li>给工具类写一个返回动态代理对象的方法 <ul><li>返回<code>Proxy.newProxyInstance</code></li><li>第三个参数（InvocationHandler）用匿名内部实现来直接new一个InvocationHandler接口的实现类，重写里面的invoke方法，在invoke方法里调用目标类的方法，并进行一些增强 <ul><li>这个匿名内部实现返回的是目标方法的返回值</li></ul></li></ul></li></ul></li><li>写测试类 <ul><li>直接实例化代理工具类，同时传入要代理的目标对象，获取代理工具类实例</li><li>执行代理工具类实例获取代理对象，并将其强转为接口（不强转则为Object，后续不能调用方法）</li><li>用<code>代理对象.方法</code>直接进行调用即可</li></ul></li></ol><h5 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h5><h6 id="一、房东类-目标对象" tabindex="-1"><a class="header-anchor" href="#一、房东类-目标对象" aria-hidden="true">#</a> 一、房东类（目标对象）</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiaohuowa<span class="token punctuation">.</span>dynamic_proxy</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xiaohuowa<span class="token punctuation">.</span>dynamic_proxy<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">DoSth</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
* @project_name: dynamic
* @package_name: com.xiaohuowa.dynamic_proxy
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Landlord</span> <span class="token keyword">implements</span> <span class="token class-name">DoSth</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> months<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> money <span class="token operator">*</span> months<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="二、房东和中介都要完成的动作-接口" tabindex="-1"><a class="header-anchor" href="#二、房东和中介都要完成的动作-接口" aria-hidden="true">#</a> 二、房东和中介都要完成的动作（接口）</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiaohuowa<span class="token punctuation">.</span>dynamic_proxy<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.dynamic_proxy.service
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DoSth</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> months<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="三、动态代理工具类" tabindex="-1"><a class="header-anchor" href="#三、动态代理工具类" aria-hidden="true">#</a> 三、动态代理工具类</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiaohuowa<span class="token punctuation">.</span>dynamic_proxy<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.dynamic_proxy.proxy
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">// 传入哪个对象就为哪个对象创建动态代理对象</span>
    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 返回动态代理对象</span>
        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 类加载器，完成目标对象的加载</span>
                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 目标对象实现的所有接口</span>
                <span class="token comment">// InvocationHandler 实现动态代理功能的接口，在这里传入匿名内部实现</span>
                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 获取房东的收租金额</span>
                        <span class="token class-name">Integer</span> money <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 代理（中介）加收手续费（代理功能）</span>
                        money <span class="token operator">+=</span> <span class="token number">500</span><span class="token punctuation">;</span>
                        <span class="token comment">// 后置增强（代理功能）</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;动态代理执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 返回目标对象的方法返回值</span>
                        <span class="token keyword">return</span> money<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="四、测试类-租客租房" tabindex="-1"><a class="header-anchor" href="#四、测试类-租客租房" aria-hidden="true">#</a> 四、测试类（租客租房）</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiaohuowa<span class="token punctuation">.</span>dynamic_proxy</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xiaohuowa<span class="token punctuation">.</span>dynamic_proxy<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">ProxyFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xiaohuowa<span class="token punctuation">.</span>dynamic_proxy<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">DoSth</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 小火娃
 * @project_name: dynamic
 * @package_name: com.xiaohuowa.dynamic_proxy
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实例化工具类并传入目标对象</span>
        <span class="token class-name">ProxyFactory</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Landlord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 转为接口方便后续调用方法</span>
        <span class="token class-name">DoSth</span> agent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DoSth</span><span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">getAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过动态代理对象调用方法</span>
        <span class="token class-name">Integer</span> rent <span class="token operator">=</span> agent<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;租十个月要 &quot;</span> <span class="token operator">+</span> rent <span class="token operator">+</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 动态代理执行</span>
		<span class="token comment">// 租十个月要 10500元</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,118),c=[t];function o(l,i){return a(),s("div",null,c)}const d=n(p,[["render",o],["__file","MyNote_dongtaidaili.html.vue"]]);export{d as default};
